{"_id": "6367676d1a6d9265ec018229", "generate_results": ["public static String[] trimArrayElements(String[] array){\n    if(array == null){\n        return null;\n    }\n    for(int i=0;i<array.length;i++){\n        array[i] = array[i].trim();\n    }\n    return array;\n}"]}
{"_id": "6367670b1a6d9265ec017a00", "generate_results": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    if(array1==null || array2==null){\n        return array1==array2;\n    }else{\n        return array1.length == array2.length;\n    }\n}"]}
{"_id": "636766a91a6d9265ec0175c2", "generate_results": ["private int pop(){\n    if(outputStackTop==outputStackStart){\n        throw new RuntimeException(\"Stack underflow\");\n    }\n    return outputStack[--outputStackTop];\n}"]}
{"_id": "636767081a6d9265ec017989", "generate_results": ["public static boolean[] toPrimitive(final Boolean[] array){\n    if(ArrayUtils.isEmpty(array)){\n        return ArrayUtils.EMPTY_BOOLEAN_ARRAY;\n    }\n    final boolean[] result = new boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].booleanValue();\n    }\n    return result;\n}"]}
{"_id": "6367672d1a6d9265ec017c73", "generate_results": ["public boolean shouldPrintMessage(int timestamp,String message){\n    if(!messages.containsKey(message)||timestamp-messages.get(message)>=10){\n        messages.put(message,timestamp);\n        return true;\n    }\n    return false;\n}"]}
{"_id": "636766f81a6d9265ec01775c", "generate_results": ["public static String toString(Object obj){\n    return obj == null ? \"\" : obj.toString();\n}"]}
{"_id": "6367667f1a6d9265ec017457", "generate_results": ["private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    int start = i;\n    while(i < bb.limit()){\n        int b = bb.get(i++) & 0xFF;\n        if(b < 0x80){\n            sb.append((char) b);\n        }else if(b < 0xC0){\n            continue;\n        }else if(b < 0xE0){\n            if(i + 1 >= bb.limit()){\n                bb.position(start);\n                return start;\n            }\n            int c = ((b & 0x1F) << 6) | (bb.get(i++) & 0x3F);\n            sb.append((char) c);\n        }else if(b < 0xF0){\n            if(i + 2 >= bb.limit()){\n                bb.position(start);\n                return start;\n            }\n            int c = ((b & 0x0F) << 12) | ((bb.get(i++) & 0x3F) << 6) | (bb.get(i++) & 0x3F);\n            sb.append((char) c);\n        }else if(b < 0xF8){\n            if(i + 3 >= bb.limit()){\n                bb.position(start);\n                return start;\n            }\n            int c = ((b & 0x07) << 18) | ((bb.get(i++) & 0x3F) << 12) | ((bb.get(i++) & 0x3F) << 6) | (bb.get(i++) & 0x3F);\n            sb.append((char) c);\n        }else if(b < 0xFC){\n            if(i + 4 >= bb.limit()){\n                bb.position(start);\n                return start;\n            }\n            int c = ((b & 0x03) << 24) | ((bb.get(i++) & 0x3F) << 18) | ((bb.get(i++) & 0x3F) << 12) | ((bb.get(i++) & 0x3F) << 6) | (bb.get(i++) & 0x3F);\n            sb.append((char) c);\n        }else if(b < 0xFE){\n            if(i + 5 >= bb.limit()){\n                bb.position(start);\n                return start;\n            }\n            int c = ((b & 0x01) << 30) | ((bb.get(i++) & 0x3F) << 24) | ((bb.get(i++) & 0x3F) << 18) | ((bb.get(i++) & 0x3F) << 12) | ((bb.get(i++) & 0x3F) << 6) | (bb.get(i++) & 0x3F);\n            sb.append((char) c);\n        }else{\n            if(i + 6 >= bb.limit()){\n                bb.position(start);\n                return start;\n            }\n            int c = ((bb.get(i++) & 0x3F) << 36) | ((bb.get(i++) & 0x3F) << 30) | ((bb.get(i++) & 0x3F) << 24) | ((bb.get(i++) & 0x3F) << 18) | ((bb.get(i++) & 0x3F) << 12) | ((bb.get(i++) & 0x3F) << 6) | (bb.get(i++) & 0x3F);\n            sb.append((char) c);\n        }\n    }\n    return i;\n}"]}
{"_id": "636766aa1a6d9265ec0175ce", "generate_results": ["int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    currentFrame = new int[]{offset,numLocal,numStack};\n    return 3;\n}"]}
{"_id": "636767191a6d9265ec017c0f", "generate_results": ["private void enlarge(final int size){\n    if(size <= 0){\n        return;\n    }\n    if(data.length < position + size){\n        byte[] newData = new byte[data.length + size];\n        System.arraycopy(data, 0, newData, 0, data.length);\n        data = newData;\n    }\n}"]}
{"_id": "636767821a6d9265ec0183a0", "generate_results": ["protected static void deleteFile(String fileName){\n    File file = new File(fileName);\n    if(file.exists()){\n        if(!file.delete()){\n            LogLog.error(\"Failed to delete [\" + fileName + \"].\");\n        }\n    }\n}"]}
{"_id": "636767691a6d9265ec0181aa", "generate_results": ["public static int nullSafeHashCode(long[] array){\n    if (array == null){\n        return INITIAL_HASH;\n    }\n    int result = INITIAL_HASH;\n    for (long element : array){\n        result = result * MULTIPLIIPLIER + (int)(element ^ (element >>> 32));\n    }\n    return result;\n}"]}
{"_id": "636767441a6d9265ec017cc1", "generate_results": ["private TreeNode<T> rotateRight(TreeNode<T> node){\n    TreeNode<T> left = node.getLeft();\n    node.setLeft(left.getRight());\n    left.setRight(node);\n    node.updateHeightAndSubtreeSize();\n    left.updateHeightAndSubtreeSize();\n    return left;\n}"]}
{"_id": "6367667f1a6d9265ec01745c", "generate_results": ["@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    if(dir==null) return;\n    File dirFile=new File(dir);\n    if(!dirFile.exists()) return;\n    if(!dirFile.isDirectory()) return;\n    File[] jars=dirFile.listFiles(new FilenameFilter(){\n        public boolean accept(File dir,String name){\n            return name.endsWith(\".jar\");\n        }\n    });\n    if(jars==null) return;\n    for(int i=0;i<jars.length;i++){\n        try{\n            cpV.addElement(jars[i].toURI().toURL());\n        }catch(MalformedURLException e){\n            e.printStackTrace();\n        }\n    }\n}"]}
{"_id": "6367677e1a6d9265ec01830f", "generate_results": ["public String format(LoggingEvent event){\n    if (sbuf == null) {\n        sbuf = new StringBuffer(BUF_SIZE);\n    } else {\n        sbuf.setLength(0); // clear buffer\n    }\n    PatternConverter converter = head;\n    while (converter != null) {\n        converter.format(sbuf, event);\n        converter = converter.next;\n    }\n    return sbuf.toString();\n}"]}
{"_id": "636767031a6d9265ec0178dd", "generate_results": ["public long contentLength(){\n    try{\n        return Long.parseLong(request.getHeader(\"Content-Length\"));\n    }catch(NumberFormatException e){\n        return -1;\n    }\n}"]}
{"_id": "636766f11a6d9265ec017658", "generate_results": ["public static int indexOfLastSeparator(String filename){\n    if (filename == null) {\n        return -1;\n    }\n    int lastUnixPos = filename.lastIndexOf(File.separatorChar);\n    int lastWindowsPos = filename.lastIndexOf(File.pathSeparatorChar);\n    return Math.max(lastUnixPos, lastWindowsPos);\n}"]}
{"_id": "636767121a6d9265ec017b0a", "generate_results": ["private int parseEndOfLine(String headerPart,int end){\n    for(int i = end; i < headerPart.length(); i++){\n        if(headerPart.charAt(i) == '\\n'){\n            return i;\n        }\n    }\n    return -1;\n}"]}
{"_id": "636766f61a6d9265ec017701", "generate_results": ["public static int lastIndexOf(String str,String searchStr){\n    if(str == null || searchStr == null){\n        return INDEXNOTFOUND;\n    }\n    return str.lastIndexOf(searchStr);\n}"]}
{"_id": "6367670b1a6d9265ec0179fe", "generate_results": ["@Override public void write(byte b[]) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else {\n        write(b, 0, b.length);\n    }\n}"]}
{"_id": "636767df1a6d9265ec01873c", "generate_results": ["public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}"]}
{"_id": "636766f91a6d9265ec01777f", "generate_results": ["public static boolean toBoolean(Boolean bool){\n    return bool != null && bool;\n}"]}
{"_id": "6367675f1a6d9265ec0180d3", "generate_results": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    Map<V,V> forwardMapping = new HashMap<V,V>();\n    Map<V,V> backwardMapping = new HashMap<V,V>();\n    for(V v : graph.vertexSet()){\n        forwardMapping.put(v,v);\n        backwardMapping.put(v,v);\n    }\n    return new IsomorphicGraphMapping<V,E>(forwardMapping,backwardMapping,graph,graph);\n}"]}
{"_id": "636766fe1a6d9265ec017833", "generate_results": ["public static void forceDeleteOnExit(File file) throws IOException {\n    if (file.exists()) {\n        if (file.isDirectory()) {\n            deleteDirectoryOnExit(file);\n        } else {\n            file.deleteOnExit();\n        }\n    }\n}"]}
{"_id": "636767791a6d9265ec018257", "generate_results": ["public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable() {\n        public void run() {\n            _table.addMessage(lr);\n        }\n    });\n}"]}
{"_id": "636767641a6d9265ec01817d", "generate_results": ["@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n  if(sizeA==0||sizeB==0){\n    throw new IllegalArgumentException(\"The size of partitions A and B must be greater than 0.\");\n  }\n  if(partitionA==null||partitionB==null){\n    throw new IllegalArgumentException(\"The partitions A and B must not be null.\");\n  }\n  if(partitionA.size()>sizeA||partitionB.size()>sizeB){\n    throw new IllegalArgumentException(\"The size of partitions A and B must be less or equal to their respective sizes.\");\n  }\n  for(V vertexA : partitionA){\n    for(V vertexB : partitionB){\n      if(vertexA.equals(vertexB)){\n        throw new IllegalArgumentException(\"The partitions A and B must not contain the same vertex.\");\n      }\n      target.addEdge(vertexA,vertexB);\n      if(resultMap != null){\n        resultMap.put(vertexA.toString() + \"-\" + vertexB.toString(),target.getEdge(vertexA,vertexB));\n      }\n    }\n  }\n}"]}
{"_id": "636766ff1a6d9265ec017851", "generate_results": ["protected int findByte(byte value,int pos){\n    for(int i=pos;i<tail;i++){\n        if(buffer[i]==value){\n            return i;\n        }\n    }\n    return -1;\n}"]}
{"_id": "636767a41a6d9265ec018582", "generate_results": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    int size = ProtobufIOUtil.writeDelimitedTo(out,message,schema,buffer);\n    if (out instanceof Flushable) {\n        ((Flushable)out).flush();\n    }\n    return size;\n}"]}
{"_id": "636767001a6d9265ec01787e", "generate_results": ["public String toString(){\n    if(buffer == null){\n        return null;\n    }\n    return buffer.toString();\n}"]}
{"_id": "636767781a6d9265ec01823d", "generate_results": ["protected void subAppend(LoggingEvent event){\n    if(dir == null){\n        dir = new File(path);\n        if(!dir.exists()){\n            dir.mkdirs();\n        }\n    }\n    try{\n        Writer out = new BufferedWriter(new FileWriter(dir + File.separator + prefix + OptionConverter.getCurrentTime() + suffix, true));\n        out.write(layout.format(event));\n        out.close();\n    }catch(Exception e){\n        errorHandler.error(\"Error while writing to log file\", e, ErrorLevel.ERROR);\n    }\n}"]}
{"_id": "636766ef1a6d9265ec01761a", "generate_results": ["int addType(final String value){\n    return 0;\n}"]}
{"_id": "636766821a6d9265ec0174b6", "generate_results": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    if(genericType instanceof ParameterizedType){\n        Type[] argumentTypes=((ParameterizedType)genericType).getActualTypeArguments();\n        Class<?>[] argumentClasses=new Class<?>[argumentTypes.length];\n        for(int i=0;i<argumentTypes.length;i++){\n            argumentClasses[i]=resolveArgument(argumentTypes[i],targetType);\n        }\n        return argumentClasses;\n    }\n    return null;\n}"]}
{"_id": "636767e11a6d9265ec018781", "generate_results": ["@Override public void accept(final METRICS data){\n    if (buffer.containsKey(data.getId())) {\n        final METRICS existing = buffer.get(data.getId());\n        final METRICS combined = existing.combine(data);\n        if (combined.isAbandoned()) {\n            buffer.remove(data.getId());\n        } else {\n            buffer.put(data.getId(), combined);\n        }\n    } else {\n        buffer.put(data.getId(), data);\n    }\n}"]}
{"_id": "636767531a6d9265ec017efb", "generate_results": ["void insertBefore(Bucket bucket){\n    if(bucket==null){\n        throw new NullPointerException();\n    }\n    if(bucket==this){\n        throw new IllegalArgumentException(\"Cannot insert self before self\");\n    }\n    if(bucket.prev==this){\n        throw new IllegalArgumentException(\"Bucket is already inserted before\");\n    }\n    if(bucket.next==this){\n        throw new IllegalArgumentException(\"Bucket is already inserted after\");\n    }\n    if(bucket.graph != graph){\n        throw new IllegalArgumentException(\"Bucket is not part of this graph\");\n    }\n    if(bucket.next != null){\n        bucket.next.prev = this;\n    }\n    if(bucket.prev != null){\n        bucket.prev.next = this;\n    }\n    if(bucket.head == bucket){\n        bucket.head = this;\n    }\n    bucket.next = this;\n    this.prev = bucket;\n    this.graph = bucket.graph;\n    if(bucket.bucketMap != null){\n        bucket.bucketMap.put(vertex, this);\n    }\n}"]}
{"_id": "636766f11a6d9265ec017641", "generate_results": ["@Override public int available() throws IOException {\n    if (index >= length) {\n        fillBuffer();\n    }\n    return length - index;\n}"]}
{"_id": "636767de1a6d9265ec018706", "generate_results": ["public Mappings diffStructure(String tableName,Mappings mappings){\n    if(!containsStructure(tableName,mappings)){\n        return mappings;\n    }\n    Fields fields = getMapping(tableName);\n    return mappings.stream()\n            .filter(mapping -> !Objects.equals(mapping.getSource(), source))\n            .collect(Collectors.toMap(Mappings::getSource, Mappings::getFields))\n            .entrySet()\n            .stream()\n            .map(entry -> new Mappings(entry.getKey(), diffFields(entry.getValue(), fields)))\n            .collect(Collectors.toMap(Mappings::getSource, Mappings::getFields));\n}"]}
{"_id": "636767dd1a6d9265ec0186e5", "generate_results": ["public void addNewTarget(Channels channels,IConsumer consumer){\n    consumeTargets.add(new Group(channels,consumer));\n}"]}
{"_id": "636767871a6d9265ec01846d", "generate_results": ["public static void createConfigurationDirectory(){\n    File configDir = new File(System.getProperty(\"user.home\"), \"lf5\");\n    if (!configDir.exists()) {\n        configDir.mkdirs();\n    }\n}"]}
{"_id": "636766f81a6d9265ec01775b", "generate_results": ["public long readLong(final int offset){\n    return ((long)(readByte(offset)) << 56) |\n           ((long)(readByte(offset + 1)) << 48) |\n           ((long)(readByte(offset + 2)) << 40) |\n           ((long)(readByte(offset + 3)) << 32) |\n           ((long)(readByte(offset + 4)) << 24) |\n           ((long)(readByte(offset + 5)) << 16) |\n           ((long)(readByte(offset + 6)) << 8) |\n           (readByte(offset + 7));\n}"]}
{"_id": "636767a51a6d9265ec01859d", "generate_results": ["public boolean equals(final byte[] data,int offset,final int len){\n    if (len != size()){\n        return false;\n    }\n    for (int i = 0; i < len; i++){\n        if (byteAt(offset + i) != data[i]){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "6367670b1a6d9265ec0179ff", "generate_results": ["public static Byte[] nullToEmpty(final Byte[] array){\n    if(ArrayUtils.isEmpty(array)){\n        return EMPTY_BYTE_OBJECT_ARRAY;\n    }\n    return array;\n}"]}
{"_id": "6367677f1a6d9265ec018347", "generate_results": ["public synchronized void send(final String message){\n    final Iterator iter = connections.iterator();\n    while(iter.hasNext()){\n        final Socket socket = (Socket)iter.next();\n        if(socket.isConnected()){\n            try{\n                final PrintWriter writer = (PrintWriter)writers.get(connections.indexOf(socket));\n                if(writer != null){\n                    writer.println(message);\n                    writer.flush();\n                }\n            }\n            catch(final IOException e){\n                LogLog.error(\"Failed to send message to \" + socket, e);\n            }\n        }\n        else{\n            iter.remove();\n        }\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179e8", "generate_results": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n    return array == null || array.length == 0 ? EMPTY_BOOLEAN_OBJECT_ARRAY : array;\n}"]}
{"_id": "6367677f1a6d9265ec01834b", "generate_results": ["public void put(LoggingEvent o){\n    if(numElements >= maxSize){\n        if(first == 0){\n            resize(maxSize*2);\n        }else{\n            resize(maxSize*2);\n            for(int i=0;i<first;i++){\n                buf[i+maxSize] = buf[i];\n            }\n            first = first + maxSize;\n        }\n    }\n    buf[(first+numElements)%maxSize] = o;\n    numElements++;\n}"]}
{"_id": "636767df1a6d9265ec018744", "generate_results": ["protected List<TimeRange> buildTimeRanges(long start,long end){\n    if(end-start<=FETCH_DATA_DURATION){\n        return Collections.singletonList(new TimeRange(start,end));\n    }\n    List<TimeRange> timeRanges=new ArrayList<>();\n    long currentStart=start;\n    while(currentStart+FETCH_DATA_DURATION<=end){\n        timeRanges.add(new TimeRange(currentStart,currentStart+FETCH_DATA_DURATION));\n        currentStart+=FETCH_DATA_DURATION;\n    }\n    if(currentStart<end){\n        timeRanges.add(new TimeRange(currentStart,end));\n    }\n    return timeRanges;\n}"]}
{"_id": "636767031a6d9265ec0178e6", "generate_results": ["public static byte[] toPrimitive(final Byte[] array){\n    if(array == null){\n        return null;\n    }\n    final byte[] result = new byte[array.length];\n    for(int i = 0 ; i < array.length ; i++){\n        result[i] = array[i];\n    }\n    return result;\n}"]}
{"_id": "636767dc1a6d9265ec0186be", "generate_results": ["static long compressTimeBucket(long timeBucket,int dayStep){\n    if(dayStep == 0){\n        return timeBucket;\n    }\n    DateTime dateTime = new DateTime(timeBucket * Const.UNIT_HOUR);\n    int dayOfWeek = dateTime.getDayOfWeek();\n    int dayOfMonth = dateTime.getDayOfMonth();\n    int dayOfYear = dateTime.getDayOfYear();\n    int monthOfYear = dateTime.getMonthOfYear();\n    int year = dateTime.getYear();\n    if(dayOfMonth % dayStep == 0){\n        dateTime = dateTime.withDayOfMonth(dayOfMonth / dayStep * dayStep);\n    }else{\n        dateTime = dateTime.withDayOfMonth((dayOfMonth / dayStep + 1) * dayStep);\n    }\n    if(dayOfYear % dayStep == 0){\n        dateTime = dateTime.withDayOfYear(dayOfYear / dayStep * dayStep);\n    }else{\n        dateTime = dateTime.withDayOfYear((dayOfYear / dayStep + 1) * dayStep);\n    }\n    if(dayOfWeek % dayStep == 0){\n        dateTime = dateTime.withDayOfWeek(dayOfWeek / dayStep * dayStep);\n    }else{\n        dateTime = dateTime.withDayOfWeek((dayOfWeek / dayStep + 1) * dayStep);\n    }\n    if(monthOfYear % dayStep == 0){\n        dateTime = dateTime.withMonthOfYear(monthOfYear / dayStep * dayStep);\n    }else{\n        dateTime = dateTime.withMonthOfYear((monthOfYear / dayStep + 1) * dayStep);\n    }\n    if(year % dayStep == 0){\n        dateTime = dateTime.withYear(year / dayStep * dayStep);\n    }else{\n        dateTime = dateTime.withYear((year / dayStep + 1) * dayStep);\n    }\n    return dateTime.getMillis() / Const.UNIT_HOUR;\n}"]}
{"_id": "636767a41a6d9265ec01856c", "generate_results": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    if (str == null) {\n        throw new IllegalArgumentException(\"str == null\");\n    }\n    if (index < 0 || len < 0 || index + len > str.length()) {\n        throw new IndexOutOfBoundsException();\n    }\n    int size = 0;\n    int end = index + len;\n    for (int i = index; i < end; i++) {\n        char ch = str.charAt(i);\n        if (ch <= 0x7F) {\n            size++;\n        } else if (ch <= 0x7FF) {\n            size += 2;\n        } else if (Character.isHighSurrogate(ch) && i + 1 < end && Character.isLowSurrogate(str.charAt(i + 1))) {\n            size += 4;\n            i++;\n        } else {\n            size += 3;\n        }\n    }\n    return size;\n}"]}
{"_id": "636766f01a6d9265ec017639", "generate_results": ["public static <T>List<T> asList(T[] a){\n  return a==null?Collections.<T>emptyList():Arrays.asList(a);\n}"]}
{"_id": "6367672d1a6d9265ec017c74", "generate_results": ["public boolean remove(int val){\n    if(!map.containsKey(val))\n        return false;\n    int index = map.get(val);\n    int lastElement = values.get(values.size()-1);\n    values.set(index,lastElement);\n    map.put(lastElement,index);\n    values.remove(values.size()-1);\n    map.remove(val);\n    return true;\n}"]}
{"_id": "6367676b1a6d9265ec0181df", "generate_results": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n    if(str==null || prefix==null){\n        return (str==null && prefix==null);\n    }\n    if(prefix.length()>str.length()){\n        return false;\n    }\n    String lcStr = str.substring(0,prefix.length()).toLowerCase();\n    String lcPrefix = prefix.toLowerCase();\n    return lcStr.equals(lcPrefix);\n}"]}
{"_id": "6367674b1a6d9265ec017dc0", "generate_results": ["private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<V>();\n    for (Edge<V, E> edge : graph.edgeSet()) {\n        if (edge.getWeight() <= epsilon) {\n            visibleVertices.add(edge.getSource());\n            visibleVertices.add(edge.getTarget());\n        }\n    }\n    return visibleVertices;\n}"]}
{"_id": "636767001a6d9265ec017873", "generate_results": ["public static String reverse(final String str){\n    if(str == null){\n        return null;\n    }\n    return new StringBuilder(str).reverse().toString();\n}"]}
{"_id": "636766ff1a6d9265ec01783b", "generate_results": ["public static String sub(String str,int start,int end){\n    if(str == null){\n        return null;\n    }\n    if(start < 0){\n        start = 0;\n    }\n    if(end > str.length()){\n        end = str.length();\n    }\n    if(start > end){\n        return \"\";\n    }\n    return str.substring(start,end);\n}"]}
{"_id": "6367671a1a6d9265ec017c15", "generate_results": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if ((byteOffset < 0) || (byteLength < 0) || ((byteOffset + byteLength) > byteArrayValue.length)) {\n        throw new IllegalArgumentException(\"Invalid offset or length\");\n    }\n    enlarge(byteLength);\n    System.arraycopy(byteArrayValue,byteOffset,data,length - byteLength,byteLength);\n    return this;\n}"]}
{"_id": "636766821a6d9265ec0174d2", "generate_results": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequestImpl(new Builder().request(request));\n}"]}
{"_id": "636767ab1a6d9265ec01867b", "generate_results": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    if(str==null){\n        lb.putInt(0);\n        return lb;\n    }\n    final int len=str.length();\n    if(len==0){\n        lb.putInt(0);\n        return lb;\n    }\n    final int size=computeUTF8Size(str,0,len);\n    if(size<0){\n        throw new IllegalArgumentException(\"Invalid UTF-8 sequence\");\n    }\n    lb.putInt(size);\n    writeUTF8(str,0,len,session,lb);\n    return lb;\n}"]}
{"_id": "6367675c1a6d9265ec01805b", "generate_results": ["public void removeFromTreeEdgeList(){\n    if(prev != null){\n        prev.next = next;\n    }\n    if(next != null){\n        next.prev = prev;\n    }\n    prev = null;\n    next = null;\n}"]}
{"_id": "636767791a6d9265ec01826d", "generate_results": ["public static String findAndSubst(String key,Properties props){\n    String val=props.getProperty(key);\n    if(val==null){\n        return key;\n    }\n    try{\n        return substVars(val,props);\n    }catch(Exception e){\n        return val;\n    }\n}"]}
{"_id": "636767001a6d9265ec01787f", "generate_results": ["protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    if (array == null) {\n        appendNullText(buffer, fieldName);\n        return;\n    }\n    appendSummary(buffer, fieldName, array);\n    if (!isArrayContentDetail()) {\n        return;\n    }\n    appendArrayStart(buffer);\n    for (int i = 0; i < array.length; i++) {\n        if (i > 0) {\n            buffer.append(getArraySeparator());\n        }\n        append(buffer, null, array[i], Boolean.FALSE);\n    }\n    appendArrayEnd(buffer);\n}"]}
{"_id": "636766fe1a6d9265ec017834", "generate_results": ["public static String sessionId(){\n    HttpSession session = Invoker.getRequest().getSession();\n    return session.getId();\n}"]}
{"_id": "636766ff1a6d9265ec01784b", "generate_results": ["public static boolean isDigits(String str){\n    if(str == null || str.length() == 0){\n        return false;\n    }\n    for(int i = 0; i < str.length(); i++){\n        if(!Character.isDigit(str.charAt(i))){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636766fc1a6d9265ec0177da", "generate_results": ["private static boolean isParameterSeparator(final char c){\n    if(c == ',' || c == ';' || c == ':' || c == '=' || c == '<' || c == '>' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}'){\n        return true;\n    }\n    return false;\n}"]}
{"_id": "6367670c1a6d9265ec017a35", "generate_results": ["private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n    if(str == null || suffix == null){\n        return (str == null && suffix == null);\n    }\n    if(suffix.length() > str.length()){\n        return false;\n    }\n    if(ignoreCase){\n        return str.regionMatches(true,str.length() - suffix.length(),suffix,0,suffix.length());\n    }else{\n        return str.endsWith(suffix);\n    }\n}"]}
{"_id": "6367667f1a6d9265ec01745d", "generate_results": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    return decodePath(u.getRawPath(),decode);\n}"]}
{"_id": "636766f11a6d9265ec017651", "generate_results": ["public static Character[] nullToEmpty(final Character[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }else{\n        return array;\n    }\n}"]}
{"_id": "636767821a6d9265ec0183ab", "generate_results": ["public boolean hasThrown(){\n    if(_thrown != null){\n        return true;\n    }\n    return false;\n}"]}
{"_id": "636767831a6d9265ec0183c9", "generate_results": ["public static String peek(){\n    if(getDepth() == 0){\n        return null;\n    }\n    return (String)stack.elementAt(getDepth()-1);\n}"]}
{"_id": "636767de1a6d9265ec01871c", "generate_results": ["public void valueAccumulation(String key,Long value){\n    if(this.data.containsKey(key)){\n        this.data.put(key,this.data.get(key)+value);\n    }else{\n        this.data.put(key,value);\n    }\n}"]}
{"_id": "636766811a6d9265ec017496", "generate_results": ["public InputStream next() throws IOException {\n    if (stack == null) {\n        stack = new LinkedList<InputStream>();\n        current = filesOrDirectories;\n        rootCount = 1;\n    }\n    if (current != null) {\n        stack.push(current);\n    }\n    if (stack.isEmpty()) {\n        return null;\n    }\n    current = stack.pop();\n    if (current.hasNext()) {\n        InputStream next = current.next();\n        if (next != null) {\n            stack.push(current);\n            if (rootCount > 0) {\n                rootCount--;\n            } else {\n                current = null;\n            }\n            current = next;\n        }\n    }\n    if (current != null && current.hasNext()) {\n        return current;\n    } else {\n        return next();\n    }\n}"]}
{"_id": "6367677e1a6d9265ec01832e", "generate_results": ["public Logger exists(String name){\n    if(name == null){\n        return null;\n    }\n    Logger logger = (Logger) ht.get(name);\n    if(logger != null){\n        return logger;\n    }\n    return null;\n}"]}
{"_id": "6367670a1a6d9265ec0179e7", "generate_results": ["public Converter lookup(final Class<?> clazz){\n    if (clazz == null) {\n        return null;\n    }\n    if (converters == null) {\n        return null;\n    }\n    Converter converter = converters.get(clazz);\n    if (converter != null) {\n        return converter;\n    }\n    return null;\n}"]}
{"_id": "636767a41a6d9265ec018572", "generate_results": ["public long readRawVarint64() throws IOException {\n    long result = 0;\n    int shift = 0;\n    byte b;\n    do {\n        b = readRawByte();\n        result |= (b & 0x7F) << shift;\n        shift += 7;\n    } while ((b & 0x80) != 0);\n    return result;\n}"]}
{"_id": "636767021a6d9265ec0178bb", "generate_results": ["public static Double[] nullToEmpty(final Double[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\n    }\n    return array;\n}"]}
{"_id": "636767021a6d9265ec0178b2", "generate_results": ["private void pop(final String descriptor){\n    if(descriptor.length()==0){\n        return;\n    }\n    char c = descriptor.charAt(0);\n    switch(c){\n        case 'V':\n        case 'Z':\n            pop();\n            break;\n        case 'B':\n        case 'C':\n        case 'S':\n        case 'I':\n            pop(1);\n            break;\n        case 'J':\n            pop(2);\n            break;\n        case 'F':\n            pop(4);\n            break;\n        case 'D':\n            pop(8);\n            break;\n        case 'L':\n            int end = descriptor.indexOf(';',1);\n            if(end == -1){\n                throw new RuntimeException(\"Invalid descriptor: \"+descriptor);\n            }\n            pop(end-1);\n            break;\n        case '[':\n            pop(getAbstractTypeFromDescriptor(symbolTable,descriptor,1));\n            break;\n        default:\n            throw new RuntimeException(\"Invalid descriptor: \"+descriptor);\n    }\n}"]}
{"_id": "636766f91a6d9265ec01776e", "generate_results": ["@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    if (len <= 0) {\n        return;\n    }\n    if (len >= buf.length) {\n        write(b, off, len);\n    } else {\n        System.arraycopy(b, off, buf, 0, len);\n        count += len;\n        if (count >= buf.length) {\n            drainCharBuffer();\n        }\n    }\n}"]}
{"_id": "636767551a6d9265ec017f3f", "generate_results": ["public static final <V>void swap(V[] arr,int i,int j){\n    V temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}"]}
{"_id": "636766ae1a6d9265ec0175dc", "generate_results": ["public Boolean isPartialContentResponse(){\n    if(drc.getResponse().getStatus() == HttpServletResponse.SC_PARTIAL_CONTENT){\n        return true;\n    }\n    return false;\n}"]}
{"_id": "636766f01a6d9265ec01762e", "generate_results": ["public static boolean isEmpty(final double[] array){\n    return array == null || array.length == 0;\n}"]}
{"_id": "6367667e1a6d9265ec01743a", "generate_results": ["public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == -1){\n        return -1;\n    }else{\n        return System.currentTimeMillis();\n    }\n}"]}
{"_id": "636767601a6d9265ec0180fd", "generate_results": ["protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    if(touchingVerticesToEdgeMap.containsKey(new Pair(sourceVertex,targetVertex))){\n        touchingVerticesToEdgeMap.get(new Pair(sourceVertex,targetVertex)).add(e);\n    }else{\n        Set<E> newSet=new HashSet<E>();\n        newSet.add(e);\n        touchingVerticesToEdgeMap.put(new Pair(sourceVertex,targetVertex),newSet);\n    }\n}"]}
{"_id": "636766821a6d9265ec0174c9", "generate_results": ["private static File[] classPath(){\n    String classPath = System.getProperty(\"java.class.path\");\n    String[] classPathArray = classPath.split(File.pathSeparator);\n    File[] files = new File[classPathArray.length];\n    for (int i = 0; i < classPathArray.length; i++) {\n        files[i] = new File(classPathArray[i]);\n    }\n    return files;\n}"]}
{"_id": "636767041a6d9265ec0178f8", "generate_results": ["private static String[] copyStrings(final String[] src){\n    if(src == null){\n        return null;\n    }\n    String[] dest = new String[src.length];\n    for(int i = 0; i < src.length; i++){\n        dest[i] = src[i].toLowerCase();\n    }\n    return dest;\n}"]}
{"_id": "636767521a6d9265ec017ecc", "generate_results": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    double midPoint = box.getMinX() + (box.getMaxX() - box.getMinX()) / 2;\n    Box2D leftBox = new Box2D(box.getMinX(), midPoint, box.getMinY(), box.getMaxY());\n    Box2D rightBox = new Box2D(midPoint, box.getMaxX(), box.getMinY(), box.getMaxY());\n    return new Pair<Box2D,Box2D>(leftBox, rightBox);\n}"]}
{"_id": "636766a91a6d9265ec0175c1", "generate_results": ["private void enlarge(final int size){\n    if(data.length<size){\n        byte[] newData=new byte[size];\n        System.arraycopy(data,0,newData,0,length);\n        data=newData;\n    }\n}"]}
{"_id": "636767781a6d9265ec018238", "generate_results": ["public boolean isAttached(Appender appender){\n    if(appenderList == null){\n        return false;\n    }\n    Enumeration enumeration = appenderList.elements();\n    while(enumeration.hasMoreElements()){\n        if(enumeration.nextElement() == appender){\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "6367674a1a6d9265ec017dab", "generate_results": ["@Override public int compare(Double o1,Double o2){\n    if(Math.abs(o1-o2)<epsilon){\n        return 0;\n    }\n    return Double.compare(o1,o2);\n}"]}
{"_id": "6367672d1a6d9265ec017c78", "generate_results": ["public boolean insert(int val){\n    if(map.containsKey(val)){\n        return false;\n    }\n    map.put(val,val);\n    values.add(val);\n    return true;\n}"]}
{"_id": "636767dc1a6d9265ec0186c6", "generate_results": ["private boolean containsAllFields(Fields fields){\n    return fields.getFields().entrySet().stream()\n            .allMatch(e -> properties.containsKey(e.getKey()) && Objects.equals(properties.get(e.getKey()), e.getValue()));\n}"]}
{"_id": "636766821a6d9265ec0174bf", "generate_results": ["public static String capitalize(String name){\n    if(name == null || name.length() == 0){\n        return name;\n    }\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}"]}
{"_id": "636767aa1a6d9265ec01865a", "generate_results": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    if (node == null) {\n        return 0;\n    }\n    int total = 0;\n    LinkedBuffer current = node;\n    while (current != null) {\n        out.write(current.buffer, current.start, current.offset - current.start);\n        total += current.offset - current.start;\n        current = current.next;\n    }\n    return total;\n}"]}
{"_id": "636766f21a6d9265ec017677", "generate_results": ["public static boolean isNotTrue(Boolean bool){\n    return !isTrue(bool);\n}"]}
{"_id": "6367674f1a6d9265ec017e74", "generate_results": ["public String toString(){\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    for (int i = 0; i < size; i++) {\n        sb.append(vs[i]);\n        if (i < size - 1) {\n            sb.append(\", \");\n        }\n    }\n    sb.append(']');\n    return sb.toString();\n}"]}
{"_id": "6367675c1a6d9265ec018058", "generate_results": ["@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n  return () -> String.valueOf(start++);\n}"]}
{"_id": "6367677b1a6d9265ec0182bd", "generate_results": ["public String format(final LoggingEvent event){\n    if(this.conversionPattern==null){\n        return null;\n    }\n    final StringBuilder sbuf=new StringBuilder(BUF_SIZE);\n    try{\n        BridgePatternConverter.convert(sbuf,event,head);\n    }catch(Exception ex){\n        if(this.ignoresThrowable()){\n            return sbuf.toString();\n        }\n        if(this.handlesExceptions){\n            sbuf.append(\" [error rendering pattern]\");\n        }else{\n            throw new PatternLayoutException(\"ERROR\",ex);\n        }\n    }\n    return sbuf.toString();\n}"]}
{"_id": "636766ff1a6d9265ec017842", "generate_results": ["public static double[] toPrimitive(final Double[] array){\n    if (ArrayUtils.isEmpty(array)){\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] result = new double[array.length];\n    for (int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}"]}
{"_id": "636766fa1a6d9265ec0177a9", "generate_results": ["private void addInitializedType(final int abstractType){\n    if(initializationCount == initializations.length){\n        final int[] newInitializations = new int[initializationCount * 2];\n        System.arraycopy(initializations, 0, newInitializations, 0, initializationCount);\n        initializations = newInitializations;\n    }\n    initializations[initializationCount++] = abstractType;\n}"]}
{"_id": "6367670a1a6d9265ec0179dc", "generate_results": ["private void putAbstractTypes(final int start,final int end){\n    if(start<=end){\n        for(int i=start;i<=end;i++){\n            currentFrame[i]=Frame.ABSTRACT_TYPE;\n        }\n    }\n}"]}
{"_id": "636766801a6d9265ec017482", "generate_results": ["public void readFrom(final InputStream in) throws IOException {\n    if (in == null) {\n        throw new NullPointerException(\"InputStream is null\");\n    }\n    if (in instanceof DataInput) {\n        DataInput din = (DataInput) in;\n        buffer = new byte[initialCapacity];\n        pointer = 0;\n        size = din.read(buffer);\n    } else {\n        throw new IllegalArgumentException(\"InputStream is not a DataInput\");\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179d8", "generate_results": ["@Override public void write(final byte[] b) throws IOException {\n    if (writer != null) {\n        writer.write(new String(b, encoding));\n    } else {\n        super.write(b);\n    }\n}"]}
{"_id": "636766a81a6d9265ec01757b", "generate_results": ["@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    if (features == null || features.length == 0) {\n        return toString();\n    }\n    JSONWriter writer = new JSONWriter(features);\n    writer.write(this);\n    return writer.toString();\n}"]}
{"_id": "636767021a6d9265ec0178bf", "generate_results": ["@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n    if (value == null) {\n        return null;\n    }\n    if (value instanceof String) {\n        String strValue = (String) value;\n        if (strValue.length() == 0) {\n            return BeanUtils.getDefaultValue(type);\n        } else {\n            return strValue.charAt(0);\n        }\n    }\n    if (value instanceof Character) {\n        return value;\n    }\n    if (value instanceof Number) {\n        return Character.valueOf(((Number) value).charValue());\n    }\n    if (value instanceof Boolean) {\n        return ((Boolean) value) ? '1' : '0';\n    }\n    if (value instanceof Date) {\n        return Character.valueOf(String.valueOf(((Date) value).getTime()).charAt(0));\n    }\n    if (value instanceof BigDecimal) {\n        return Character.valueOf(String.valueOf(((BigDecimal) value).toBigInteger()).charAt(0));\n    }\n    if (value instanceof BigInteger) {\n        return Character.valueOf(String.valueOf((BigInteger) value).charAt(0));\n    }\n    if (value instanceof byte[]) {\n        byte[] bytes = (byte[]) value;\n        if (bytes.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) bytes[0]);\n    }\n    if (value instanceof char[]) {\n        char[] chars = (char[]) value;\n        if (chars.length == 0) {\n            return null;\n        }\n        return chars[0];\n    }\n    if (value instanceof short[]) {\n        short[] shorts = (short[]) value;\n        if (shorts.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) shorts[0]);\n    }\n    if (value instanceof int[]) {\n        int[] ints = (int[]) value;\n        if (ints.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) ints[0]);\n    }\n    if (value instanceof long[]) {\n        long[] longs = (long[]) value;\n        if (longs.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) longs[0]);\n    }\n    if (value instanceof float[]) {\n        float[] floats = (float[]) value;\n        if (floats.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) floats[0]);\n    }\n    if (value instanceof double[]) {\n        double[] doubles = (double[]) value;\n        if (doubles.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) doubles[0]);\n    }\n    if (value instanceof boolean[]) {\n        boolean[] booleans = (boolean[]) value;\n        if (booleans.length == 0) {\n            return null;\n        }\n        return Character.valueOf((char) (booleans[0] ? 1 : 0));\n    }\n    if (value instanceof Object[]) {\n        Object[] objects = (Object[]) value;\n        if (objects.length == 0) {\n            return null;\n        }\n        return convertToType(type, objects[0]);\n    }\n    if (value instanceof char[]) {\n        char[] chars = (char[]) value;\n        if (chars.length == 0) {\n            return null;\n        }\n        return chars[0];\n    }\n    if (value instanceof String[]) {\n        String[] strings = (String[]) value;\n        if (strings.length == 0) {\n            return null;\n        }\n        return convertToType(type, strings[0]);\n    }\n    if (value instanceof Number[]) {\n        Number[] numbers = (Number[]) value;\n        if (numbers.length == 0) {\n            return null;\n        }\n        return convertToType(type, numbers[0]);\n    }\n    if (value instanceof Date[]) {\n        Date[] dates = (Date[]) value;\n        if (dates.length == 0) {\n            return null;"]}
{"_id": "6367670b1a6d9265ec017a0f", "generate_results": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    if(isEmpty(str) || searchStrArray == null || searchStrArray.size() == 0){\n        return false;\n    }\n    for(String searchStr : searchStrArray){\n        if(containsIgnoreCase(str,searchStr)){\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "636766a81a6d9265ec01758e", "generate_results": ["public static int nextPrime(int desiredCapacity){\n    if (desiredCapacity < 0) {\n        throw new IllegalArgumentException(\"Desired capacity must be positive\");\n    }\n    if (desiredCapacity < 2) {\n        return 2;\n    }\n    int prime = desiredCapacity;\n    boolean notPrime;\n    do {\n        notPrime = false;\n        for (int i = 2, max = (int) Math.sqrt(prime); i <= max; i++) {\n            if (prime % i == 0) {\n                notPrime = true;\n                break;\n            }\n        }\n        if (notPrime) {\n            prime++;\n        }\n    } while (notPrime);\n    return prime;\n}"]}
{"_id": "6367670a1a6d9265ec0179cf", "generate_results": ["public static char toChar(final Character ch,final char defaultValue){\n    if(ch==null){\n        return defaultValue;\n    }\n    return ch.charValue();\n}"]}
{"_id": "6367676b1a6d9265ec0181e2", "generate_results": ["public static Object findFirstMatch(Collection source,Collection candidates){\n    if(source==null||candidates==null){\n        return null;\n    }\n    for(Iterator iterator=candidates.iterator();iterator.hasNext();){\n        Object candidate=iterator.next();\n        if(source.contains(candidate)){\n            return candidate;\n        }\n    }\n    return null;\n}"]}
{"_id": "6367676b1a6d9265ec0181ee", "generate_results": ["public static String trimTrailingWhitespace(String str){\n    if (!hasLength(str)) {\n        return str;\n    }\n    int endIndex = str.length();\n    while (endIndex > 0 && Character.isWhitespace(str.charAt(endIndex - 1))) {\n        endIndex--;\n    }\n    return str.substring(0, endIndex);\n}"]}
{"_id": "636767dc1a6d9265ec0186cb", "generate_results": ["public void init(){\n    analyzeResultDist = \"analyzeResultDist\";\n    File file = new File(analyzeResultDist);\n    if(!file.exists()){\n        file.mkdir();\n    }\n}"]}
{"_id": "636767a31a6d9265ec018552", "generate_results": ["@Override public String readString() throws IOException {\n    int size = readRawVarint32();\n    byte[] bytes = new byte[size];\n    input.readFully(bytes);\n    return new String(bytes, StandardCharsets.UTF_8);\n}"]}
{"_id": "636767a61a6d9265ec0185b7", "generate_results": ["private static int digitValue(final char c){\n    if(c >= '0' && c <= '9'){\n        return c - '0';\n    }\n    if(c >= 'A' && c <= 'F'){\n        return c - 'A' + 10;\n    }\n    if(c >= 'a' && c <= 'f'){\n        return c - 'a' + 10;\n    }\n    throw new IllegalArgumentException(\"Invalid hexadecimal character: \" + c);\n}"]}
{"_id": "636767e01a6d9265ec018755", "generate_results": ["private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    content.put(\"msg_type\", \"text\");\n    content.put(\"content\", jsonObject.get(\"content\").getAsString());\n    return content;\n}"]}
{"_id": "6367667f1a6d9265ec017458", "generate_results": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    if(atmosphereHandlers.containsKey(mapping)){\n        atmosphereHandlers.remove(mapping);\n    }\n    return this;\n}"]}
{"_id": "636767a21a6d9265ec018517", "generate_results": ["public final byte[] toByteArray(){\n    byte[] bytes=new byte[size];\n    LinkedBuffer current=head;\n    int pos=0;\n    while(current != null){\n        System.arraycopy(current.buffer,0,bytes,pos,current.size);\n        pos += current.size;\n        current = current.next;\n    }\n    return bytes;\n}"]}
{"_id": "6367667d1a6d9265ec017401", "generate_results": ["public static String unescapeJava(String str) throws Exception {\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    StringBuilder result = new StringBuilder();\n    boolean escaped = false;\n    for (int i = 0, len = str.length(); i < len; i++) {\n        char c = str.charAt(i);\n        if (c == '\\\\' && !escaped) {\n            escaped = true;\n        } else {\n            if (escaped) {\n                switch (c) {\n                    case 't':\n                        result.append('\\t');\n                        break;\n                    case 'n':\n                        result.append('\\n');\n                        break;\n                    case 'r':\n                        result.append('\\r');\n                        break;\n                    case 'f':\n                        result.append('\\f');\n                        break;\n                    case '\\\"':\n                        result.append('\\\"');\n                        break;\n                    case '\\'':\n                        result.append('\\'');\n                        break;\n                    case '\\\\':\n                        result.append('\\\\');\n                        break;\n                    default:\n                        throw new Exception(\"Invalid escape character '\" + c + \"'\");\n                }\n                escaped = false;\n            } else {\n                result.append(c);\n            }\n        }\n    }\n    if (escaped) {\n        throw new Exception(\"Incomplete escape sequence\");\n    }\n    return result.toString();\n}"]}
{"_id": "636766f01a6d9265ec01763e", "generate_results": ["private static String javaCharset(String charset){\n    if(charset == null){\n        return US_ASCII_CHARSET;\n    }\n    if(MIME2JAVA.containsKey(charset.toUpperCase(Locale.US))){\n        return MIME2JAVA.get(charset.toUpperCase(Locale.US));\n    }\n    return charset;\n}"]}
{"_id": "6367676a1a6d9265ec0181bf", "generate_results": ["public static Object quoteIfString(Object obj){\n    if(obj instanceof String){\n        return quote((String)obj);\n    }\n    return obj;\n}"]}
{"_id": "636767501a6d9265ec017e86", "generate_results": ["@Override public ListNode<E> previousNode(){\n    if (prev == this) {\n        throw new NoSuchElementException();\n    }\n    return prev;\n}"]}
{"_id": "636766f21a6d9265ec017667", "generate_results": ["public short readShort(final int offset){\n    return (short)((classFileBuffer[offset] << 8) + (classFileBuffer[offset + 1] & 0xFF));\n}"]}
{"_id": "636767031a6d9265ec0178ef", "generate_results": ["private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    if (array == null){\n        throw new IllegalArgumentException(\"Array cannot be null\");\n    }\n    int arrayLength = Array.getLength(array);\n    if (arrayLength == 0){\n        throw new IllegalArgumentException(\"Array cannot be empty\");\n    }\n    Object newArray = Array.newInstance(newArrayComponentType, arrayLength + 1);\n    System.arraycopy(array, 0, newArray, 0, arrayLength);\n    return newArray;\n}"]}
{"_id": "636767431a6d9265ec017c8d", "generate_results": ["private int computeBinaryLog(int n){\n    if(n <= 0){\n        return 0;\n    }\n    return 1 + computeBinaryLog(n / 2);\n}"]}
{"_id": "636767611a6d9265ec018116", "generate_results": ["private Set<V> intersection(Set<V> set1,Set<V> set2){\n    return set1.stream().filter(set2::contains).collect(Collectors.toSet());\n}"]}
{"_id": "636766f71a6d9265ec017730", "generate_results": ["static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return ArrayUtils.EMPTY_STRING_ARRAY;\n    }\n    return collection.toArray(new String[0]);\n}"]}
{"_id": "636767081a6d9265ec0179a2", "generate_results": ["private static boolean isAllZeros(String s){\n    if(s == null || s.length() == 0){\n        return false;\n    }\n    for(int i = 0; i < s.length(); i++){\n        if(s.charAt(i) != '0'){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636766821a6d9265ec0174b3", "generate_results": ["protected Object filter(Object msg){\n    if(msg == null || msg == BroadcastAction.ABORT){\n        return null;\n    }\n    return msg;\n}"]}
{"_id": "636767e01a6d9265ec018764", "generate_results": ["private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    JsonObject jsonObject = new JsonObject();\n    if(CollectionUtils.isNotEmpty(properties)){\n        for(KeyStringValuePair pair : properties){\n            jsonObject.addProperty(pair.getKey(), pair.getValue());\n        }\n    }\n    return jsonObject;\n}"]}
{"_id": "6367677e1a6d9265ec018314", "generate_results": ["protected int removeUnusedNodes(){\n    int removedNodes = 0;\n    Enumeration e = _categoryModel.getRoot().breadthFirstEnumeration();\n    while(e.hasMoreElements()){\n        CategoryNode node = (CategoryNode)e.nextElement();\n        if(!node.isActive()){\n            TreePath path = _tree.getPathForRow(node.getRow());\n            if(path != null){\n                _tree.removeRow(path.getPathCount()-1);\n                removedNodes++;\n            }\n        }\n    }\n    return removedNodes;\n}"]}
{"_id": "636766ff1a6d9265ec017853", "generate_results": ["protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n    if (bytecodeOffset >= labels.length){\n        throw new ArrayIndexOutOfBoundsException(\"bytecodeOffset >= labels.length\");\n    }\n    Label label = labels[bytecodeOffset];\n    if (label == null){\n        label = new Label();\n        labels[bytecodeOffset] = label;\n    }\n    return label;\n}"]}
{"_id": "6367677d1a6d9265ec0182fd", "generate_results": ["public static boolean toBoolean(String value,boolean dEfault){\n    if(value==null){\n        return dEfault;\n    }\n    value=value.trim();\n    if(value.equalsIgnoreCase(\"true\")){\n        return true;\n    }\n    if(value.equalsIgnoreCase(\"false\")){\n        return false;\n    }\n    return dEfault;\n}"]}
{"_id": "6367676a1a6d9265ec0181cd", "generate_results": ["public static String trimLeadingWhitespace(String str){\n    if(!hasLength(str)){\n        return str;\n    }\n    StringBuilder sb = new StringBuilder(str);\n    while(sb.length()>0 && Character.isWhitespace(sb.charAt(0))){\n        sb.deleteCharAt(0);\n    }\n    return sb.toString();\n}"]}
{"_id": "636766fe1a6d9265ec01782a", "generate_results": ["final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    final int utfOffset = cpInfoOffsets[constantPoolEntryIndex] - 1;\n    final int utfLength = ((int)classFileBuffer[utfOffset] & 0xff) << 8 | ((int)classFileBuffer[utfOffset + 1] & 0xff);\n    return readUtf(utfOffset, utfLength, charBuffer);\n}"]}
{"_id": "636766851a6d9265ec01751b", "generate_results": ["private static char decodeHexNibble(final char c){\n    if (c >= '0' && c <= '9') {\n        return (char)(c - '0');\n    }\n    if (c >= 'A' && c <= 'F') {\n        return (char)(c - 'A' + 10);\n    }\n    if (c >= 'a' && c <= 'f') {\n        return (char)(c - 'a' + 10);\n    }\n    throw new IllegalArgumentException(\"Invalid hexadecimal character: \" + c);\n}"]}
{"_id": "636766f21a6d9265ec01767d", "generate_results": ["public static String toString(Object object){\n    if(object==null){\n        return null;\n    }\n    return object.toString();\n}"]}
{"_id": "636767581a6d9265ec017fc4", "generate_results": ["public static long factorial(int n){\n    if(n==0){\n        return 1;\n    }\n    else{\n        return n*factorial(n-1);\n    }\n}"]}
{"_id": "636767511a6d9265ec017eb6", "generate_results": ["private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    Node current = start;\n    Node prev = null;\n    while(current != stop){\n        if(predicate.test(current)){\n            return new OuterFaceCirculator(current,prev);\n        }\n        prev = current;\n        current = current.getNextOnOuterFace(prev);\n    }\n    return null;\n}"]}
{"_id": "636767841a6d9265ec0183e8", "generate_results": ["public void add(LoggingEvent event){\n    if(numElems == maxSize){\n        if(first == 0){\n            resize(maxSize * 2);\n        }else{\n            int numToMove = maxSize - first;\n            System.arraycopy(ea, first, ea, 0, numToMove);\n            first = 0;\n            last = numToMove;\n            resize(maxSize * 2);\n        }\n    }\n    ea[last] = event;\n    last = (last + 1) % maxSize;\n    if(numElems < maxSize){\n        numElems++;\n    }\n}"]}
{"_id": "636767a41a6d9265ec01857e", "generate_results": ["private static int compareSigned(long a,long b){\n    if(a<b){\n        return -1;\n    }else if(a>b){\n        return 1;\n    }else{\n        return 0;\n    }\n}"]}
{"_id": "636767691a6d9265ec0181ae", "generate_results": ["public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = new ArrayList<String>();\n    while(enumeration.hasMoreElements()){\n        list.add(enumeration.nextElement());\n    }\n    return list.toArray(new String[0]);\n}"]}
{"_id": "636766a91a6d9265ec0175ae", "generate_results": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if (byteOffset < 0 || byteLength < 0 || byteOffset + byteLength > byteArrayValue.length) {\n        throw new IllegalArgumentException(\"Invalid offset or length\");\n    }\n    enlarge(byteLength);\n    System.arraycopy(byteArrayValue,byteOffset,data,length - byteLength,byteLength);\n    return this;\n}"]}
{"_id": "636766f11a6d9265ec01764f", "generate_results": ["public Collection<Object> values(){\n    return Collections.unmodifiableCollection(map.values());\n}"]}
{"_id": "636766f81a6d9265ec017758", "generate_results": ["@Override public int hashCode(){\n  return getDescriptor().hashCode();\n}"]}
{"_id": "6367676c1a6d9265ec01820b", "generate_results": ["public static String deleteAny(String inString,String charsToDelete){\n    if (!hasLength(inString) || !hasLength(charsToDelete)) {\n        return inString;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < inString.length(); i++) {\n        char c = inString.charAt(i);\n        if (charsToDelete.indexOf(c) == -1) {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"]}
{"_id": "636766861a6d9265ec01755a", "generate_results": ["public final MatchResult match(CharSequence uri){\n    if(Objects.isNull(uri)){\n        return null;\n    }\n    Matcher matcher = regexPattern.matcher(uri);\n    if(matcher.find()){\n        return matcher.toMatchResult();\n    }\n    return null;\n}"]}
{"_id": "636766f91a6d9265ec01777d", "generate_results": ["public static byte convertHexDigit(byte b){\n    if ((b >= '0') && (b <= '9')){\n        return (byte)(b - '0');\n    }\n    if ((b >= 'A') && (b <= 'F')){\n        return (byte)(b - 'A' + 10);\n    }\n    if ((b >= 'a') && (b <= 'f')){\n        return (byte)(b - 'a' + 10);\n    }\n    throw new IllegalArgumentException(\"Invalid hexadecimal character: \" + b);\n}"]}
{"_id": "636766801a6d9265ec017477", "generate_results": ["private void addReverse(final InputStream[] files){\n    for(int i = files.length - 1; i >= 0; i--){\n        if(files[i] != null){\n            stack.push(files[i]);\n            rootCount++;\n        }\n    }\n}"]}
{"_id": "636767de1a6d9265ec01871e", "generate_results": ["private void check(String modelName) throws IllegalStateException {\n    if (keys.stream().anyMatch(Objects::isNull)) {\n        throw new IllegalStateException(\"The key of model \" + modelName + \" contains null.\");\n    }\n}"]}
{"_id": "636766f81a6d9265ec01774b", "generate_results": ["public byte readByte() throws IOException {\n    if (closed) {\n        throw new IOException(\"Stream closed\");\n    }\n    if (head == tail) {\n        if (total == 0) {\n            readBoundary();\n        }\n        if (total < 0) {\n            throw new EOFException(\"Premature end of stream\");\n        }\n        if (total == 0) {\n            throw new EOFException(\"No more data\");\n        }\n        head = 0;\n        tail = input.read(buffer);\n        if (tail < 0) {\n            throw new EOFException(\"Premature end of stream\");\n        }\n        total -= tail;\n    }\n    return buffer[head++];\n}"]}
{"_id": "636766851a6d9265ec017515", "generate_results": ["@Override public Action inspect(AtmosphereResource r){\n    if (r.getTransport() == UNDEFINED){\n        r.suspend();\n        return Action.CLOSE;\n    }\n    return Action.CONTINUE;\n}"]}
{"_id": "636767611a6d9265ec018106", "generate_results": ["public double vertexWeight(Set<V> v){\n    double weight = 0;\n    for(DefaultWeightedEdge e : workingGraph.edgesOf(v)){\n        weight += workingGraph.getEdgeWeight(e);\n    }\n    return weight;\n}"]}
{"_id": "636767841a6d9265ec0183f2", "generate_results": ["public int compare(Object aObj1,Object aObj2){\n    if(aObj1 instanceof EventDetails && aObj2 instanceof EventDetails){\n        EventDetails event1 = (EventDetails)aObj1;\n        EventDetails event2 = (EventDetails)aObj2;\n        return event1.getTimeStamp().compareTo(event2.getTimeStamp());\n    }\n    return 0;\n}"]}
{"_id": "636767861a6d9265ec01844c", "generate_results": ["public void removeAppender(String name){\n    if(name == null){\n        return;\n    }\n    Appender appender = getAppender(name);\n    if(appender != null){\n        removeAppender(appender);\n    }\n}"]}
{"_id": "636767781a6d9265ec018242", "generate_results": ["public int appendLoopOnAppenders(LoggingEvent event){\n    if(appenderList == null)\n        return 0;\n    int cnt = 0;\n    Enumeration e = appenderList.elements();\n    while(e.hasMoreElements()){\n        Appender appender = (Appender)e.nextElement();\n        if(appender.requiresLayout()){\n            appender.doAppend(new LoggingEvent(event));\n        }else{\n            appender.doAppend(event);\n        }\n        cnt++;\n    }\n    return cnt;\n}"]}
{"_id": "6367670c1a6d9265ec017a2a", "generate_results": ["public static int[] toPrimitive(final Integer[] array){\n    if(array == null){\n        return null;\n    }else if(array.length == 0){\n        return EMPTY_INT_ARRAY;\n    }else{\n        final int[] result = new int[array.length];\n        for(int i = 0; i < array.length; i++){\n            result[i] = array[i];\n        }\n        return result;\n    }\n}"]}
{"_id": "636767041a6d9265ec017911", "generate_results": ["static void register(Object value){\n    if(value != null){\n        REGISTRY.set(value);\n    }\n}"]}
{"_id": "636767511a6d9265ec017eb0", "generate_results": ["public int nonZeros(int row){\n    if (row < 0 || row >= rows) {\n        throw new IllegalArgumentException(\"Row index out of bounds\");\n    }\n    return rowOffsets[row + 1] - rowOffsets[row];\n}"]}
{"_id": "6367676c1a6d9265ec018223", "generate_results": ["public static boolean containsInstance(Collection collection,Object element){\n    return collection.contains(element);\n}"]}
{"_id": "636766fa1a6d9265ec01779d", "generate_results": ["public static boolean isAsciiControl(final char ch){\n    return ch < 32 || ch > 126;\n}"]}
{"_id": "6367670b1a6d9265ec0179f2", "generate_results": ["@Override public boolean containsKey(final Object key){\n    return map.containsKey(key);\n}"]}
{"_id": "636766fa1a6d9265ec017796", "generate_results": ["public static Boolean[] toObject(final boolean[] array){\n    if(array == null){\n        return null;\n    }\n    final Boolean[] result = new Boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Boolean.valueOf(array[i]);\n    }\n    return result;\n}"]}
{"_id": "636767aa1a6d9265ec01864a", "generate_results": ["public byte[] toByteArray(){\n    if (bytes == null) {\n        return EMPTY_BYTE_ARRAY;\n    }\n    byte[] newBytes = new byte[bytes.length];\n    System.arraycopy(bytes, 0, newBytes, 0, bytes.length);\n    return newBytes;\n}"]}
{"_id": "636767561a6d9265ec017f7c", "generate_results": ["protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    GraphPath<V,E> path = factory.createGraphPath(graph);\n    for(E edge : tour){\n        path.add(edge);\n    }\n    return path;\n}"]}
{"_id": "6367670a1a6d9265ec0179f1", "generate_results": ["public static Short[] toObject(final short[] array){\n    if(array == null){\n        return null;\n    }\n    final Short[] result = new Short[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}"]}
{"_id": "636766fe1a6d9265ec017823", "generate_results": ["int addConstantNameAndType(final String name,final String descriptor){\n    return 0;\n}"]}
{"_id": "636767461a6d9265ec017d17", "generate_results": ["private String unescapeId(String input){\n    if(input.startsWith(\"\\\"\")){\n        input = input.substring(1, input.length() - 1);\n        input = StringEscapeUtils.unescapeHtml4(input);\n    }\n    return input;\n}"]}
{"_id": "6367676c1a6d9265ec018204", "generate_results": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    List<String> list = new ArrayList<String>();\n    for (String str : array1) {\n        list.add(str);\n    }\n    for (String str : array2) {\n        list.add(str);\n    }\n    return list.toArray(new String[list.size()]);\n}"]}
{"_id": "636767641a6d9265ec018190", "generate_results": ["private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    bucketsByLabel.get(0).addAll(bucketsByLabel.get(minLabel));\n    bucketsByLabel.get(minLabel).clear();\n    for(int i=minLabel+1;i<labels.size();i++){\n        labels.set(i-1,labels.get(i));\n    }\n    labels.remove(labels.size()-1);\n}"]}
{"_id": "6367676a1a6d9265ec0181d4", "generate_results": ["public static String[] addStringToArray(String[] array,String str){\n    if(array == null){\n        array = new String[1];\n        array[0] = str;\n    }else{\n        String[] newArray = new String[array.length + 1];\n        for(int i = 0; i < array.length; i++){\n            newArray[i] = array[i];\n        }\n        newArray[array.length] = str;\n        array = newArray;\n    }\n    return array;\n}"]}
{"_id": "6367676b1a6d9265ec0181dd", "generate_results": ["public static int countOccurrencesOf(String str,String sub){\n    if (str == null || sub == null) {\n        return 0;\n    }\n    int count = 0;\n    int idx = 0;\n    while ((idx = str.indexOf(sub, idx)) != -1) {\n        count++;\n        idx += sub.length();\n    }\n    return count;\n}"]}
{"_id": "636766811a6d9265ec017499", "generate_results": ["private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    if(interceptorList==null||interceptorList.isEmpty()){\n        return false;\n    }\n    for(AtmosphereInterceptor interceptor:interceptorList){\n        if(c.isInstance(interceptor)){\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "636766fe1a6d9265ec017821", "generate_results": ["protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    if (array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n    appendSummary(buffer,fieldName,array);\n    if (!isArrayContentDetail()){\n        return;\n    }\n    appendArrayStart(buffer);\n    for (int i = 0; i < array.length; i++){\n        if (i > 0){\n            buffer.append(getArraySeparator());\n        }\n        buffer.append(array[i]);\n    }\n    buffer.append(getArrayEnd());\n}"]}
{"_id": "636767561a6d9265ec017f63", "generate_results": ["@Override public boolean hasNext(){\n  if(vertices.isEmpty()){\n    return false;\n  }\n  if(current == null){\n    current = head.vertices.iterator().next();\n  }\n  return true;\n}"]}
{"_id": "636766a81a6d9265ec017586", "generate_results": ["private void pop(final int elements){\n    if(elements<=0){\n        return;\n    }\n    if(outputStackTop<(short)elements){\n        throw new RuntimeException(\"Stack underflow\");\n    }\n    outputStackTop-=(short)elements;\n}"]}
{"_id": "636767e11a6d9265ec018795", "generate_results": ["public boolean isCompatible(DataTable dataset){\n    List<Bucket> buckets = dataset.getBuckets();\n    if (buckets.size() != this.buckets.length) {\n        return false;\n    }\n    for (int i = 0; i < buckets.size(); i++) {\n        if (buckets.get(i).getMin() != this.buckets[i] || buckets.get(i).getMax() != this.buckets[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636767791a6d9265ec018263", "generate_results": ["private Class findClass(final String className) throws ClassNotFoundException {\n    Class clazz = null;\n    try {\n        clazz = Class.forName(className);\n    } catch (ClassNotFoundException e) {\n        // try to load it from the local file system\n        File classFile = new File(className + \".class\");\n        if (classFile.exists()) {\n            clazz = getClassLoader().loadClass(className);\n        } else {\n            throw e;\n        }\n    }\n    return clazz;\n}"]}
{"_id": "636767611a6d9265ec018112", "generate_results": ["@Override protected V provideNextVertex(){\n    if(graph.containsEdge(currentVertex,nextVertex)){\n        return nextVertex;\n    }\n    else{\n        return null;\n    }\n}"]}
{"_id": "636767131a6d9265ec017b23", "generate_results": ["final void addLineNumber(final int lineNumber){\n    if(this.lineNumber == -1){\n        this.lineNumber = lineNumber;\n    }else{\n        if(this.otherLineNumbers == null){\n            this.otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT];\n        }\n        if(this.otherLineNumbers.length == this.lineNumber){\n            int[] newArray = new int[this.otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT];\n            System.arraycopy(this.otherLineNumbers,0,newArray,0,this.otherLineNumbers.length);\n            this.otherLineNumbers = newArray;\n        }\n        this.otherLineNumbers[this.lineNumber] = lineNumber;\n    }\n}"]}
{"_id": "6367675a1a6d9265ec018010", "generate_results": ["void removeSelf(){\n    if(prev != null){\n        prev.next = next;\n    }\n    if(next != null){\n        next.prev = prev;\n    }\n    if(bucketMap != null){\n        bucketMap.remove(this);\n    }\n}"]}
{"_id": "636767dd1a6d9265ec0186f3", "generate_results": ["public void overrideName(String oldName,String newName){\n    if(CollectionUtils.isEmpty(indices)){\n        return;\n    }\n    for(MultiColumnsIndex index:indices){\n        if(index.getMainColumn().equals(oldName)){\n            index.setMainColumn(newName);\n        }\n        for(String column:index.getWithColumns()){\n            if(column.equals(oldName)){\n                List<String> newColumns = new ArrayList<>();\n                newColumns.add(newName);\n                index.setWithColumns(newColumns.toArray(new String[0]));\n            }\n        }\n    }\n}"]}
{"_id": "636767631a6d9265ec018171", "generate_results": ["private boolean unlink(ListNodeImpl<E> node){\n    if(node == null){\n        return false;\n    }\n    if(node.prev == node){\n        head = null;\n    }else{\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n        if(head == node){\n            head = node.next;\n        }\n    }\n    node.prev = null;\n    node.next = null;\n    size--;\n    return true;\n}"]}
{"_id": "636767de1a6d9265ec018726", "generate_results": ["public List<SequenceRange> buildSequenceRanges(){\n    List<SequenceRange> sequenceRanges = new ArrayList<>();\n    int sequence = minSequence;\n    while (sequence <= maxSequence) {\n        sequenceRanges.add(new SequenceRange(minSequence, Math.min(sequence + SEQUENCE_RANGE_BATCH_SIZE - 1, maxSequence)));\n        sequence += SEQUENCE_RANGE_BATCH_SIZE;\n    }\n    return sequenceRanges;\n}"]}
{"_id": "6367667c1a6d9265ec0173f7", "generate_results": ["public boolean hasBytes(){\n    if(dataBytes == null){\n        return false;\n    }else{\n        return true;\n    }\n}"]}
{"_id": "6367676c1a6d9265ec018220", "generate_results": ["public static String stripFilenameExtension(String path){\n    if(path == null){\n        return null;\n    }\n    int extIndex = path.lastIndexOf(EXTENSION_SEPARATOR);\n    if(extIndex == -1){\n        return path;\n    }\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n    if(folderIndex == -1){\n        return path.substring(0, extIndex);\n    }\n    return (folderIndex > extIndex ? path.substring(0, folderIndex) : path) + path.substring(extIndex + 1);\n}"]}
{"_id": "636766fe1a6d9265ec017838", "generate_results": ["public static char[] toPrimitive(final Character[] array){\n    if(array == null){\n        return null;\n    }\n    if(array.length == 0){\n        return EMPTY_CHAR_ARRAY;\n    }\n    final char[] result = new char[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}"]}
{"_id": "636766fa1a6d9265ec01779c", "generate_results": ["private String parseToken(final char[] terminators){\n    chars = getToken(false);\n    if(chars == null){\n        return null;\n    }\n    len = chars.length;\n    pos = 0;\n    while(pos < len){\n        if(isOneOf(chars[pos],terminators)){\n            return new String(chars,0,pos);\n        }\n        pos++;\n    }\n    return new String(chars);\n}"]}
{"_id": "636767691a6d9265ec0181a7", "generate_results": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n    if (!hasLength(str)) {\n        return str;\n    }\n    StringBuilder sb = new StringBuilder(str);\n    while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {\n        sb.deleteCharAt(0);\n    }\n    return sb.toString();\n}"]}
{"_id": "636767041a6d9265ec01790f", "generate_results": ["public static Integer[] toObject(final int[] array){\n    if(array == null){\n        return null;\n    }\n    final Integer[] result = new Integer[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Integer.valueOf(array[i]);\n    }\n    return result;\n}"]}
{"_id": "636766fa1a6d9265ec0177a4", "generate_results": ["public static Double[] toObject(final double[] array){\n    if(array == null){\n        return null;\n    }\n    final Double[] result = new Double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}"]}
{"_id": "636767461a6d9265ec017d0e", "generate_results": ["private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSums = new ArrayList<>();\n    int sum = 0;\n    for(int i = bounds.size()-1; i >= 0; i--){\n        sum += bounds.get(i);\n        suffixSums.add(sum);\n    }\n    Collections.reverse(suffixSums);\n    return new Pair<>(suffixSums, (long) sum);\n}"]}
{"_id": "636767491a6d9265ec017d90", "generate_results": ["public static final <V>void reverse(V[] arr,int from,int to){\n    if(arr==null||from<0||to>arr.length||from>to){\n        throw new IllegalArgumentException();\n    }\n    while(from<to){\n        swap(arr,from++,to--);\n    }\n}"]}
{"_id": "6367674a1a6d9265ec017da9", "generate_results": ["private void moveAllListNodes(DoublyLinkedList<E> list){\n    if(list == null || list.isEmpty()){\n        return;\n    }\n    ListNodeImpl<E> node = list.getFirstNode();\n    while(node != null){\n        addListNode(node);\n        node = node.getNext();\n    }\n    list.clear();\n}"]}
{"_id": "636767151a6d9265ec017b6b", "generate_results": ["private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n    if(str==null||prefix==null){\n        return str==null&&prefix==null;\n    }\n    if(ignoreCase){\n        return str.toLowerCase().startsWith(prefix.toLowerCase());\n    }else{\n        return str.startsWith(prefix);\n    }\n}"]}
{"_id": "636766fe1a6d9265ec01781c", "generate_results": ["public static Character toCharacterObject(final char ch){\n    return new Character(ch);\n}"]}
{"_id": "636766fb1a6d9265ec0177c1", "generate_results": ["public static boolean isAsciiAlphaUpper(final char ch){\n    return (ch >= 'A' && ch <= 'Z');\n}"]}
{"_id": "636767781a6d9265ec018250", "generate_results": ["public int decide(LoggingEvent event){\n    if (event.getRenderedMessage().contains(stringToMatch)){\n        return acceptOnMatch ? Filter.ACCEPT : Filter.DENY;\n    } else {\n        return Filter.NEUTRAL;\n    }\n}"]}
{"_id": "636766861a6d9265ec017553", "generate_results": ["public final boolean isTemplateVariablePresent(String name){\n    if(templateVariables==null){\n        return false;\n    }\n    return templateVariables.contains(name);\n}"]}
{"_id": "636767071a6d9265ec017962", "generate_results": ["public void putAllWriteable(BeanMap map){\n    if(map == null){\n        return;\n    }\n    for(Map.Entry<String,Method> entry : map.entrySet()){\n        if(entry.getValue().getParameterTypes().length == 0){\n            this.put(entry.getKey(),entry.getValue());\n        }\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179d9", "generate_results": ["public static int length(final String str){\n    if(str == null){\n        return 0;\n    }\n    return str.length();\n}"]}
{"_id": "636767ab1a6d9265ec018676", "generate_results": ["private static boolean isHex(final char c){\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}"]}
{"_id": "636766f81a6d9265ec017748", "generate_results": ["public static String base64Decode(final String s){\n    return new String(Base64.getDecoder().decode(s), StandardCharsets.UTF_8);\n}"]}
{"_id": "636766f11a6d9265ec017663", "generate_results": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1==null){\n        return array2==null;\n    }\n    if(array2==null){\n        return false;\n    }\n    return array1.length==array2.length;\n}"]}
{"_id": "6367667d1a6d9265ec0173ff", "generate_results": ["public static Meteor lookup(HttpServletRequest r){\n    return (Meteor) r.getAttribute(ATMOSPHERE_RESOURCE);\n}"]}
{"_id": "636767691a6d9265ec0181a6", "generate_results": ["public static String[] split(String toSplit,String delimiter){\n    if(toSplit==null){\n        return null;\n    }\n    if(delimiter==null){\n        return new String[]{toSplit};\n    }\n    int pos=toSplit.indexOf(delimiter);\n    if(pos==-1){\n        return new String[]{toSplit};\n    }\n    return new String[]{toSplit.substring(0,pos),toSplit.substring(pos+delimiter.length())};\n}"]}
{"_id": "636767601a6d9265ec0180e2", "generate_results": ["private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n    for(E edge : graph.edgeSet()){\n        if(graph.containsEdge(graph.getEdgeSource(edge),graph.getEdgeTarget(edge))){\n            continue;\n        }\n        List<Pair<Integer,Integer>> separators = new ArrayList<>();\n        List<Pair<Integer,Integer>> neighbors = new ArrayList<>();\n        for(V vertex : graph.neighborListOf(edge)){\n            neighbors.add(new Pair<>(vertices.get(vertex),vertices.get(graph.getEdgeTarget(vertex,edge))));\n        }\n        separators.addAll(neighbors);\n        result.add(new Pair<>(separators,edge));\n    }\n    return result;\n}"]}
{"_id": "636766f31a6d9265ec01768f", "generate_results": ["public static char[] clone(final char[] array){\n    if (array == null){\n        return null;\n    }\n    return array.clone();\n}"]}
{"_id": "636766831a6d9265ec0174eb", "generate_results": ["private void addReverse(final File[] files){\n    if(files != null){\n        for(int i = files.length - 1; i >= 0; i--){\n            if(files[i] != null){\n                stack.push(files[i]);\n            }\n        }\n    }\n}"]}
{"_id": "636767841a6d9265ec0183ff", "generate_results": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n    if(row < 0 || row >= table.getRowCount()){\n        throw new IllegalArgumentException(\"Row index out of bounds: \" + row);\n    }\n    table.setRowSelectionInterval(row, row);\n    table.scrollRectToVisible(table.getCellRect(row, 0, true));\n    makeVerticalScrollBarTrack(pane);\n}"]}
{"_id": "636766a81a6d9265ec017596", "generate_results": ["public ByteVector putInt(final int intValue){\n    if(length + 4 > data.length){\n        enlarge(4);\n    }\n    data[length++] = (byte)((intValue >> 24) & 0xFF);\n    data[length++] = (byte)((intValue >> 16) & 0xFF);\n    data[length++] = (byte)((intValue >> 8) & 0xFF);\n    data[length++] = (byte)(intValue & 0xFF);\n    return this;\n}"]}
{"_id": "636766fd1a6d9265ec017814", "generate_results": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n    if(a.length<count||b.length<count){\n        return false;\n    }\n    for(int i=0;i<count;i++){\n        if(a[i] != b[i]){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636767861a6d9265ec018440", "generate_results": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n    int startPos=nameStart;\n    if(fragments.length>0){\n        for(int i=0;i<fragments.length;i++){\n            if(fragments[i].charCount>0){\n                if(startPos+fragments[i].charCount<buf.length()){\n                    buf.delete(startPos,startPos+fragments[i].charCount);\n                    startPos+=fragments[i].charCount;\n                }else{\n                    buf.delete(startPos,buf.length());\n                    break;\n                }\n            }\n            if(fragments[i].ellipsis>0&&startPos<buf.length()){\n                buf.insert(startPos,fragments[i].ellipsis);\n                startPos++;\n            }\n        }\n    }\n}"]}
{"_id": "6367667d1a6d9265ec01741d", "generate_results": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n    if(typeVariable.getBounds().length==0){\n        return Unknown.class;\n    }\n    for(Type bound:typeVariable.getBounds()){\n        if(bound instanceof Class){\n            return bound;\n        }\n        if(bound instanceof TypeVariable){\n            return resolveBound((TypeVariable)bound);\n        }\n    }\n    return Unknown.class;\n}"]}
{"_id": "6367675f1a6d9265ec0180cf", "generate_results": ["private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    if(vertices.size()<=1){\n        return true;\n    }\n    for(V v:vertices){\n        for(V u:vertices){\n            if(v.equals(u)){\n                continue;\n            }\n            if(!graph.containsEdge(v,u)){\n                return false;\n            }\n        }\n    }\n    return true;\n}"]}
{"_id": "636767431a6d9265ec017c88", "generate_results": ["private List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<>();\n    for(K key:keys){\n        int min = Integer.MAX_VALUE;\n        for(Function<K,Integer> function:this.lowerBounds){\n            int value = function.apply(key);\n            if(value<min){\n                min = value;\n            }\n        }\n        lowerBounds.add(min);\n    }\n    return lowerBounds;\n}"]}
{"_id": "636766a91a6d9265ec0175c4", "generate_results": ["private void pop(final String descriptor){\n    final char type = descriptor.charAt(0);\n    switch (type){\n        case 'V':\n            pop();\n            break;\n        case 'Z':\n        case 'B':\n            pop(1);\n            break;\n        case 'C':\n            pop(2);\n            break;\n        case 'S':\n            pop(2);\n            break;\n        case 'I':\n            pop(4);\n            break;\n        case 'F':\n            pop(4);\n            break;\n        case 'J':\n            pop(8);\n            break;\n        case 'D':\n            pop(8);\n            break;\n        case 'L':\n            pop(descriptor.substring(1, descriptor.length() - 1));\n            break;\n        case '[':\n            pop(descriptor.substring(1));\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}"]}
{"_id": "636766fb1a6d9265ec0177c3", "generate_results": ["public static boolean isAscii(final char ch){\n    return ch >= 0 && ch < 128;\n}"]}
{"_id": "636767581a6d9265ec017fb4", "generate_results": ["private List<Integer> computeUpperBounds(List<K> keys){\n    List<Integer> upperBounds = new ArrayList<>();\n    for(K key:keys){\n        int max = Integer.MIN_VALUE;\n        for(Function<K,Integer> function:this.upperBounds){\n            int value = function.apply(key);\n            if(value>max){\n                max = value;\n            }\n        }\n        upperBounds.add(max);\n    }\n    return upperBounds;\n}"]}
{"_id": "636766801a6d9265ec017487", "generate_results": ["public static String encodeTemplateNames(String s){\n    if(s == null || s.length() == 0){\n        return s;\n    }\n    StringBuilder sb = new StringBuilder(s.length() * 2);\n    for(int i = 0; i < s.length(); i++){\n        char c = s.charAt(i);\n        if(c == '{' || c == '}'){\n            sb.append('%');\n            sb.append(HEX_DIGITS[(c >> 4) & 0x0F]);\n            sb.append(HEX_DIGITS[c & 0x0F]);\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"]}
{"_id": "636767531a6d9265ec017ef1", "generate_results": ["public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getX(),p2.getX())==0 && TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getY(),p2.getY())==0;\n}"]}
{"_id": "6367667c1a6d9265ec0173fb", "generate_results": ["@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    listeners.add(e);\n    return this;\n}"]}
{"_id": "636767691a6d9265ec0181ac", "generate_results": ["public static String applyRelativePath(String path,String relativePath){\n    if(path==null||relativePath==null){\n        throw new IllegalArgumentException(\"Path and relative path must not be null\");\n    }\n    if(relativePath.startsWith(FOLDER_SEPARATOR)){\n        throw new IllegalArgumentException(\"Relative path must not start with a separator\");\n    }\n    if(path.endsWith(FOLDER_SEPARATOR)){\n        return path+relativePath;\n    }else{\n        return path+FOLDER_SEPARATOR+relativePath;\n    }\n}"]}
{"_id": "636767021a6d9265ec0178bc", "generate_results": ["public static int indexOf(String str,String searchStr){\n    if(str == null || searchStr == null){\n        return -1;\n    }\n    return str.indexOf(searchStr);\n}"]}
{"_id": "636766fc1a6d9265ec0177ef", "generate_results": ["static String[] toNoNullStringArray(Object[] array){\n    if(array == null){\n        throw new IllegalArgumentException(\"The array must not be null\");\n    }\n    if(array.length == 0){\n        throw new IllegalArgumentException(\"The array must not be empty\");\n    }\n    ArrayList<String> list = new ArrayList<String>();\n    for(Object obj : array){\n        if(obj != null){\n            list.add(obj.toString());\n        }\n    }\n    return list.toArray(new String[0]);\n}"]}
{"_id": "636767061a6d9265ec01794a", "generate_results": ["public static int indexOfExtension(String filename){\n    if(filename == null){\n        return -1;\n    }\n    int extensionPos = filename.lastIndexOf(EXTENSION_SEPARATOR);\n    int lastDirSeparator = filename.lastIndexOf(File.separatorChar);\n    if(lastDirSeparator >= extensionPos){\n        return -1;\n    }\n    return extensionPos;\n}"]}
{"_id": "636767dd1a6d9265ec0186de", "generate_results": ["public boolean isExpired(long timestamp,long expiredThreshold){\n    if(timestamp-lastUpdateTimestamp>expiredThreshold){\n        return true;\n    }\n    return false;\n}"]}
{"_id": "6367675d1a6d9265ec018082", "generate_results": ["Edge edgeToNext(){\n    if(prevEdge==null){\n        return null;\n    }\n    if(prevEdge.getSource().equals(current)){\n        return prevEdge;\n    }\n    return graph.getEdge(current,prevEdge.getSource());\n}"]}
{"_id": "6367676b1a6d9265ec0181e9", "generate_results": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n    if (str == null || substring == null) {\n        return false;\n    }\n    int len = substring.length();\n    int strLen = str.length();\n    if (index + len > strLen) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (str.charAt(index + i) != substring.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636767781a6d9265ec01823e", "generate_results": ["protected void append(LoggingEvent event){\n    if (!this.acceptAllEvents && !this.filter.getClass().equals(event.getClass())) {\n        return;\n    }\n    if (this.layout == null) {\n        LogLog.error(\"No layout set for the appender named [\" + name + \"].\");\n        return;\n    }\n    try {\n        String message = this.layout.format(event);\n        if (this.layout.ignoresThrowable()) {\n            String[] lines = event.getThrowableStrRep();\n            if (lines != null) {\n                for (int i = 0; i < lines.length; i++) {\n                    message += \"\\n\" + lines[i];\n                }\n            }\n        }\n        if (writers.size() > 0) {\n            Iterator it = writers.iterator();\n            while (it.hasNext()) {\n                PrintWriter writer = (PrintWriter) it.next();\n                writer.println(message);\n                writer.flush();\n            }\n        }\n    } catch (Exception e) {\n        LogLog.error(\"Error while sending log messages.\", e);\n    }\n}"]}
{"_id": "6367670b1a6d9265ec017a05", "generate_results": ["public static String toString(final char ch){\n    return String.valueOf(ch);\n}"]}
{"_id": "636767a31a6d9265ec01854f", "generate_results": ["private void checkIfPackedField() throws IOException {\n    if (isCurrentFieldPacked()) {\n        readField();\n    }\n}"]}
{"_id": "636767a81a6d9265ec0185fc", "generate_results": ["public int readTag() throws IOException {\n    if (buffer.hasRemaining()) {\n        lastTag = buffer.get();\n        if (lastTag != 0) {\n            return lastTag;\n        }\n    }\n    throw new IOException(\"End of stream\");\n}"]}
{"_id": "636766a81a6d9265ec017595", "generate_results": ["final ByteVector put11(final int byteValue1,final int byteValue2){\n    if(length+2>data.length){\n        enlarge(2);\n    }\n    data[length++]=(byte)byteValue1;\n    data[length++]=(byte)byteValue2;\n    return this;\n}"]}
{"_id": "636766ae1a6d9265ec0175d8", "generate_results": ["private String buildContentRange(){\n    StringBuilder contentRange = new StringBuilder();\n    if(isPartialContentResponse()){\n        contentRange.append(\"items \").append(getOffset()).append(\"-\").append(getLimit()).append(\"/\").append(getCount());\n    }else{\n        contentRange.append(\"items 0-\").append(getCount()-1).append(\"/\").append(getCount());\n    }\n    return contentRange.toString();\n}"]}
{"_id": "636767e11a6d9265ec018790", "generate_results": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    try (FileInputStream fis = new FileInputStream(file)) {\n        ThreadSnapshot snapshot = ThreadSnapshot.parseFrom(fis);\n        for (ProfileAnalyzeTimeRange timeRange : timeRanges) {\n            if (snapshot.getTime() >= timeRange.getStartTime() && snapshot.getTime() <= timeRange.getEndTime()) {\n                threadSnapshots.add(snapshot);\n            }\n        }\n    }\n    return threadSnapshots;\n}"]}

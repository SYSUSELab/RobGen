{"generate_results": [{"generate_code": "public boolean shouldPrintMessage(int timestamp,String message){\n    HashMap<String,Integer> messages=new HashMap<>();\n    if(!messages.containsKey(message)){\n        messages.put(message,timestamp);\n        return true;\n    }\n    else{\n        int oldTimestamp=messages.get(message);\n        if(timestamp-oldTimestamp>=10){\n            messages.put(message,timestamp);\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.lang.Integer.intValue()\" because the return value of \"java.util.HashMap.get(Object)\" is null\n\tat LoggerRateLimiter_shouldPrintMessage.main(LoggerRateLimiter_shouldPrintMessage.java:20)\n", "is_pass": false}], "docstring": "/** \n * Returns true if the message should be printed in the given timestamp, otherwise returns false. If this method returns false, the message will not be printed. The timestamp is in seconds granularity. \n */\n", "method_name": "shouldPrintMessage", "codes": ["public boolean shouldPrintMessage(int timestamp,String message){\n    HashMap<String,Integer> messages=new HashMap<>();\n    if(!messages.containsKey(message)){\n        messages.put(message,timestamp);\n        return true;\n    }\n    else{\n        int oldTimestamp=messages.get(message);\n        if(timestamp-oldTimestamp>=10){\n            messages.put(message,timestamp);\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c73", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//LoggerRateLimiter_shouldPrintMessage.class"}
{"generate_results": [{"generate_code": "public boolean remove(int val){\n    if(map.containsKey(val)){\n        int index = map.get(val);\n        values.set(index,values.get(values.size()-1));\n        map.put(values.get(index),index);\n        values.remove(values.size()-1);\n        return true;\n    }\n    return false;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 10000 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:361)\n\tat java.base/java.util.ArrayList.set(ArrayList.java:441)\n\tat InsertDeleteGetRandomO1.remove(InsertDeleteGetRandomO1.java:57)\n\tat InsertDeleteGetRandomO1_remove.main(InsertDeleteGetRandomO1_remove.java:19)\n", "is_pass": false}], "docstring": "/** \n * Removes a value from the set. Returns true if the set contained the specified element. \n */\n", "method_name": "remove", "codes": ["public boolean remove(int val){\n    if(map.containsKey(val)){\n        int index = map.get(val);\n        values.set(index,values.get(values.size()-1));\n        map.put(values.get(index),index);\n        values.remove(values.size()-1);\n        return true;\n    }\n    return false;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c74", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//InsertDeleteGetRandomO1_remove.class"}
{"generate_results": [{"generate_code": "public boolean insert(int val){\n    if(map.containsKey(val)){\n        return false;\n    }\n    map.put(val,val);\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n */\n", "method_name": "insert", "codes": ["public boolean insert(int val){\n    if(map.containsKey(val)){\n        return false;\n    }\n    map.put(val,val);\n    return true;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c78", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//InsertDeleteGetRandomO1_insert.class"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return array1.length == array2.length;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"<parameter1>\" is null\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1117)\n\tat net.hasor.utils.ArrayUtils_isSameLength.main(ArrayUtils_isSameLength.java:52)\n", "is_pass": false}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return array1.length == array2.length;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec017a00", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isSameLength.class"}
{"generate_results": [{"generate_code": "public static boolean[] toPrimitive(final Boolean[] array){\n    if(array == null) return null;\n    final int length = array.length;\n    if(length == 0) return ArrayUtils.EMPTY_BOOLEAN_ARRAY;\n    final boolean[] result = new boolean[length];\n    for(int i = 0; i < length; i++){\n        result[i] = array[i].booleanValue();\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Boolean</code> array, may be <code>null</code>\n * @return a <code>boolean</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static boolean[] toPrimitive(final Boolean[] array){\n    if(array == null) return null;\n    final int length = array.length;\n    if(length == 0) return ArrayUtils.EMPTY_BOOLEAN_ARRAY;\n    final boolean[] result = new boolean[length];\n    for(int i = 0; i < length; i++){\n        result[i] = array[i].booleanValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec017989", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static String toString(Object obj){\n    if(obj==null) return \"\";\n    return obj.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string (\"\") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = \"\" ObjectUtils.toString(\"\")           = \"\" ObjectUtils.toString(\"bat\")        = \"bat\" ObjectUtils.toString(Boolean.TRUE) = \"true\" </pre>\n * @see StringUtils#defaultString(String)\n * @see String#valueOf(Object)\n * @param obj  the Object to <code>toString</code>, may be null\n * @return the passed in Object's toString, or nullStr if <code>null</code> input\n * @since 2.0\n */\n", "method_name": "toString", "codes": ["public static String toString(Object obj){\n    if(obj==null) return \"\";\n    return obj.toString();\n}"], "code_level": "self_contained", "_id": "636766f81a6d9265ec01775c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ObjectUtils_toString.class"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(Boolean bool){\n    return bool == null ? false : bool.booleanValue();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>\n * @param bool  the boolean to convert\n * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>\n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(Boolean bool){\n    return bool == null ? false : bool.booleanValue();\n}"], "code_level": "self_contained", "_id": "636766f91a6d9265ec01777f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/BooleanUtils_toBoolean.class"}
{"generate_results": [{"generate_code": "public static Byte[] nullToEmpty(final Byte[] array){\n    return (array == null || array.length == 0) ? EMPTY_BYTE_OBJECT_ARRAY : array.clone();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Byte[] nullToEmpty(final Byte[] array){\n    return (array == null || array.length == 0) ? EMPTY_BYTE_OBJECT_ARRAY : array.clone();\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec0179ff", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static Boolean[] nullToEmpty(final Boolean[] array){\n    return (array == null || array.length == 0) ? EMPTY_BOOLEAN_OBJECT_ARRAY : array.clone();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n    return (array == null || array.length == 0) ? EMPTY_BOOLEAN_OBJECT_ARRAY : array.clone();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179e8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static byte[] toPrimitive(final Byte[] array){\n    if(array == null) {\n        return null;\n    }\n    final byte[] result = new byte[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].byteValue();\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Byte</code> array, may be <code>null</code>\n * @return a <code>byte</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static byte[] toPrimitive(final Byte[] array){\n    if(array == null) {\n        return null;\n    }\n    final byte[] result = new byte[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].byteValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636767031a6d9265ec0178e6", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static String reverse(final String str){\n    return new StringBuilder(str).reverse().toString();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.length()\" because \"str\" is null\n\tat java.base/java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:105)\n\tat java.base/java.lang.StringBuilder.<init>(StringBuilder.java:131)\n\tat net.hasor.utils.StringUtils.reverse(StringUtils.java:5254)\n\tat net.hasor.utils.StringUtils_reverse.main(StringUtils_reverse.java:12)\n", "is_pass": false}], "docstring": "/** \n * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse(\"\")    = \"\" StringUtils.reverse(\"bat\") = \"tab\" </pre>\n * @param str  the String to reverse, may be null\n * @return the reversed String, <code>null</code> if null String input\n */\n", "method_name": "reverse", "codes": ["public static String reverse(final String str){\n    return new StringBuilder(str).reverse().toString();\n}"], "code_level": "slib_runnable", "_id": "636767001a6d9265ec017873", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_reverse.class"}
{"generate_results": [{"generate_code": "public static boolean isDigits(String str){\n    for (int i = 0; i < str.length(); i++){\n        char ch = str.charAt(i);\n        if (!Character.isDigit(ch)){\n            return false;\n        }\n    }\n    return true;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.length()\" because \"<parameter1>\" is null\n\tat net.hasor.utils.NumberUtils.isDigits(NumberUtils.java:562)\n\tat net.hasor.utils.NumberUtils_isDigits.main(NumberUtils_isDigits.java:12)\n", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if str contains only unicode numeric\n */\n", "method_name": "isDigits", "codes": ["public static boolean isDigits(String str){\n    for (int i = 0; i < str.length(); i++){\n        char ch = str.charAt(i);\n        if (!Character.isDigit(ch)){\n            return false;\n        }\n    }\n    return true;\n}"], "code_level": "slib_runnable", "_id": "636766ff1a6d9265ec01784b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/NumberUtils_isDigits.class"}
{"generate_results": [{"generate_code": "private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n    if(str == null || suffix == null){\n        return false;\n    }\n    final int len = suffix.length();\n    if(len > str.length()){\n        return false;\n    }\n    if(ignoreCase){\n        return str.regionMatches(true,len,suffix,0);\n    }else{\n        return str.endsWith(suffix);\n    }\n}", "errormessage": "compile error", "error_detail_message": "StringUtils.java:5934: error: incompatible types: boolean cannot be converted to int\n        return str.regionMatches(true,len,suffix,0);\n                                 ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "endsWith", "codes": ["private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n    if(str == null || suffix == null){\n        return false;\n    }\n    final int len = suffix.length();\n    if(len > str.length()){\n        return false;\n    }\n    if(ignoreCase){\n        return str.regionMatches(true,len,suffix,0);\n    }else{\n        return str.endsWith(suffix);\n    }\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a35", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/StringUtils_endsWith.java"}
{"generate_results": [{"generate_code": "public static Character[] nullToEmpty(final Character[] array){\n    if(array == null || array.length == 0) {\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Character[] nullToEmpty(final Character[] array){\n    if(array == null || array.length == 0) {\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017651", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static Double[] nullToEmpty(final Double[] array){\n    if(array == null || array.length == 0) {\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}", "errormessage": "compile error", "error_detail_message": "ArrayUtils.java:621: error: incompatible types: Character[] cannot be converted to Double[]\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n               ^\nArrayUtils.java:2559: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            result[i] = new Character(array[i]);\n                        ^\nArrayUtils.java:2627: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n            result[i] = new Long(array[i]);\n                        ^\nArrayUtils.java:2695: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            result[i] = new Integer(array[i]);\n                        ^\nArrayUtils.java:2763: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n            result[i] = new Short(array[i]);\n                        ^\nArrayUtils.java:2831: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n            result[i] = new Byte(array[i]);\n                        ^\nArrayUtils.java:2899: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n            result[i] = new Double(array[i]);\n                        ^\nArrayUtils.java:2967: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n            result[i] = new Float(array[i]);\n                        ^\nArrayUtils.java:3924: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return (char[]) ArrayUtils.add(array, index, new Character(element), Character.TYPE);\n                                                     ^\nArrayUtils.java:3955: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n        return (byte[]) ArrayUtils.add(array, index, new Byte(element), Byte.TYPE);\n                                                     ^\nArrayUtils.java:3986: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n        return (short[]) ArrayUtils.add(array, index, new Short(element), Short.TYPE);\n                                                      ^\nArrayUtils.java:4017: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n        return (int[]) ArrayUtils.add(array, index, new Integer(element), Integer.TYPE);\n                                                    ^\nArrayUtils.java:4048: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n        return (long[]) ArrayUtils.add(array, index, new Long(element), Long.TYPE);\n                                                     ^\nArrayUtils.java:4079: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n        return (float[]) ArrayUtils.add(array, index, new Float(element), Float.TYPE);\n                                                      ^\nArrayUtils.java:4110: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n        return (double[]) ArrayUtils.add(array, index, new Double(element), Double.TYPE);\n                                                       ^\nNote: ArrayUtils.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n14 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Double[] nullToEmpty(final Double[] array){\n    if(array == null || array.length == 0) {\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}"], "code_level": "self_contained", "_id": "636767021a6d9265ec0178bb", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils_nullToEmpty.java"}
{"generate_results": [{"generate_code": "public static boolean isEmpty(final double[] array){\n    return array == null || array.length == 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n * @param array  the array to test\n * @return <code>true</code> if the array is empty or <code>null</code>\n * @since 2.1\n */\n", "method_name": "isEmpty", "codes": ["public static boolean isEmpty(final double[] array){\n    return array == null || array.length == 0;\n}"], "code_level": "self_contained", "_id": "636766f01a6d9265ec01762e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isEmpty.class"}
{"generate_results": [{"generate_code": "public static boolean isNotTrue(Boolean bool){\n    return !bool;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>\n * @param bool  the boolean to check, null returns <code>true</code>\n * @return <code>true</code> if the input is null or false\n * @since 2.3\n */\n", "method_name": "isNotTrue", "codes": ["public static boolean isNotTrue(Boolean bool){\n    return !bool;\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec017677", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/BooleanUtils_isNotTrue.class"}
{"generate_results": [{"generate_code": "public static double[] toPrimitive(final Double[] array){\n    if(array.length == 0) {\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] result = new double[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"<parameter1>\" is null\n\tat net.hasor.utils.ArrayUtils.toPrimitive(ArrayUtils.java:2853)\n\tat net.hasor.utils.ArrayUtils_toPrimitive.testToPrimitiveDouble(ArrayUtils_toPrimitive.java:114)\n\tat net.hasor.utils.ArrayUtils_toPrimitive.main(ArrayUtils_toPrimitive.java:189)\n", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Double</code> array, may be <code>null</code>\n * @return a <code>double</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static double[] toPrimitive(final Double[] array){\n    if(array.length == 0) {\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] result = new double[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017842", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static char toChar(final Character ch,final char defaultValue){\n    return (ch == null) ? defaultValue : ch.charValue();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>\n * @param ch  the character to convert\n * @param defaultValue  the value to use if the  Character is null\n * @return the char value of the Character or the default if null\n */\n", "method_name": "toChar", "codes": ["public static char toChar(final Character ch,final char defaultValue){\n    return (ch == null) ? defaultValue : ch.charValue();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179cf", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toChar.class"}
{"generate_results": [{"generate_code": "private static boolean isAllZeros(String s){\n    return s.matches(\"0+\");\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.matches(String)\" because \"<parameter1>\" is null\n\tat net.hasor.utils.NumberUtils.isAllZeros(NumberUtils.java:274)\n\tat net.hasor.utils.NumberUtils_isAllZeros.main(NumberUtils_isAllZeros.java:19)\n", "is_pass": false}], "docstring": "/** \n * <p>Utility method for  {@link #createNumber(String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>\n * @param s the String to check\n * @return if it is all zeros or <code>null</code>\n */\n", "method_name": "isAllZeros", "codes": ["private static boolean isAllZeros(String s){\n    return s.matches(\"0+\");\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec0179a2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/NumberUtils_isAllZeros.class"}
{"generate_results": [{"generate_code": "public static String toString(Object object){\n    return object != null ? object.toString() : null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Object to String ,when null object then null else return toString(); \n */\n", "method_name": "toString", "codes": ["public static String toString(Object object){\n    return object != null ? object.toString() : null;\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec01767d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_toString.class"}
{"generate_results": [{"generate_code": "public static int[] toPrimitive(final Integer[] array){\n    if(array == null) return null;\n    final int length = array.length;\n    if(length == 0) return EMPTY_INT_ARRAY;\n    final int[] result = new int[length];\n    for(int i = 0; i < length; i++){\n        result[i] = array[i].intValue();\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Integer</code> array, may be <code>null</code>\n * @return an <code>int</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static int[] toPrimitive(final Integer[] array){\n    if(array == null) return null;\n    final int length = array.length;\n    if(length == 0) return EMPTY_INT_ARRAY;\n    final int[] result = new int[length];\n    for(int i = 0; i < length; i++){\n        result[i] = array[i].intValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a2a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static boolean isAsciiControl(final char ch){\n    return (ch >= 0 && ch <= 31) || ch == 127;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 32 or equals 127\n */\n", "method_name": "isAsciiControl", "codes": ["public static boolean isAsciiControl(final char ch){\n    return (ch >= 0 && ch <= 31) || ch == 127;\n}"], "code_level": "self_contained", "_id": "636766fa1a6d9265ec01779d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAsciiControl.class"}
{"generate_results": [{"generate_code": "public static Boolean[] toObject(final boolean[] array){\n    return array == null ? null : Arrays.stream(array).mapToObj(Boolean::valueOf).toArray(Boolean[]::new);\n}", "errormessage": "compile error", "error_detail_message": "ArrayUtils.java:2573: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            result[i] = new Character(array[i]);\n                        ^\nArrayUtils.java:2641: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n            result[i] = new Long(array[i]);\n                        ^\nArrayUtils.java:2709: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            result[i] = new Integer(array[i]);\n                        ^\nArrayUtils.java:2777: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n            result[i] = new Short(array[i]);\n                        ^\nArrayUtils.java:2845: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n            result[i] = new Byte(array[i]);\n                        ^\nArrayUtils.java:2913: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n            result[i] = new Double(array[i]);\n                        ^\nArrayUtils.java:2981: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n            result[i] = new Float(array[i]);\n                        ^\nArrayUtils.java:3034: error: cannot find symbol\n    return array == null ? null : Arrays.stream(array).mapToObj(Boolean::valueOf).toArray(Boolean[]::new);\n                                  ^\n  symbol:   variable Arrays\n  location: class ArrayUtils\nArrayUtils.java:3920: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return (char[]) ArrayUtils.add(array, index, new Character(element), Character.TYPE);\n                                                     ^\nArrayUtils.java:3951: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n        return (byte[]) ArrayUtils.add(array, index, new Byte(element), Byte.TYPE);\n                                                     ^\nArrayUtils.java:3982: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n        return (short[]) ArrayUtils.add(array, index, new Short(element), Short.TYPE);\n                                                      ^\nArrayUtils.java:4013: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n        return (int[]) ArrayUtils.add(array, index, new Integer(element), Integer.TYPE);\n                                                    ^\nArrayUtils.java:4044: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n        return (long[]) ArrayUtils.add(array, index, new Long(element), Long.TYPE);\n                                                     ^\nArrayUtils.java:4075: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n        return (float[]) ArrayUtils.add(array, index, new Float(element), Float.TYPE);\n                                                      ^\nArrayUtils.java:4106: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n        return (double[]) ArrayUtils.add(array, index, new Double(element), Double.TYPE);\n                                                       ^\nNote: ArrayUtils.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n14 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>boolean</code> array\n * @return a <code>Boolean</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Boolean[] toObject(final boolean[] array){\n    return array == null ? null : Arrays.stream(array).mapToObj(Boolean::valueOf).toArray(Boolean[]::new);\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec017796", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils_toObject.java"}
{"generate_results": [{"generate_code": "public static Short[] toObject(final short[] array){\n    return ArrayUtils.toObject(array, Short.class);\n}", "errormessage": "compile error", "error_detail_message": "ArrayUtils.java:2573: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            result[i] = new Character(array[i]);\n                        ^\nArrayUtils.java:2641: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n            result[i] = new Long(array[i]);\n                        ^\nArrayUtils.java:2709: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            result[i] = new Integer(array[i]);\n                        ^\nArrayUtils.java:2762: error: no suitable method found for toObject(short[],Class<Short>)\n    return ArrayUtils.toObject(array, Short.class);\n                     ^\n    method ArrayUtils.toObject(char[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(long[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(int[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(short[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(byte[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(double[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(float[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ArrayUtils.toObject(boolean[]) is not applicable\n      (actual and formal argument lists differ in length)\nArrayUtils.java:2827: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n            result[i] = new Byte(array[i]);\n                        ^\nArrayUtils.java:2895: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n            result[i] = new Double(array[i]);\n                        ^\nArrayUtils.java:2963: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n            result[i] = new Float(array[i]);\n                        ^\nArrayUtils.java:3920: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return (char[]) ArrayUtils.add(array, index, new Character(element), Character.TYPE);\n                                                     ^\nArrayUtils.java:3951: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n        return (byte[]) ArrayUtils.add(array, index, new Byte(element), Byte.TYPE);\n                                                     ^\nArrayUtils.java:3982: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n        return (short[]) ArrayUtils.add(array, index, new Short(element), Short.TYPE);\n                                                      ^\nArrayUtils.java:4013: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n        return (int[]) ArrayUtils.add(array, index, new Integer(element), Integer.TYPE);\n                                                    ^\nArrayUtils.java:4044: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n        return (long[]) ArrayUtils.add(array, index, new Long(element), Long.TYPE);\n                                                     ^\nArrayUtils.java:4075: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n        return (float[]) ArrayUtils.add(array, index, new Float(element), Float.TYPE);\n                                                      ^\nArrayUtils.java:4106: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n        return (double[]) ArrayUtils.add(array, index, new Double(element), Double.TYPE);\n                                                       ^\nNote: ArrayUtils.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n13 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>short</code> array\n * @return a <code>Short</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Short[] toObject(final short[] array){\n    return ArrayUtils.toObject(array, Short.class);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179f1", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils_toObject.java"}
{"generate_results": [{"generate_code": "public static char[] toPrimitive(final Character[] array){\n    if(array == null) {\n        return null;\n    }\n    final int length = array.length;\n    final char[] result = new char[length];\n    for (int i = 0; i < length; i++) {\n        result[i] = array[i].charValue();\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Character</code> array, may be <code>null</code>\n * @return a <code>char</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static char[] toPrimitive(final Character[] array){\n    if(array == null) {\n        return null;\n    }\n    final int length = array.length;\n    final char[] result = new char[length];\n    for (int i = 0; i < length; i++) {\n        result[i] = array[i].charValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636766fe1a6d9265ec017838", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static Integer[] toObject(final int[] array){\n    return ArrayUtils.toObject(array);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2694)\n", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  an <code>int</code> array\n * @return an <code>Integer</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Integer[] toObject(final int[] array){\n    return ArrayUtils.toObject(array);\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec01790f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static Double[] toObject(final double[] array){\n    return ArrayUtils.toObject(array);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n\tat net.hasor.utils.ArrayUtils.toObject(ArrayUtils.java:2898)\n", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>double</code> array\n * @return a <code>Double</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Double[] toObject(final double[] array){\n    return ArrayUtils.toObject(array);\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a4", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\nif(str==null||prefix==null)return false;\nreturn ignoreCase?str.startsWith(prefix):str.regionMatches(0,prefix.length(),prefix,0);\n}", "errormessage": "compile error", "error_detail_message": "StringUtils.java:5821: error: incompatible types: int cannot be converted to String\nreturn ignoreCase?str.startsWith(prefix):str.regionMatches(0,prefix.length(),prefix,0);\n                                                                          ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2573: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            result[i] = new Character(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2641: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n            result[i] = new Long(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2709: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            result[i] = new Integer(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2777: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n            result[i] = new Short(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2845: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n            result[i] = new Byte(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2913: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n            result[i] = new Double(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2981: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n            result[i] = new Float(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:3938: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return (char[]) ArrayUtils.add(array, index, new Character(element), Character.TYPE);\n                                                     ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:3969: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n        return (byte[]) ArrayUtils.add(array, index, new Byte(element), Byte.TYPE);\n                                                     ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4000: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n        return (short[]) ArrayUtils.add(array, index, new Short(element), Short.TYPE);\n                                                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4031: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n        return (int[]) ArrayUtils.add(array, index, new Integer(element), Integer.TYPE);\n                                                    ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4062: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n        return (long[]) ArrayUtils.add(array, index, new Long(element), Long.TYPE);\n                                                     ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4093: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n        return (float[]) ArrayUtils.add(array, index, new Float(element), Float.TYPE);\n                                                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4124: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n        return (double[]) ArrayUtils.add(array, index, new Double(element), Double.TYPE);\n                                                       ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CharUtils.java:71: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            CharUtils.CHAR_ARRAY[i] = new Character((char) i);\n                                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CharUtils.java:105: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return new Character(ch);\n               ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n16 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "startsWith", "codes": ["private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\nif(str==null||prefix==null)return false;\nreturn ignoreCase?str.startsWith(prefix):str.regionMatches(0,prefix.length(),prefix,0);\n}"], "code_level": "self_contained", "_id": "636767151a6d9265ec017b6b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/StringUtils_startsWith.java"}
{"generate_results": [{"generate_code": "public static Character toCharacterObject(final char ch){\n    return new Character(ch);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>\n * @param ch  the character to convert\n * @return a Character of the specified character\n */\n", "method_name": "toCharacterObject", "codes": ["public static Character toCharacterObject(final char ch){\n    return new Character(ch);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01781c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toCharacterObject.class"}
{"generate_results": [{"generate_code": "public static boolean isAsciiAlphaUpper(final char ch){\n    return (ch >= 'A' && ch <= 'Z');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if between 65 and 90 inclusive\n */\n", "method_name": "isAsciiAlphaUpper", "codes": ["public static boolean isAsciiAlphaUpper(final char ch){\n    return (ch >= 'A' && ch <= 'Z');\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c1", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAsciiAlphaUpper.class"}
{"generate_results": [{"generate_code": "public static int length(final String str){\n    return str == null ? 0 : str.length();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n * @param str a String or <code>null</code>\n * @return String length or <code>0</code> if the String is <code>null</code>.\n * @since 2.4\n */\n", "method_name": "length", "codes": ["public static int length(final String str){\n    return str == null ? 0 : str.length();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179d9", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_length.class"}
{"generate_results": [{"generate_code": "public static String base64Decode(final String s){\n    byte[] decoded = Base64.getDecoder().decode(s);\n    return new String(decoded, StandardCharsets.UTF_8);\n}", "errormessage": "compile error", "error_detail_message": "CommonCodeUtils.java:92: error: cannot find symbol\n    byte[] decoded = Base64.getDecoder().decode(s);\n                           ^\n  symbol:   method getDecoder()\n  location: class Base64\n1 error\n", "is_pass": false}], "docstring": "/** \n * Decoding a string to a string follow the Base64 regular. \n */\n", "method_name": "base64Decode", "codes": ["public static String base64Decode(final String s){\n    byte[] decoded = Base64.getDecoder().decode(s);\n    return new String(decoded, StandardCharsets.UTF_8);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017748", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CommonCodeUtils_base64Decode.java"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1 == null && array2 == null) return true;\n    if(array1 != null && array2 != null) return array1.length == array2.length;\n    return false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1 == null && array2 == null) return true;\n    if(array1 != null && array2 != null) return array1.length == array2.length;\n    return false;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017663", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isSameLength.class"}
{"generate_results": [{"generate_code": "public static char[] clone(final char[] array){\n    return array.clone();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"[C.clone()\" because \"<parameter1>\" is null\n\tat net.hasor.utils.ArrayUtils.clone(ArrayUtils.java:223)\n\tat net.hasor.utils.ArrayUtils_clone.main(ArrayUtils_clone.java:23)\n", "is_pass": false}], "docstring": "/** \n * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  the array to clone, may be <code>null</code>\n * @return the cloned array, <code>null</code> if <code>null</code> input\n */\n", "method_name": "clone", "codes": ["public static char[] clone(final char[] array){\n    return array.clone();\n}"], "code_level": "self_contained", "_id": "636766f31a6d9265ec01768f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_clone.class"}
{"generate_results": [{"generate_code": "public static boolean isAscii(final char ch){\n    return (ch & 0x80) == 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\\n') = true CharUtils.isAscii('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 128\n */\n", "method_name": "isAscii", "codes": ["public static boolean isAscii(final char ch){\n    return (ch & 0x80) == 0;\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c3", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAscii.class"}
{"generate_results": [{"generate_code": "public static String toString(final char ch){\n    return new String(new char[]{ch});\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = \" \" CharUtils.toString('A')  = \"A\" </pre>\n * @param ch  the character to convert\n * @return a String containing the one specified character\n */\n", "method_name": "toString", "codes": ["public static String toString(final char ch){\n    return new String(new char[]{ch});\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec017a05", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toString.class"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n    final int newCapacity = this.capacity + size;\n    if(newCapacity > MAX_CAPACITY){\n        throw new IllegalArgumentException(\"Exceeds maximum capacity\");\n    }\n    final byte[] newData = new byte[newCapacity];\n    System.arraycopy(this.data, 0, newData, 0, this.length);\n    this.data = newData;\n    this.capacity = newCapacity;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:346: error: cannot find symbol\n    final int newCapacity = this.capacity + size;\n                                ^\n  symbol: variable capacity\nByteVector.java:347: error: cannot find symbol\n    if(newCapacity > MAX_CAPACITY){\n                     ^\n  symbol:   variable MAX_CAPACITY\n  location: class ByteVector\nByteVector.java:353: error: cannot find symbol\n    this.capacity = newCapacity;\n        ^\n  symbol: variable capacity\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n    final int newCapacity = this.capacity + size;\n    if(newCapacity > MAX_CAPACITY){\n        throw new IllegalArgumentException(\"Exceeds maximum capacity\");\n    }\n    final byte[] newData = new byte[newCapacity];\n    System.arraycopy(this.data, 0, newData, 0, this.length);\n    this.data = newData;\n    this.capacity = newCapacity;\n}"], "code_level": "class_runnable", "_id": "636767191a6d9265ec017c0f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ByteVector_enlarge.java"}
{"generate_results": [{"generate_code": "int addType(final String value){\n    // Your implementation here\n}", "errormessage": "compile error", "error_detail_message": "SymbolTable.java:1004: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n", "method_name": "addType", "codes": ["int addType(final String value){\n    // Your implementation here\n}"], "code_level": "project_runnable", "_id": "636766ef1a6d9265ec01761a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/SymbolTable_addType.java"}
{"generate_results": [{"generate_code": "public long readLong(final int offset){\n    return ((long)readInt(offset)) << 32 | (long)readInt(offset + 4);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reads a signed long value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readLong", "codes": ["public long readLong(final int offset){\n    return ((long)readInt(offset)) << 32 | (long)readInt(offset + 4);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01775b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readLong.class"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    // Check if the input parameters are valid\n    if (byteArrayValue == null || byteOffset < 0 || byteLength < 0) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n    // Calculate the total length of the byte vector after adding the new data\n    int totalLength = this.length + byteLength;\n    // If the total length exceeds the maximum capacity of the byte vector, resize it\n    if (totalLength > this.capacity) {\n        this.enlarge(totalLength);\n    }\n    // Copy the new data into the byte vector starting from the specified offset\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.length, byteLength);\n    // Update the length of the byte vector\n    this.length += byteLength;\n    return this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:332: error: cannot find symbol\n    if (totalLength > this.capacity) {\n                          ^\n  symbol: variable capacity\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset index of the first byte of byteArrayValue that must be copied.\n * @param byteLength number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    // Check if the input parameters are valid\n    if (byteArrayValue == null || byteOffset < 0 || byteLength < 0) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n    // Calculate the total length of the byte vector after adding the new data\n    int totalLength = this.length + byteLength;\n    // If the total length exceeds the maximum capacity of the byte vector, resize it\n    if (totalLength > this.capacity) {\n        this.enlarge(totalLength);\n    }\n    // Copy the new data into the byte vector starting from the specified offset\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.length, byteLength);\n    // Update the length of the byte vector\n    this.length += byteLength;\n    return this;\n}"], "code_level": "class_runnable", "_id": "6367671a1a6d9265ec017c15", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ByteVector_putByteArray.java"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n    final char c = descriptor.charAt(0);\n    switch(c){\n        case 'B':\n            popByte();\n            break;\n        case 'C':\n            popChar();\n            break;\n        case 'D':\n            popDouble();\n            break;\n        case 'F':\n            popFloat();\n            break;\n        case 'I':\n            popInt();\n            break;\n        case 'J':\n            popLong();\n            break;\n        case 'L':\n            popObject(descriptor.substring(1));\n            break;\n        case 'S':\n            popShort();\n            break;\n        default:\n            throw new RuntimeException(\"Invalid descriptor: \" + descriptor);\n    }\n}", "errormessage": "compile error", "error_detail_message": "Frame.java:548: error: cannot find symbol\n            popByte();\n            ^\n  symbol:   method popByte()\n  location: class Frame\nFrame.java:551: error: cannot find symbol\n            popChar();\n            ^\n  symbol:   method popChar()\n  location: class Frame\nFrame.java:554: error: cannot find symbol\n            popDouble();\n            ^\n  symbol:   method popDouble()\n  location: class Frame\nFrame.java:557: error: cannot find symbol\n            popFloat();\n            ^\n  symbol:   method popFloat()\n  location: class Frame\nFrame.java:560: error: cannot find symbol\n            popInt();\n            ^\n  symbol:   method popInt()\n  location: class Frame\nFrame.java:563: error: cannot find symbol\n            popLong();\n            ^\n  symbol:   method popLong()\n  location: class Frame\nFrame.java:566: error: cannot find symbol\n            popObject(descriptor.substring(1));\n            ^\n  symbol:   method popObject(String)\n  location: class Frame\nFrame.java:569: error: cannot find symbol\n            popShort();\n            ^\n  symbol:   method popShort()\n  location: class Frame\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n    final char c = descriptor.charAt(0);\n    switch(c){\n        case 'B':\n            popByte();\n            break;\n        case 'C':\n            popChar();\n            break;\n        case 'D':\n            popDouble();\n            break;\n        case 'F':\n            popFloat();\n            break;\n        case 'I':\n            popInt();\n            break;\n        case 'J':\n            popLong();\n            break;\n        case 'L':\n            popObject(descriptor.substring(1));\n            break;\n        case 'S':\n            popShort();\n            break;\n        default:\n            throw new RuntimeException(\"Invalid descriptor: \" + descriptor);\n    }\n}"], "code_level": "class_runnable", "_id": "636767021a6d9265ec0178b2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/Frame_pop.java"}
{"generate_results": [{"generate_code": "private void addInitializedType(final int abstractType){\n    // Add the abstract type to the initializations array\n    initializations[initializationCount++] = abstractType;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot store to int array because \"this.initializations\" is null\n\tat net.hasor.utils.asm.Frame.addInitializedType(Frame.java:565)\n\tat net.hasor.utils.asm.Frame_addInitializedType.main(Frame_addInitializedType.java:26)\n", "is_pass": false}], "docstring": "/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n", "method_name": "addInitializedType", "codes": ["private void addInitializedType(final int abstractType){\n    // Add the abstract type to the initializations array\n    initializations[initializationCount++] = abstractType;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a9", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Frame_addInitializedType.class"}
{"generate_results": [{"generate_code": "private void putAbstractTypes(final int start,final int end){\n    for (int i = start; i < end; ++i) {\n        currentFrame[i] = frame.get(i);\n    }\n}", "errormessage": "compile error", "error_detail_message": "MethodWriter.java:1734: error: cannot find symbol\n        currentFrame[i] = frame.get(i);\n                          ^\n  symbol:   variable frame\n  location: class MethodWriter\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts some abstract types of  {@link #currentFrame} in {@link #stackMapTableEntries} , using theJVMS verification_type_info format used in StackMapTable attributes.\n * @param start index of the first type in {@link #currentFrame} to write.\n * @param end index of last type in {@link #currentFrame} to write (exclusive).\n */\n", "method_name": "putAbstractTypes", "codes": ["private void putAbstractTypes(final int start,final int end){\n    for (int i = start; i < end; ++i) {\n        currentFrame[i] = frame.get(i);\n    }\n}"], "code_level": "project_runnable", "_id": "6367670a1a6d9265ec0179dc", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/MethodWriter_putAbstractTypes.java"}
{"generate_results": [{"generate_code": "public short readShort(final int offset){\n    return (short) ((classFileBuffer[offset] & 0xFF) << 8 | (classFileBuffer[offset + 1] & 0xFF));\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reads a signed short value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readShort", "codes": ["public short readShort(final int offset){\n    return (short) ((classFileBuffer[offset] & 0xFF) << 8 | (classFileBuffer[offset + 1] & 0xFF));\n}"], "code_level": "class_runnable", "_id": "636766f21a6d9265ec017667", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readShort.class"}
{"generate_results": [{"generate_code": "protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n    for (Label label : labels) {\n        if (label.getBytecodeOffset() == bytecodeOffset) {\n            return label;\n        }\n    }\n    final Label label = createLabel(bytecodeOffset,labels);\n    labels[label.getBytecodeOffset()] = label;\n    return label;\n}", "errormessage": "compile error", "error_detail_message": "ClassReader.java:2270: error: cannot find symbol\n        if (label.getBytecodeOffset() == bytecodeOffset) {\n                 ^\n  symbol:   method getBytecodeOffset()\n  location: variable label of type Label\nClassReader.java:2275: error: cannot find symbol\n    labels[label.getBytecodeOffset()] = label;\n                ^\n  symbol:   method getBytecodeOffset()\n  location: variable label of type Label\nNote: ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n", "method_name": "readLabel", "codes": ["protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n    for (Label label : labels) {\n        if (label.getBytecodeOffset() == bytecodeOffset) {\n            return label;\n        }\n    }\n    final Label label = createLabel(bytecodeOffset,labels);\n    labels[label.getBytecodeOffset()] = label;\n    return label;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017853", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader_readLabel.java"}
{"generate_results": [{"generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    final int utfOffset = constantPoolEntryIndex * 2 + 8;\n    return readUtf(utfOffset,utfLength,charBuffer);\n}", "errormessage": "compile error", "error_detail_message": "ClassReader.java:3158: error: cannot find symbol\n    return readUtf(utfOffset,utfLength,charBuffer);\n                             ^\n  symbol:   variable utfLength\n  location: class ClassReader\nNote: ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}.\n * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pooltable.\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficientlylarge. It is not automatically resized.\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\n */\n", "method_name": "readUtf", "codes": ["final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    final int utfOffset = constantPoolEntryIndex * 2 + 8;\n    return readUtf(utfOffset,utfLength,charBuffer);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01782a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader_readUtf.java"}
{"generate_results": [{"generate_code": "@Override public int hashCode(){\nreturn getClass().getName().hashCode();\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a hash code value for this type.\n * @return a hash code value for this type.\n */\n", "method_name": "hashCode", "codes": ["@Override public int hashCode(){\nreturn getClass().getName().hashCode();\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017758", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Type_hashCode.class"}
{"generate_results": [{"generate_code": "int addConstantNameAndType(final String name,final String descriptor){\n    final int constantPoolIndex = putConstantPool(new ByteVector().putUTF8(name).putUTF8(descriptor));\n    return constantPoolIndex;\n}", "errormessage": "compile error", "error_detail_message": "SymbolTable.java:650: error: incompatible types: void cannot be converted to int\n    final int constantPoolIndex = putConstantPool(new ByteVector().putUTF8(name).putUTF8(descriptor));\n                                                 ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n", "method_name": "addConstantNameAndType", "codes": ["int addConstantNameAndType(final String name,final String descriptor){\n    final int constantPoolIndex = putConstantPool(new ByteVector().putUTF8(name).putUTF8(descriptor));\n    return constantPoolIndex;\n}"], "code_level": "project_runnable", "_id": "636766fe1a6d9265ec017823", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/SymbolTable_addConstantNameAndType.java"}
{"generate_results": [{"generate_code": "final void addLineNumber(final int lineNumber){\n    this.lineNumbers.add(lineNumber);\n}", "errormessage": "compile error", "error_detail_message": "Label.java:297: error: cannot find symbol\n    this.lineNumbers.add(lineNumber);\n        ^\n  symbol: variable lineNumbers\n1 error\n", "is_pass": false}], "docstring": "/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n", "method_name": "addLineNumber", "codes": ["final void addLineNumber(final int lineNumber){\n    this.lineNumbers.add(lineNumber);\n}"], "code_level": "class_runnable", "_id": "636767131a6d9265ec017b23", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/Label_addLineNumber.java"}
{"generate_results": [{"generate_code": "public static int indexOfLastSeparator(String filename){\n    return filename.lastIndexOf(File.separatorChar);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.lastIndexOf(int)\" because \"<parameter1>\" is null\n\tat net.hasor.utils.io.FilenameUtils.indexOfLastSeparator(FilenameUtils.java:617)\n\tat net.hasor.utils.io.FilenameUtils_indexOfLastSeparator.main(FilenameUtils_indexOfLastSeparator.java:18)\n", "is_pass": false}], "docstring": "/** \n * Returns the index of the last directory separator character. <p> This method will handle a file in either Unix or Windows format. The position of the last forward or backslash is returned. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfLastSeparator", "codes": ["public static int indexOfLastSeparator(String filename){\n    return filename.lastIndexOf(File.separatorChar);\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017658", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FilenameUtils_indexOfLastSeparator.class"}
{"generate_results": [{"generate_code": "public static void forceDeleteOnExit(File file) throws IOException {\n    if (file.isDirectory()) {\n        deleteDirectoryOnExit(file);\n    }\n    file.deleteOnExit();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.\n * @param file  file or directory to delete, must not be {@code null}\n * @throws NullPointerException if the file is {@code null}\n * @throws IOException in case deletion is unsuccessful\n */\n", "method_name": "forceDeleteOnExit", "codes": ["public static void forceDeleteOnExit(File file) throws IOException {\n    if (file.isDirectory()) {\n        deleteDirectoryOnExit(file);\n    }\n    file.deleteOnExit();\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017833", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FileUtils_forceDeleteOnExit.class"}
{"generate_results": [{"generate_code": "public static int indexOfExtension(String filename){\n    // Your implementation here\n}", "errormessage": "compile error", "error_detail_message": "FilenameUtils.java:639: error: missing return statement\n}    //-----------------------------------------------------------------------\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns the index of the last extension separator character, which is a dot. <p> This method also checks that there is no directory separator after the last dot. To do this it uses  {@link #indexOfLastSeparator(String)} which willhandle a file in either Unix or Windows format. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfExtension", "codes": ["public static int indexOfExtension(String filename){\n    // Your implementation here\n}"], "code_level": "class_runnable", "_id": "636767061a6d9265ec01794a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/FilenameUtils_indexOfExtension.java"}
{"generate_results": [{"generate_code": "@Override public void write(byte b[]) throws IOException {\n    // Your implementation here\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes <code>b.length</code> bytes from the specified byte array to this output stream.\n * @param b The array of bytes to be written.\n * @exception IOException if an error occurs.\n */\n", "method_name": "write", "codes": ["@Override public void write(byte b[]) throws IOException {\n    // Your implementation here\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179fe", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/output/ThresholdingOutputStream_write.class"}
{"generate_results": [{"generate_code": "@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    // Validate the input parameters\n    if (b == null || off < 0 || len < 0 || off + len > b.length) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    // Write the bytes to the output stream\n    for (int i = off; i < off + len; i++) {\n        this.buf[this.count++] = b[i];\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.\n * @param b   the data.\n * @param off the start offset in the data.\n * @param len the number of bytes to write.\n */\n", "method_name": "write", "codes": ["@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    // Validate the input parameters\n    if (b == null || off < 0 || len < 0 || off + len > b.length) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    // Write the bytes to the output stream\n    for (int i = off; i < off + len; i++) {\n        this.buf[this.count++] = b[i];\n    }\n}"], "code_level": "class_runnable", "_id": "636766f91a6d9265ec01776e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/output/Base64OutputStream_write.class"}
{"generate_results": [{"generate_code": "@Override public void write(final byte[] b) throws IOException {\n    this.write(b, 0, b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @see OutputStream#write(byte[]) \n */\n", "method_name": "write", "codes": ["@Override public void write(final byte[] b) throws IOException {\n    this.write(b, 0, b.length);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179d8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/output/WriterOutputStream_write.class"}
{"generate_results": [{"generate_code": "public String toString(){\n    return sb.toString();\n}", "errormessage": "compile error", "error_detail_message": "ReflectionToStringBuilder.java:667: error: cannot find symbol\n    return sb.toString();\n           ^\n  symbol:   variable sb\n  location: class ReflectionToStringBuilder\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1520: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1541: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p> Gets the String built by this builder. </p>\n * @return the built string\n */\n", "method_name": "toString", "codes": ["public String toString(){\n    return sb.toString();\n}"], "code_level": "project_runnable", "_id": "636767001a6d9265ec01787e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ReflectionToStringBuilder_toString.java"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    // Check if the array is null\n    if(array == null){\n        // Append the null text to the buffer\n        append(buffer,nullText);\n        return;\n    }\n    // Get the length of the array\n    int length = array.length;\n    // Start appending the array start to the buffer\n    append(buffer,arrayStart);\n    // Loop through each element in the array\n    for(int i = 0; i < length; i++){\n        // Append the element to the buffer\n        append(buffer,Integer.toString(array[i]));\n        // If it's not the last element, append the array separator\n        if(i < length - 1){\n            append(buffer,arraySeparator);\n        }\n    }\n    // End appending the array end to the buffer\n    append(buffer,arrayEnd);\n}", "errormessage": "compile error", "error_detail_message": "ToStringStyle.java:966: error: no suitable method found for append(StringBuffer,String)\n        append(buffer,nullText);\n        ^\n    method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\nToStringStyle.java:972: error: no suitable method found for append(StringBuffer,String)\n    append(buffer,arrayStart);\n    ^\n    method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\nToStringStyle.java:976: error: no suitable method found for append(StringBuffer,String)\n        append(buffer,Integer.toString(array[i]));\n        ^\n    method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\nToStringStyle.java:979: error: no suitable method found for append(StringBuffer,String)\n            append(buffer,arraySeparator);\n            ^\n    method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\nToStringStyle.java:983: error: no suitable method found for append(StringBuffer,String)\n    append(buffer,arrayEnd);\n    ^\n    method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n      (actual and formal argument lists differ in length)\nToStringStyle.java:1523: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\nToStringStyle.java:1544: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n5 errors\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    // Check if the array is null\n    if(array == null){\n        // Append the null text to the buffer\n        append(buffer,nullText);\n        return;\n    }\n    // Get the length of the array\n    int length = array.length;\n    // Start appending the array start to the buffer\n    append(buffer,arrayStart);\n    // Loop through each element in the array\n    for(int i = 0; i < length; i++){\n        // Append the element to the buffer\n        append(buffer,Integer.toString(array[i]));\n        // If it's not the last element, append the array separator\n        if(i < length - 1){\n            append(buffer,arraySeparator);\n        }\n    }\n    // End appending the array end to the buffer\n    append(buffer,arrayEnd);\n}"], "code_level": "class_runnable", "_id": "636767001a6d9265ec01787f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle_appendDetail.java"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return EMPTY_STRING_ARRAY;\n    }else{\n        return collection.toArray(new String[0]);\n    }\n}", "errormessage": "compile error", "error_detail_message": "ReflectionToStringBuilder.java:314: error: cannot find symbol\n        return EMPTY_STRING_ARRAY;\n               ^\n  symbol:   variable EMPTY_STRING_ARRAY\n  location: class ReflectionToStringBuilder\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1520: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1541: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.\n * @param collection The collection to convert\n * @return A new array of Strings.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return EMPTY_STRING_ARRAY;\n    }else{\n        return collection.toArray(new String[0]);\n    }\n}"], "code_level": "project_runnable", "_id": "636766f71a6d9265ec017730", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ReflectionToStringBuilder_toNoNullStringArray.java"}
{"generate_results": [{"generate_code": "static void register(Object value){\n    if(value != null){\n        REGISTRY.set(value);\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ClassCastException: class java.lang.String cannot be cast to class java.util.WeakHashMap (java.lang.String and java.util.WeakHashMap are in module java.base of loader 'bootstrap')\n\tat net.hasor.utils.builder.ToStringStyle_register.main(ToStringStyle_register.java:19)\n", "is_pass": false}], "docstring": "/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n", "method_name": "register", "codes": ["static void register(Object value){\n    if(value != null){\n        REGISTRY.set(value);\n    }\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec017911", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ToStringStyle_register.class"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    // Append the field name\n    buffer.append(fieldName).append(\": \");\n    // Append the byte array length\n    buffer.append(array.length).append(\" bytes: \");\n    // Append each byte in the array\n    for (int i = 0; i < array.length; i++) {\n        buffer.append(array[i]).append(\" \");\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    // Append the field name\n    buffer.append(fieldName).append(\": \");\n    // Append the byte array length\n    buffer.append(array.length).append(\" bytes: \");\n    // Append each byte in the array\n    for (int i = 0; i < array.length; i++) {\n        buffer.append(array[i]).append(\" \");\n    }\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017821", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ToStringStyle_appendDetail.class"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Object[] array){\n    if(array.length==0){\n        throw new IllegalArgumentException(\"array length must greater than 0\");\n    }\n    ArrayList<String> list=new ArrayList<>();\n    for(int i=0;i<array.length;i++){\n        Object obj=array[i];\n        if(obj!=null){\n            list.add(obj.toString());\n        }\n    }\n    return list.toArray(new String[0]);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}if an array element is <code>null</code>.\n * @param array The array to check\n * @return The given array or a new array without null.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Object[] array){\n    if(array.length==0){\n        throw new IllegalArgumentException(\"array length must greater than 0\");\n    }\n    ArrayList<String> list=new ArrayList<>();\n    for(int i=0;i<array.length;i++){\n        Object obj=array[i];\n        if(obj!=null){\n            list.add(obj.toString());\n        }\n    }\n    return list.toArray(new String[0]);\n}"], "code_level": "project_runnable", "_id": "636766fc1a6d9265ec0177ef", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ReflectionToStringBuilder_toNoNullStringArray.class"}
{"generate_results": [{"generate_code": "@Override public int available() throws IOException {\n    return buffer.length - index;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"this.buffer\" is null\n\tat net.hasor.utils.io.input.ReaderInputStream.available(ReaderInputStream.java:114)\n\tat net.hasor.utils.io.input.ReaderInputStream_available.main(ReaderInputStream_available.java:22)\n", "is_pass": false}], "docstring": "/** \n * @see InputStream#available() \n */\n", "method_name": "available", "codes": ["@Override public int available() throws IOException {\n    return buffer.length - index;\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017641", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/input/ReaderInputStream_available.class"}
{"generate_results": [{"generate_code": "public static <T>List<T> asList(T[] a){\n    if(a==null)return Collections.emptyList();\n    return Arrays.asList(a);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Array to List. <p> Works like  {@link Arrays#asList(Object)}, but handles null arrays.\n * @return a list backed by the array.\n */\n", "method_name": "asList", "codes": ["public static <T>List<T> asList(T[] a){\n    if(a==null)return Collections.emptyList();\n    return Arrays.asList(a);\n}"], "code_level": "slib_runnable", "_id": "636766f01a6d9265ec017639", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/json/TypeUtil_asList.class"}
{"generate_results": [{"generate_code": "public static byte convertHexDigit(byte b){\n    return (byte) ((b >= '0' && b <= '9') ? b - '0' : (b >= 'A' && b <= 'F') ? b - 'A' + 10 : (b >= 'a' && b <= 'f') ? b - 'a' + 10 : 0);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @param b An ASCII encoded character 0-9 a-f A-F\n * @return The byte value of the character 0-16.\n */\n", "method_name": "convertHexDigit", "codes": ["public static byte convertHexDigit(byte b){\n    return (byte) ((b >= '0' && b <= '9') ? b - '0' : (b >= 'A' && b <= 'F') ? b - 'A' + 10 : (b >= 'a' && b <= 'f') ? b - 'a' + 10 : 0);\n}"], "code_level": "slib_runnable", "_id": "636766f91a6d9265ec01777d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/json/TypeUtil_convertHexDigit.class"}
{"generate_results": [{"generate_code": "public Converter lookup(final Class<?> clazz){\n    return converters.get(clazz);\n}", "errormessage": "compile error", "error_detail_message": "ConverterBean.java:473: error: incompatible types: Object cannot be converted to Converter\n    return converters.get(clazz);\n                         ^\nNote: ConverterBean.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Look up and return any registered  {@link Converter} for the specifieddestination class; if there is no registered Converter, return <code>null</code>.\n * @param clazz Class for which to return a registered Converter\n * @return The registered {@link Converter} or <code>null</code> if not found\n */\n", "method_name": "lookup", "codes": ["public Converter lookup(final Class<?> clazz){\n    return converters.get(clazz);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179e7", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/convert/ConverterBean_lookup.java"}
{"generate_results": [{"generate_code": "@Override public boolean containsKey(final Object key){\n    return this.map.containsKey(key);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return <code>true</code> if this map contains a mapping for the specified key.\n * @param key  the key to be searched for\n * @return true if the map contains the key\n */\n", "method_name": "containsKey", "codes": ["@Override public boolean containsKey(final Object key){\n    return this.map.containsKey(key);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179f2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/convert/WeakFastHashMap_containsKey.class"}
{"generate_results": [{"generate_code": "private static String[] copyStrings(final String[] src){\n    final int length = src.length;\n    final String[] result = new String[length];\n    for(int i=0;i<length;i++){\n        result[i] = src[i].toLowerCase();\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n", "method_name": "copyStrings", "codes": ["private static String[] copyStrings(final String[] src){\n    final int length = src.length;\n    final String[] result = new String[length];\n    for(int i=0;i<length;i++){\n        result[i] = src[i].toLowerCase();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636767041a6d9265ec0178f8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/convert/convert/BooleanConverter_copyStrings.class"}
{"generate_results": [{"generate_code": "@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n    if (value == null || \"\".equals(value.toString())) {\n        return getDefaultType(type);\n    }\n    final String[] values = value.toString().split(\",\");\n    if (values.length > 0) {\n        return values[0];\n    }\n    throw new IllegalArgumentException(\"Invalid value: \" + value);\n}", "errormessage": "compile error", "error_detail_message": "CharacterConverter.java:79: error: method getDefaultType in class CharacterConverter cannot be applied to given types;\n        return getDefaultType(type);\n               ^\n  required: no arguments\n  found:    Class<CAP#1>\n  reason: actual and formal argument lists differ in length\n  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n1 error\n", "is_pass": false}], "docstring": "/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n", "method_name": "convertToType", "codes": ["@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n    if (value == null || \"\".equals(value.toString())) {\n        return getDefaultType(type);\n    }\n    final String[] values = value.toString().split(\",\");\n    if (values.length > 0) {\n        return values[0];\n    }\n    throw new IllegalArgumentException(\"Invalid value: \" + value);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bf", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/convert/convert/CharacterConverter_convertToType.java"}
{"generate_results": [{"generate_code": "public Collection<Object> values(){\n    return Collections.unmodifiableCollection(methods.values());\n}", "errormessage": "compile error", "error_detail_message": "BeanMap.java:307: error: cannot find symbol\n    return Collections.unmodifiableCollection(methods.values());\n                                              ^\n  symbol:   variable methods\n  location: class BeanMap\nNote: BeanMap.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns the values for the BeanMap.\n * @return values for the BeanMap. The returned collection is not modifiable.\n */\n", "method_name": "values", "codes": ["public Collection<Object> values(){\n    return Collections.unmodifiableCollection(methods.values());\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec01764f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ref/BeanMap_values.java"}
{"generate_results": [{"generate_code": "public void putAllWriteable(BeanMap map){\n    for (String name : map.keySet()) {\n        Method readMethod = map.getReadMethod(name);\n        Method writeMethod = map.getWriteMethod(name);\n        if (readMethod != null && writeMethod != null) {\n            put(name, writeMethod);\n        }\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Puts all of the writable properties from the given BeanMap into this BeanMap. Read-only and Write-only properties will be ignored.\n * @param map  the BeanMap whose properties to put\n */\n", "method_name": "putAllWriteable", "codes": ["public void putAllWriteable(BeanMap map){\n    for (String name : map.keySet()) {\n        Method readMethod = map.getReadMethod(name);\n        Method writeMethod = map.getWriteMethod(name);\n        if (readMethod != null && writeMethod != null) {\n            put(name, writeMethod);\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636767071a6d9265ec017962", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ref/BeanMap_putAllWriteable.class"}
{"generate_results": [{"generate_code": "public long contentLength(){\n    try{\n        return Long.parseLong(getContentLength());\n    }catch(NumberFormatException e){\n        return 0L;\n    }\n}", "errormessage": "compile error", "error_detail_message": "ServletRequestContext.java:62: error: cannot find symbol\n        return Long.parseLong(getContentLength());\n                              ^\n  symbol:   method getContentLength()\n  location: class ServletRequestContext\n1 error\n", "is_pass": false}], "docstring": "/** \n * Retrieve the content length of the request.\n * @return The content length of the request.\n * @since 1.3\n */\n", "method_name": "contentLength", "codes": ["public long contentLength(){\n    try{\n        return Long.parseLong(getContentLength());\n    }catch(NumberFormatException e){\n        return 0L;\n    }\n}"], "code_level": "project_runnable", "_id": "636767031a6d9265ec0178dd", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/ServletRequestContext_contentLength.java"}
{"generate_results": [{"generate_code": "private int parseEndOfLine(String headerPart,int end){\n    // Implementation goes here\n}", "errormessage": "compile error", "error_detail_message": "FileUpload.java:341: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n", "method_name": "parseEndOfLine", "codes": ["private int parseEndOfLine(String headerPart,int end){\n    // Implementation goes here\n}"], "code_level": "self_contained", "_id": "636767121a6d9265ec017b0a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/FileUpload_parseEndOfLine.java"}
{"generate_results": [{"generate_code": "protected int findByte(byte value,int pos){\n    // Implementation goes here\n}", "errormessage": "compile error", "error_detail_message": "MultipartStream.java:381: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n", "method_name": "findByte", "codes": ["protected int findByte(byte value,int pos){\n    // Implementation goes here\n}"], "code_level": "class_runnable", "_id": "636766ff1a6d9265ec017851", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/MultipartStream_findByte.java"}
{"generate_results": [{"generate_code": "public byte readByte() throws IOException {\n    if (head >= tail) {\n        refillBuffer();\n    }\n    return buffer[head++];\n}", "errormessage": "compile error", "error_detail_message": "MultipartStream.java:188: error: cannot find symbol\n        refillBuffer();\n        ^\n  symbol:   method refillBuffer()\n  location: class MultipartStream\n1 error\n", "is_pass": false}], "docstring": "/** \n * Reads a byte from the <code>buffer</code>, and refills it as necessary.\n * @return The next byte from the input stream.\n * @throws IOException if there is no more data available.\n */\n", "method_name": "readByte", "codes": ["public byte readByte() throws IOException {\n    if (head >= tail) {\n        refillBuffer();\n    }\n    return buffer[head++];\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01774b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/MultipartStream_readByte.java"}
{"generate_results": [{"generate_code": "private String parseToken(final char[] terminators){\n    int pos = 0;\n    while (pos < this.token.length && !MimeUtility.isTerminator(this.token[pos],terminators)){\n        pos++;\n    }\n    return new String(this.token,0,pos);\n}", "errormessage": "compile error", "error_detail_message": "ParameterParser.java:115: error: cannot find symbol\n    while (pos < this.token.length && !MimeUtility.isTerminator(this.token[pos],terminators)){\n                     ^\n  symbol: variable token\nParameterParser.java:115: error: cannot find symbol\n    while (pos < this.token.length && !MimeUtility.isTerminator(this.token[pos],terminators)){\n                                                                    ^\n  symbol: variable token\nParameterParser.java:118: error: cannot find symbol\n    return new String(this.token,0,pos);\n                          ^\n  symbol: variable token\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n", "method_name": "parseToken", "codes": ["private String parseToken(final char[] terminators){\n    int pos = 0;\n    while (pos < this.token.length && !MimeUtility.isTerminator(this.token[pos],terminators)){\n        pos++;\n    }\n    return new String(this.token,0,pos);\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec01779c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/ParameterParser_parseToken.java"}
{"generate_results": [{"generate_code": "public static boolean arrayequals(byte[] a,byte[] b,int count){\n    for(int i=0;i<count;i++){\n        if(a[i]!=b[i]){\n            return false;\n        }\n    }\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares <code>count</code> first bytes in the arrays <code>a</code> and <code>b</code>.\n * @param a     The first array to compare.\n * @param b     The second array to compare.\n * @param count How many bytes should be compared.\n * @return <code>true</code> if <code>count</code> first bytes in arrays<code>a</code> and <code>b</code> are equal.\n */\n", "method_name": "arrayequals", "codes": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n    for(int i=0;i<count;i++){\n        if(a[i]!=b[i]){\n            return false;\n        }\n    }\n    return true;\n}"], "code_level": "self_contained", "_id": "636766fd1a6d9265ec017814", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/MultipartStream_arrayequals.class"}
{"generate_results": [{"generate_code": "public static int lastIndexOf(String str,String searchStr){\n    if(StringUtils.isEmpty(str)){\n        return INDEXNOTFOUND;\n    }\n    return str.lastIndexOf(searchStr);\n}", "errormessage": "compile error", "error_detail_message": "StringUdfSource.java:162: error: cannot find symbol\n        return INDEXNOTFOUND;\n               ^\n  symbol:   variable INDEXNOTFOUND\n  location: class StringUdfSource\n1 error\n", "is_pass": false}], "docstring": "/** \n * Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}. \n */\n", "method_name": "lastIndexOf", "codes": ["public static int lastIndexOf(String str,String searchStr){\n    if(StringUtils.isEmpty(str)){\n        return INDEXNOTFOUND;\n    }\n    return str.lastIndexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636766f61a6d9265ec017701", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/src/main/java/net/hasor/dataql/fx/basic/StringUdfSource_lastIndexOf.java"}
{"generate_results": [{"generate_code": "public static String sub(String str,int start,int end){\n    try{\n        return str.substring(start,end);\n    }catch(Exception e){\n        return \"\";\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Gets a substring from the specified String avoiding exceptions. \n */\n", "method_name": "sub", "codes": ["public static String sub(String str,int start,int end){\n    try{\n        return str.substring(start,end);\n    }catch(Exception e){\n        return \"\";\n    }\n}"], "code_level": "project_runnable", "_id": "636766ff1a6d9265ec01783b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_sub.class"}
{"generate_results": [{"generate_code": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    for (String searchStr : searchStrArray) {\n        if (str.equalsIgnoreCase(searchStr)) {\n            return true;\n        }\n    }\n    return false;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.equalsIgnoreCase(String)\" because \"<parameter1>\" is null\n\tat net.hasor.dataql.fx.basic.StringUdfSource.containsAnyIgnoreCase(StringUdfSource.java:213)\n\tat net.hasor.dataql.fx.basic.StringUdfSource_containsAnyIgnoreCase.main(StringUdfSource_containsAnyIgnoreCase.java:26)\n", "is_pass": false}], "docstring": "/** \n * Case in-sensitive Checks if the String contains any character in the given set of string. \n */\n", "method_name": "containsAnyIgnoreCase", "codes": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    for (String searchStr : searchStrArray) {\n        if (str.equalsIgnoreCase(searchStr)) {\n            return true;\n        }\n    }\n    return false;\n}"], "code_level": "project_runnable", "_id": "6367670b1a6d9265ec017a0f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_containsAnyIgnoreCase.class"}
{"generate_results": [{"generate_code": "public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.indexOf(String)\" because \"<parameter1>\" is null\n\tat net.hasor.dataql.fx.basic.StringUdfSource.indexOf(StringUdfSource.java:135)\n\tat net.hasor.dataql.fx.basic.StringUdfSource_indexOf.main(StringUdfSource_indexOf.java:11)\n", "is_pass": false}], "docstring": "/** \n * Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}. \n */\n", "method_name": "indexOf", "codes": ["public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bc", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_indexOf.class"}
{"generate_results": [{"generate_code": "private static boolean isParameterSeparator(final char c){\n    return PARAMETER_SEPARATORS[c];\n}", "errormessage": "compile error", "error_detail_message": "ParsedSql.java:214: error: incompatible types: char cannot be converted to boolean\n    return PARAMETER_SEPARATORS[c];\n                               ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n", "method_name": "isParameterSeparator", "codes": ["private static boolean isParameterSeparator(final char c){\n    return PARAMETER_SEPARATORS[c];\n}"], "code_level": "class_runnable", "_id": "636766fc1a6d9265ec0177da", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-db/src/main/java/net/hasor/db/jdbc/core/ParsedSql_isParameterSeparator.java"}
{"generate_results": [{"generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    final int length = Array.getLength(array);\n    final Object result = Array.newInstance(newArrayComponentType,length+1);\n    System.arraycopy(array,0,result,0,length);\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat java.base/java.lang.reflect.Array.getLength(Native Method)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils.copyArrayGrow1(ArrayUtils.java:52)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils.add(ArrayUtils.java:46)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils_copyArrayGrow1.main(ArrayUtils_copyArrayGrow1.java:14)\n", "is_pass": false}], "docstring": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n", "method_name": "copyArrayGrow1", "codes": ["private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    final int length = Array.getLength(array);\n    final Object result = Array.newInstance(newArrayComponentType,length+1);\n    System.arraycopy(array,0,result,0,length);\n    return result;\n}"], "code_level": "slib_runnable", "_id": "636767031a6d9265ec0178ef", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-rsf/rsf-framework/target/classes/net/hasor/rsf/protocol/rsf/v1/ArrayUtils_copyArrayGrow1.class"}
{"generate_results": [{"generate_code": "public static String sessionId(){\n    return ServletUtil.getSession().getId();\n}", "errormessage": "compile error", "error_detail_message": "WebUdfSource.java:274: error: cannot find symbol\n    return ServletUtil.getSession().getId();\n           ^\n  symbol:   variable ServletUtil\n  location: class WebUdfSource\n1 error\n", "is_pass": false}], "docstring": "/** \n * Session ID. \n */\n", "method_name": "sessionId", "codes": ["public static String sessionId(){\n    return ServletUtil.getSession().getId();\n}"], "code_level": "plib_runnable", "_id": "636766fe1a6d9265ec017834", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/src/main/java/net/hasor/dataql/fx/web/WebUdfSource_sessionId.java"}
{"generate_results": [{"generate_code": "public Boolean isPartialContentResponse(){\n    return false;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Check if the actual response is a Partial Content (HTTP 206 code)\n * @return is partial content or not\n */\n", "method_name": "isPartialContentResponse", "codes": ["public Boolean isPartialContentResponse(){\n    return false;\n}"], "code_level": "plib_runnable", "_id": "636766ae1a6d9265ec0175dc", "project_name": "framework-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/target/classes/org/demoiselle/jee/crud/pagination/PaginationHelper_isPartialContentResponse.class"}
{"generate_results": [{"generate_code": "private String buildContentRange(){\n    int offset = 0;\n    int limit = 0;\n    int count = 0;\n    // Get the offset and limit values from the request\n    if (request.getHeaderValue(ReservedHTTPHeaders.OFFSET) != null) {\n        offset = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.OFFSET));\n    }\n    if (request.getHeaderValue(ReservedHTTPHeaders.LIMIT) != null) {\n        limit = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.LIMIT));\n    }\n    // Calculate the count based on the offset and limit values\n    if (limit == 0) {\n        count = drc.getCount() - 1;\n    } else {\n        count = Math.min(limit, drc.getCount());\n    }\n    // Build the content range string\n    return \"bytes \" + offset + \"-\" + (count - 1) + \"/\" + drc.getCount();\n}", "errormessage": "compile error", "error_detail_message": "PaginationHelper.java:97: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n                drc.setOffset(new Integer(0));\n                              ^\nPaginationHelper.java:165: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setOffset(new Integer(offset));\n                                  ^\nPaginationHelper.java:166: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setLimit(new Integer(limit));\n                                 ^\nPaginationHelper.java:230: error: cannot find symbol\n    if (request.getHeaderValue(ReservedHTTPHeaders.OFFSET) != null) {\n                                                  ^\n  symbol:   variable OFFSET\n  location: class ReservedHTTPHeaders\nPaginationHelper.java:230: error: cannot find symbol\n    if (request.getHeaderValue(ReservedHTTPHeaders.OFFSET) != null) {\n        ^\n  symbol:   variable request\n  location: class PaginationHelper\nPaginationHelper.java:231: error: cannot find symbol\n        offset = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.OFFSET));\n                                                                            ^\n  symbol:   variable OFFSET\n  location: class ReservedHTTPHeaders\nPaginationHelper.java:231: error: cannot find symbol\n        offset = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.OFFSET));\n                                  ^\n  symbol:   variable request\n  location: class PaginationHelper\nPaginationHelper.java:233: error: cannot find symbol\n    if (request.getHeaderValue(ReservedHTTPHeaders.LIMIT) != null) {\n                                                  ^\n  symbol:   variable LIMIT\n  location: class ReservedHTTPHeaders\nPaginationHelper.java:233: error: cannot find symbol\n    if (request.getHeaderValue(ReservedHTTPHeaders.LIMIT) != null) {\n        ^\n  symbol:   variable request\n  location: class PaginationHelper\nPaginationHelper.java:234: error: cannot find symbol\n        limit = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.LIMIT));\n                                                                           ^\n  symbol:   variable LIMIT\n  location: class ReservedHTTPHeaders\nPaginationHelper.java:234: error: cannot find symbol\n        limit = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.LIMIT));\n                                 ^\n  symbol:   variable request\n  location: class PaginationHelper\nPaginationHelper.java:238: error: incompatible types: possible lossy conversion from long to int\n        count = drc.getCount() - 1;\n                               ^\nPaginationHelper.java:240: error: incompatible types: possible lossy conversion from long to int\n        count = Math.min(limit, drc.getCount());\n                        ^\nPaginationHelper.java:308: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            drc.setOffset(new Integer(0));\n                          ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:28: error: package io.swagger.annotations does not exist\nimport io.swagger.annotations.ApiOperation;\n                             ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:29: error: package io.swagger.jaxrs does not exist\nimport io.swagger.jaxrs.PATCH;\n                       ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:49: error: cannot find symbol\n    @ApiOperation(value = \"persist entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:57: error: cannot find symbol\n    @ApiOperation(value = \"full update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:63: error: cannot find symbol\n    @PATCH\n     ^\n  symbol:   class PATCH\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:66: error: cannot find symbol\n    @ApiOperation(value = \"partial update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:75: error: cannot find symbol\n    @ApiOperation(value = \"remove entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:84: error: cannot find symbol\n    @ApiOperation(value = \"find by ID\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n18 errors\n4 warnings\n", "is_pass": false}], "docstring": "/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n", "method_name": "buildContentRange", "codes": ["private String buildContentRange(){\n    int offset = 0;\n    int limit = 0;\n    int count = 0;\n    // Get the offset and limit values from the request\n    if (request.getHeaderValue(ReservedHTTPHeaders.OFFSET) != null) {\n        offset = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.OFFSET));\n    }\n    if (request.getHeaderValue(ReservedHTTPHeaders.LIMIT) != null) {\n        limit = Integer.parseInt(request.getHeaderValue(ReservedHTTPHeaders.LIMIT));\n    }\n    // Calculate the count based on the offset and limit values\n    if (limit == 0) {\n        count = drc.getCount() - 1;\n    } else {\n        count = Math.min(limit, drc.getCount());\n    }\n    // Build the content range string\n    return \"bytes \" + offset + \"-\" + (count - 1) + \"/\" + drc.getCount();\n}"], "code_level": "class_runnable", "_id": "636766ae1a6d9265ec0175d8", "project_name": "framework-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/pagination/PaginationHelper_buildContentRange.java"}
{"generate_results": [{"generate_code": "private static String javaCharset(String charset){\n    Map<String,String> MIME2JAVA = new HashMap<>();\n    MIME2JAVA.put(\"US-ASCII\", \"ISO-8859-1\");\n    MIME2JAVA.put(\"UTF-8\", \"UTF-8\");\n    MIME2JAVA.put(\"GBK\", \"GBK\");\n    MIME2JAVA.put(\"BIG5\", \"Big5\");\n    MIME2JAVA.put(\"EUC-JP\", \"EUC-JP\");\n    MIME2JAVA.put(\"ISO-2022-JP\", \"ISO-2022-JP\");\n    MIME2JAVA.put(\"Shift_JIS\", \"Shift_JIS\");\n    MIME2JAVA.put(\"ISO-8859-15\", \"ISO-8859-15\");\n    MIME2JAVA.put(\"ISO-8859-16\", \"ISO-8859-16\");\n    MIME2JAVA.put(\"ISO-8859-7\", \"ISO-8859-7\");\n    MIME2JAVA.put(\"ISO-8859-9\", \"ISO-8859-9\");\n    MIME2JAVA.put(\"ISO-8859-10\", \"ISO-8859-10\");\n    MIME2JAVA.put(\"ISO-8859-11\", \"ISO-8859-11\");\n    MIME2JAVA.put(\"ISO-8859-12\", \"ISO-8859-12\");\n    MIME2JAVA.put(\"ISO-8859-13\", \"ISO-8859-13\");\n    MIME2JAVA.put(\"ISO-8859-14\", \"ISO-8859-14\");\n    MIME2JAVA.put(\"ISO-8859-16\", \"ISO-8859-16\");\n    MIME2JAVA.put(\"ISO-8859-17\", \"ISO-8859-17\");\n    MIME2JAVA.put(\"ISO-8859-18\", \"ISO-8859-18\");\n    MIME2JAVA.put(\"ISO-8859-19\", \"ISO-8859-19\");\n    MIME2JAVA.put(\"ISO-8859-20\", \"ISO-8859-20\");\n    MIME2JAVA.put(\"ISO-8859-21\", \"ISO-8859-21\");\n    MIME2JAVA.put(\"ISO-8859-22\", \"ISO-8859-22\");\n    MIME2JAVA.put(\"ISO-8859-23\", \"ISO-8859-23\");\n    MIME2JAVA.put(\"ISO-8859-24\", \"ISO-8859-24\");\n    MIME2JAVA.put(\"ISO-8859-25\", \"ISO-8859-25\");\n    MIME2JAVA.put(\"ISO-8859-26\", \"ISO-8859-26\");\n    MIME2JAVA.put(\"ISO-8859-27\", \"ISO-8859-27\");\n    MIME2JAVA.put(\"ISO-8859-28\", \"ISO-8859-28\");\n    MIME2JAVA.put(\"ISO-8859-29\", \"ISO-8859-29\");\n    MIME2JAVA.put(\"ISO-8859-30\", \"ISO-8859-30\");\n    MIME2JAVA.put(\"ISO-8859-31\", \"ISO-8859-31\");\n    MIME2JAVA.put(\"ISO-8859-32\", \"ISO-8859-32\");\n    MIME2JAVA.put(\"ISO-8859-33\", \"ISO-8859-33\");\n    MIME2JAVA.put(\"ISO-8859-34\", \"ISO-8859-34\");\n    MIME2JAVA.put(\"ISO-8859-35\", \"ISO-8859-35\");\n    MIME2JAVA.put(\"ISO-8859-36\", \"ISO-8859-36\");\n    MIME2JAVA.put(\"ISO-8859-37\", \"ISO-8859-37\");\n    MIME2JAVA.put(\"ISO-8859-38\", \"ISO-8859-38\");\n    MIME2JAVA.put(\"ISO-8859-39\", \"ISO-8859-39\");\n    MIME2JAVA.put(\"ISO-", "errormessage": "compile error", "error_detail_message": "MimeUtility.java:270: error: unclosed string literal\n    MIME2JAVA.put(\"ISO-}\n                  ^\nMimeUtility.java:270: error: reached end of file while parsing\n    MIME2JAVA.put(\"ISO-}\n                        ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n", "method_name": "javaCharset", "codes": ["private static String javaCharset(String charset){\n    Map<String,String> MIME2JAVA = new HashMap<>();\n    MIME2JAVA.put(\"US-ASCII\", \"ISO-8859-1\");\n    MIME2JAVA.put(\"UTF-8\", \"UTF-8\");\n    MIME2JAVA.put(\"GBK\", \"GBK\");\n    MIME2JAVA.put(\"BIG5\", \"Big5\");\n    MIME2JAVA.put(\"EUC-JP\", \"EUC-JP\");\n    MIME2JAVA.put(\"ISO-2022-JP\", \"ISO-2022-JP\");\n    MIME2JAVA.put(\"Shift_JIS\", \"Shift_JIS\");\n    MIME2JAVA.put(\"ISO-8859-15\", \"ISO-8859-15\");\n    MIME2JAVA.put(\"ISO-8859-16\", \"ISO-8859-16\");\n    MIME2JAVA.put(\"ISO-8859-7\", \"ISO-8859-7\");\n    MIME2JAVA.put(\"ISO-8859-9\", \"ISO-8859-9\");\n    MIME2JAVA.put(\"ISO-8859-10\", \"ISO-8859-10\");\n    MIME2JAVA.put(\"ISO-8859-11\", \"ISO-8859-11\");\n    MIME2JAVA.put(\"ISO-8859-12\", \"ISO-8859-12\");\n    MIME2JAVA.put(\"ISO-8859-13\", \"ISO-8859-13\");\n    MIME2JAVA.put(\"ISO-8859-14\", \"ISO-8859-14\");\n    MIME2JAVA.put(\"ISO-8859-16\", \"ISO-8859-16\");\n    MIME2JAVA.put(\"ISO-8859-17\", \"ISO-8859-17\");\n    MIME2JAVA.put(\"ISO-8859-18\", \"ISO-8859-18\");\n    MIME2JAVA.put(\"ISO-8859-19\", \"ISO-8859-19\");\n    MIME2JAVA.put(\"ISO-8859-20\", \"ISO-8859-20\");\n    MIME2JAVA.put(\"ISO-8859-21\", \"ISO-8859-21\");\n    MIME2JAVA.put(\"ISO-8859-22\", \"ISO-8859-22\");\n    MIME2JAVA.put(\"ISO-8859-23\", \"ISO-8859-23\");\n    MIME2JAVA.put(\"ISO-8859-24\", \"ISO-8859-24\");\n    MIME2JAVA.put(\"ISO-8859-25\", \"ISO-8859-25\");\n    MIME2JAVA.put(\"ISO-8859-26\", \"ISO-8859-26\");\n    MIME2JAVA.put(\"ISO-8859-27\", \"ISO-8859-27\");\n    MIME2JAVA.put(\"ISO-8859-28\", \"ISO-8859-28\");\n    MIME2JAVA.put(\"ISO-8859-29\", \"ISO-8859-29\");\n    MIME2JAVA.put(\"ISO-8859-30\", \"ISO-8859-30\");\n    MIME2JAVA.put(\"ISO-8859-31\", \"ISO-8859-31\");\n    MIME2JAVA.put(\"ISO-8859-32\", \"ISO-8859-32\");\n    MIME2JAVA.put(\"ISO-8859-33\", \"ISO-8859-33\");\n    MIME2JAVA.put(\"ISO-8859-34\", \"ISO-8859-34\");\n    MIME2JAVA.put(\"ISO-8859-35\", \"ISO-8859-35\");\n    MIME2JAVA.put(\"ISO-8859-36\", \"ISO-8859-36\");\n    MIME2JAVA.put(\"ISO-8859-37\", \"ISO-8859-37\");\n    MIME2JAVA.put(\"ISO-8859-38\", \"ISO-8859-38\");\n    MIME2JAVA.put(\"ISO-8859-39\", \"ISO-8859-39\");\n    MIME2JAVA.put(\"ISO-"], "code_level": "class_runnable", "_id": "636766f01a6d9265ec01763e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/util/MimeUtility_javaCharset.java"}
{"generate_results": [{"generate_code": "private TreeNode<T> rotateRight(TreeNode<T> node){\n    // Perform the right rotation\n    TreeNode<T> temp = node.left;\n    node.left = temp.right;\n    temp.right = node;\n\n    // Update heights and subtree sizes\n    updateHeightAndSubtreeSize(node);\n    updateHeightAndSubtreeSize(temp);\n\n    return temp;\n}", "errormessage": "compile error", "error_detail_message": "AVLTree.java:495: error: cannot find symbol\n    updateHeightAndSubtreeSize(node);\n    ^\n  symbol:   method updateHeightAndSubtreeSize(TreeNode<T>)\n  location: class AVLTree<T>\n  where T is a type-variable:\n    T extends Object declared in class AVLTree\nAVLTree.java:496: error: cannot find symbol\n    updateHeightAndSubtreeSize(temp);\n    ^\n  symbol:   method updateHeightAndSubtreeSize(TreeNode<T>)\n  location: class AVLTree<T>\n  where T is a type-variable:\n    T extends Object declared in class AVLTree\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}\n */\n", "method_name": "rotateRight", "codes": ["private TreeNode<T> rotateRight(TreeNode<T> node){\n    // Perform the right rotation\n    TreeNode<T> temp = node.left;\n    node.left = temp.right;\n    temp.right = node;\n\n    // Update heights and subtree sizes\n    updateHeightAndSubtreeSize(node);\n    updateHeightAndSubtreeSize(temp);\n\n    return temp;\n}"], "code_level": "file_runnable", "_id": "636767441a6d9265ec017cc1", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/AVLTree_rotateRight.java"}
{"generate_results": [{"generate_code": "public static final <V>void swap(V[] arr,int i,int j){\n    V temp=arr[i];\n    arr[i]=arr[j];\n    arr[j]=temp;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Swaps the two elements at the specified indices in the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param i the index of the first element\n * @param j the index of the second element\n */\n", "method_name": "swap", "codes": ["public static final <V>void swap(V[] arr,int i,int j){\n    V temp=arr[i];\n    arr[i]=arr[j];\n    arr[j]=temp;\n}"], "code_level": "self_contained", "_id": "636767551a6d9265ec017f3f", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/ArrayUtil_swap.class"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\nreturn () -> String.valueOf(start++);\n}", "errormessage": "compile error", "error_detail_message": "SupplierUtil.java:187: error: local variables referenced from a lambda expression must be final or effectively final\nreturn () -> String.valueOf(start++);\n                            ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Create a string supplier which returns unique strings. The returns strings are simply integers starting from start.\n * @param start where to start the sequence\n * @return a string supplier\n */\n", "method_name": "createStringSupplier", "codes": ["@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\nreturn () -> String.valueOf(start++);\n}"], "code_level": "slib_runnable", "_id": "6367675c1a6d9265ec018058", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/SupplierUtil_createStringSupplier.java"}
{"generate_results": [{"generate_code": "@Override public ListNode<E> previousNode(){\nreturn this.prev;\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:1224: error: cannot find symbol\nreturn this.prev;\n           ^\n  symbol: variable prev\n1 error\n", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "previousNode", "codes": ["@Override public ListNode<E> previousNode(){\nreturn this.prev;\n}"], "code_level": "class_runnable", "_id": "636767501a6d9265ec017e86", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_previousNode.java"}
{"generate_results": [{"generate_code": "public static long factorial(int n){\n    if(n==0 || n==1)\n        return 1;\n    else\n        return n*factorial(n-1);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Calculate the factorial of $n$.\n * @param n the input number\n * @return the factorial\n */\n", "method_name": "factorial", "codes": ["public static long factorial(int n){\n    if(n==0 || n==1)\n        return 1;\n    else\n        return n*factorial(n-1);\n}"], "code_level": "self_contained", "_id": "636767581a6d9265ec017fc4", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/MathUtil_factorial.class"}
{"generate_results": [{"generate_code": "private boolean unlink(ListNodeImpl<E> node){\n    // Your implementation here\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:242: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Remove the non null  {@code node} from the list. \n */\n", "method_name": "unlink", "codes": ["private boolean unlink(ListNodeImpl<E> node){\n    // Your implementation here\n}"], "code_level": "class_runnable", "_id": "636767631a6d9265ec018171", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_unlink.java"}
{"generate_results": [{"generate_code": "public static final <V>void reverse(V[] arr,int from,int to){\n    for(int i=from;i<=to/2;i++){\n        V temp = arr[i];\n        arr[i] = arr[to-i];\n        arr[to-i] = temp;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Reverses the order of the elements in the specified range within the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param from the index of the first element (inclusive) inside the range to reverse\n * @param to the index of the last element (inclusive) inside the range to reverse\n */\n", "method_name": "reverse", "codes": ["public static final <V>void reverse(V[] arr,int from,int to){\n    for(int i=from;i<=to/2;i++){\n        V temp = arr[i];\n        arr[i] = arr[to-i];\n        arr[to-i] = temp;\n    }\n}"], "code_level": "class_runnable", "_id": "636767491a6d9265ec017d90", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/ArrayUtil_reverse.class"}
{"generate_results": [{"generate_code": "private void moveAllListNodes(DoublyLinkedList<E> list){\n    ListNodeImpl<E> current = head;\n    while(current != null){\n        ListNodeImpl<E> next = current.next;\n        list.add(current.value);\n        current = next;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat org.jgrapht.util.DoublyLinkedList.addElementLast(DoublyLinkedList.java:587)\n\tat org.jgrapht.util.DoublyLinkedList.add(DoublyLinkedList.java:618)\n\tat java.base/java.util.AbstractList.add(AbstractList.java:111)\n\tat org.jgrapht.util.DoublyLinkedList.moveAllListNodes(DoublyLinkedList.java:141)\n\tat org.jgrapht.util.DoublyLinkedList.linkListIntoThisBefore(DoublyLinkedList.java:209)\n\tat org.jgrapht.util.DoublyLinkedList.moveFrom(DoublyLinkedList.java:913)\n\tat org.jgrapht.util.DoublyLinkedList_moveAllListNodes.main(DoublyLinkedList_moveAllListNodes.java:35)\n", "is_pass": false}], "docstring": "/** \n * Atomically moves all  {@link ListNode ListNodes} from {@code list} to this list as if eachnode was removed with  {@link #removeListNode(ListNodeImpl)} from {@code list} andsubsequently added to this list by  {@link #addListNode(ListNodeImpl)}.\n */\n", "method_name": "moveAllListNodes", "codes": ["private void moveAllListNodes(DoublyLinkedList<E> list){\n    ListNodeImpl<E> current = head;\n    while(current != null){\n        ListNodeImpl<E> next = current.next;\n        list.add(current.value);\n        current = next;\n    }\n}"], "code_level": "class_runnable", "_id": "6367674a1a6d9265ec017da9", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/DoublyLinkedList_moveAllListNodes.class"}
{"generate_results": [{"generate_code": "public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    Map<V,V> mapping = new HashMap<>();\n    for (V vertex : graph.vertexSet()){\n        mapping.put(vertex,vertex);\n    }\n    return new IsomorphicGraphMapping<>(mapping,mapping,graph,graph);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Computes an identity automorphism (i.e. a self-mapping of a graph in which each vertex also maps to itself).\n * @param graph the input graph\n * @param < V > the graph vertex type\n * @param < E > the graph edge type\n * @return a mapping from graph to graph\n */\n", "method_name": "identity", "codes": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    Map<V,V> mapping = new HashMap<>();\n    for (V vertex : graph.vertexSet()){\n        mapping.put(vertex,vertex);\n    }\n    return new IsomorphicGraphMapping<>(mapping,mapping,graph,graph);\n}"], "code_level": "project_runnable", "_id": "6367675f1a6d9265ec0180d3", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping_identity.class"}
{"generate_results": [{"generate_code": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n    // Validate the input\n    if(target == null || resultMap == null) {\n        throw new IllegalArgumentException(\"Target graph and result map cannot be null\");\n    }\n    if(partitionA == null || partitionB == null) {\n        throw new IllegalArgumentException(\"Partitions A and B cannot be null\");\n    }\n\n    // Perform boundary checks\n    if(partitionA.size() > Integer.MAX_VALUE || partitionB.size() > Integer.MAX_VALUE) {\n        throw new IllegalArgumentException(\"Partition sizes must be less than or equal to Integer.MAX_VALUE\");\n    }\n\n    // Create a complete bipartite graph\n    CompleteBipartiteGraphGenerator generator = new CompleteBipartiteGraphGenerator(partitionA, partitionB);\n    Graph<V,E> graph = generator.generateGraph();\n\n    // Add vertices to the target graph\n    for(V v : graph.vertexSet()) {\n        target.addVertex(v);\n        resultMap.put(v.toString(), v);\n    }\n\n    // Add edges to the target graph\n    for(E e : graph.edgeSet()) {\n        V source = graph.getEdgeSource(e);\n        V destination = graph.getEdgeTarget(e);\n        target.addEdge(source, destination);\n    }\n}", "errormessage": "compile error", "error_detail_message": "CompleteBipartiteGraphGenerator.java:96: error: no suitable method found for generateGraph(no arguments)\n    Graph<V,E> graph = generator.generateGraph();\n                                ^\n    method GraphGenerator.generateGraph(Graph) is not applicable\n      (actual and formal argument lists differ in length)\n    method CompleteBipartiteGraphGenerator.generateGraph(Graph,Map) is not applicable\n      (actual and formal argument lists differ in length)\nNote: CompleteBipartiteGraphGenerator.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Construct a complete bipartite graph\n */\n", "method_name": "generateGraph", "codes": ["@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n    // Validate the input\n    if(target == null || resultMap == null) {\n        throw new IllegalArgumentException(\"Target graph and result map cannot be null\");\n    }\n    if(partitionA == null || partitionB == null) {\n        throw new IllegalArgumentException(\"Partitions A and B cannot be null\");\n    }\n\n    // Perform boundary checks\n    if(partitionA.size() > Integer.MAX_VALUE || partitionB.size() > Integer.MAX_VALUE) {\n        throw new IllegalArgumentException(\"Partition sizes must be less than or equal to Integer.MAX_VALUE\");\n    }\n\n    // Create a complete bipartite graph\n    CompleteBipartiteGraphGenerator generator = new CompleteBipartiteGraphGenerator(partitionA, partitionB);\n    Graph<V,E> graph = generator.generateGraph();\n\n    // Add vertices to the target graph\n    for(V v : graph.vertexSet()) {\n        target.addVertex(v);\n        resultMap.put(v.toString(), v);\n    }\n\n    // Add edges to the target graph\n    for(E e : graph.edgeSet()) {\n        V source = graph.getEdgeSource(e);\n        V destination = graph.getEdgeTarget(e);\n        target.addEdge(source, destination);\n    }\n}"], "code_level": "class_runnable", "_id": "636767641a6d9265ec01817d", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator_generateGraph.java"}
{"generate_results": [{"generate_code": "void insertBefore(Bucket bucket){\n    // Your implementation here\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Inserts this bucket in the data structure before the  {@code bucket}.\n * @param bucket the bucket, that will be the next to this bucket.\n */\n", "method_name": "insertBefore", "codes": ["void insertBefore(Bucket bucket){\n    // Your implementation here\n}"], "code_level": "class_runnable", "_id": "636767531a6d9265ec017efb", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/traverse/LexBreadthFirstIterator_insertBefore.class"}
{"generate_results": [{"generate_code": "@Override public boolean hasNext(){\n    // Check if there are any unvisited vertices\n    for (V vertex : vertices) {\n        if (!bucketMap.containsKey(vertex)) {\n            return true;\n        }\n    }\n    return false;\n}", "errormessage": "compile error", "error_detail_message": "LexBreadthFirstIterator.java:89: error: cannot find symbol\n    for (V vertex : vertices) {\n                    ^\n  symbol:   variable vertices\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:90: error: cannot find symbol\n        if (!bucketMap.containsKey(vertex)) {\n             ^\n  symbol:   variable bucketMap\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Checks whether there exist unvisited vertices.\n * @return true if there exist unvisited vertices.\n */\n", "method_name": "hasNext", "codes": ["@Override public boolean hasNext(){\n    // Check if there are any unvisited vertices\n    for (V vertex : vertices) {\n        if (!bucketMap.containsKey(vertex)) {\n            return true;\n        }\n    }\n    return false;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f63", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator_hasNext.java"}
{"generate_results": [{"generate_code": "void removeSelf(){\n    // Remove the self reference from the previous and next nodes\n    if (prev != null) {\n        prev.next = next;\n    }\n    if (next != null) {\n        next.prev = prev;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Removes this bucket from the data structure.\n */\n", "method_name": "removeSelf", "codes": ["void removeSelf(){\n    // Remove the self reference from the previous and next nodes\n    if (prev != null) {\n        prev.next = next;\n    }\n    if (next != null) {\n        next.prev = prev;\n    }\n}"], "code_level": "class_runnable", "_id": "6367675a1a6d9265ec018010", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/traverse/LexBreadthFirstIterator_removeSelf.class"}
{"generate_results": [{"generate_code": "private Set<V> initVisibleVertices(){\nSet<V> visibleVertices = new HashSet<>();\nfor (E edge : graph.edgeSet()){\nvisibleVertices.add(edge.getSource());\n}\nreturn visibleVertices;\n}", "errormessage": "compile error", "error_detail_message": "PathGrowingWeightedMatching.java:141: error: cannot find symbol\nvisibleVertices.add(edge.getSource());\n                        ^\n  symbol:   method getSource()\n  location: variable edge of type E\n  where E is a type-variable:\n    E extends Object declared in class PathGrowingWeightedMatching\n1 error\n", "is_pass": false}], "docstring": "/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n", "method_name": "initVisibleVertices", "codes": ["private Set<V> initVisibleVertices(){\nSet<V> visibleVertices = new HashSet<>();\nfor (E edge : graph.edgeSet()){\nvisibleVertices.add(edge.getSource());\n}\nreturn visibleVertices;\n}"], "code_level": "class_runnable", "_id": "6367674b1a6d9265ec017dc0", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/matching/PathGrowingWeightedMatching_initVisibleVertices.java"}
{"generate_results": [{"generate_code": "public void removeFromTreeEdgeList(){\n    // Remove the edge from the doubly linked list of the tree edges\n    // This involves updating the pointers of the adjacent nodes in the doubly linked list\n    // The specific implementation will depend on the structure of the doubly linked list\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Removes this edge from both doubly linked lists of tree edges.\n */\n", "method_name": "removeFromTreeEdgeList", "codes": ["public void removeFromTreeEdgeList(){\n    // Remove the edge from the doubly linked list of the tree edges\n    // This involves updating the pointers of the adjacent nodes in the doubly linked list\n    // The specific implementation will depend on the structure of the doubly linked list\n}"], "code_level": "class_runnable", "_id": "6367675c1a6d9265ec01805b", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/matching/blossom/v5/BlossomVTreeEdge_removeFromTreeEdgeList.class"}
{"generate_results": [{"generate_code": "protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    Set<E> edges = touchingVerticesToEdgeMap.get(Pair.of(sourceVertex,targetVertex));\n    if(edges == null){\n        edges = new HashSet<>();\n        touchingVerticesToEdgeMap.put(Pair.of(sourceVertex,targetVertex),edges);\n    }\n    edges.add(e);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n", "method_name": "addToIndex", "codes": ["protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    Set<E> edges = touchingVerticesToEdgeMap.get(Pair.of(sourceVertex,targetVertex));\n    if(edges == null){\n        edges = new HashSet<>();\n        touchingVerticesToEdgeMap.put(Pair.of(sourceVertex,targetVertex),edges);\n    }\n    edges.add(e);\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180fd", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics_addToIndex.class"}
{"generate_results": [{"generate_code": "public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    double mid = (box.getX() + box.getWidth()) / 2;\n    Box2D left = new Box2D(box.getX(), mid - box.getHeight()/2, mid - box.getWidth()/2, box.getHeight());\n    Box2D right = new Box2D(mid + box.getWidth()/2, box.getX() + box.getWidth(), mid + box.getWidth()/2, box.getHeight());\n    return new Pair<>(left,right);\n}", "errormessage": "compile error", "error_detail_message": "Boxes.java:58: error: cannot find symbol\n    double mid = (box.getX() + box.getWidth()) / 2;\n                     ^\n  symbol:   method getX()\n  location: variable box of type Box2D\nBoxes.java:59: error: cannot find symbol\n    Box2D left = new Box2D(box.getX(), mid - box.getHeight()/2, mid - box.getWidth()/2, box.getHeight());\n                              ^\n  symbol:   method getX()\n  location: variable box of type Box2D\nBoxes.java:60: error: cannot find symbol\n    Box2D right = new Box2D(mid + box.getWidth()/2, box.getX() + box.getWidth(), mid + box.getWidth()/2, box.getHeight());\n                                                       ^\n  symbol:   method getX()\n  location: variable box of type Box2D\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Split a box along the x axis into two equal boxes.\n * @param box the box to split\n * @return a pair with the two resulting boxes\n */\n", "method_name": "splitAlongXAxis", "codes": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    double mid = (box.getX() + box.getWidth()) / 2;\n    Box2D left = new Box2D(box.getX(), mid - box.getHeight()/2, mid - box.getWidth()/2, box.getHeight());\n    Box2D right = new Box2D(mid + box.getWidth()/2, box.getX() + box.getWidth(), mid + box.getWidth()/2, box.getHeight());\n    return new Pair<>(left,right);\n}"], "code_level": "project_runnable", "_id": "636767521a6d9265ec017ecc", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/drawing/model/Boxes_splitAlongXAxis.java"}
{"generate_results": [{"generate_code": "public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.compare(p1,p2)==0;\n}", "errormessage": "compile error", "error_detail_message": "Points.java:109: error: incompatible types: Point2D cannot be converted to Double\n    return TOLERANCE_DOUBLE_COMPARATOR.compare(p1,p2)==0;\n                                               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Compare two points for equality using tolerance 1e-9.\n * @param p1 the first point\n * @param p2 the second point\n * @return whether the two points are equal or not\n */\n", "method_name": "equals", "codes": ["public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.compare(p1,p2)==0;\n}"], "code_level": "project_runnable", "_id": "636767531a6d9265ec017ef1", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/drawing/model/Points_equals.java"}
{"generate_results": [{"generate_code": "@Override public int compare(Double o1,Double o2){\n    double diff = Math.abs(o1-o2);\n    if(diff < epsilon) return 0;\n    else return Double.compare(o1,o2);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares two floating point values. Returns 0 if they are equal, -1 if  {@literal o1 < o2}, 1 otherwise\n * @param o1 the first value\n * @param o2 the second value\n * @return 0 if they are equal, -1 if {@literal o1 < o2}, 1 otherwise\n */\n", "method_name": "compare", "codes": ["@Override public int compare(Double o1,Double o2){\n    double diff = Math.abs(o1-o2);\n    if(diff < epsilon) return 0;\n    else return Double.compare(o1,o2);\n}"], "code_level": "slib_runnable", "_id": "6367674a1a6d9265ec017dab", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/util/ToleranceDoubleComparator_compare.class"}
{"generate_results": [{"generate_code": "public String toString(){\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < vs.length; i++) {\n        sb.append(vs[i]);\n        if (i < vs.length - 1) {\n            sb.append(\", \");\n        }\n    }\n    return sb.toString();\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a textual representation of the queue.\n * @return a textual representation of the queue.\n */\n", "method_name": "toString", "codes": ["public String toString(){\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < vs.length; i++) {\n        sb.append(vs[i]);\n        if (i < vs.length - 1) {\n            sb.append(\", \");\n        }\n    }\n    return sb.toString();\n}"], "code_level": "class_runnable", "_id": "6367674f1a6d9265ec017e74", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/util/FixedSizeIntegerQueue_toString.class"}
{"generate_results": [{"generate_code": "private int computeBinaryLog(int n){\n    return (int) Math.floor(Math.log(n)/Math.log(2));\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n", "method_name": "computeBinaryLog", "codes": ["private int computeBinaryLog(int n){\n    return (int) Math.floor(Math.log(n)/Math.log(2));\n}"], "code_level": "self_contained", "_id": "636767431a6d9265ec017c8d", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/TransitiveClosure_computeBinaryLog.class"}
{"generate_results": [{"generate_code": "public double vertexWeight(Set<V> v){\n    double sum = 0;\n    for (V vertex : v) {\n        sum += workingGraph.getEdgeWeight(workingGraph.getEdge(vertex, vertex));\n    }\n    return sum;\n}", "errormessage": "compile error", "error_detail_message": "StoerWagnerMinimumCut.java:227: error: incompatible types: V cannot be converted to Set<V>\n        sum += workingGraph.getEdgeWeight(workingGraph.getEdge(vertex, vertex));\n                                                               ^\n  where V is a type-variable:\n    V extends Object declared in class StoerWagnerMinimumCut\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Compute the sum of the weights entering a vertex\n * @param v the vertex\n * @return the sum of the weights entering a vertex\n */\n", "method_name": "vertexWeight", "codes": ["public double vertexWeight(Set<V> v){\n    double sum = 0;\n    for (V vertex : v) {\n        sum += workingGraph.getEdgeWeight(workingGraph.getEdge(vertex, vertex));\n    }\n    return sum;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018106", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut_vertexWeight.java"}
{"generate_results": [{"generate_code": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n    Set<V> result = new HashSet<>();\n    for(V v : set1){\n        if(set2.contains(v)){\n            result.add(v);\n        }\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Efficient way to compute the intersection between two sets\n * @param set1 set $1$\n * @param set2 set $2$\n * @return intersection of set $1$ and $2$\n */\n", "method_name": "intersection", "codes": ["private Set<V> intersection(Set<V> set1,Set<V> set2){\n    Set<V> result = new HashSet<>();\n    for(V v : set1){\n        if(set2.contains(v)){\n            result.add(v);\n        }\n    }\n    return result;\n}"], "code_level": "slib_runnable", "_id": "636767611a6d9265ec018116", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/flow/PadbergRaoOddMinimumCutset_intersection.class"}
{"generate_results": [{"generate_code": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    // Implement the logic to find a circulator on the outer face\n}", "errormessage": "compile error", "error_detail_message": "BoyerMyrvoldPlanarityInspector.java:670: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate} or returns a circulator to the {@code stop} node.\n * @param predicate the condition the desired node should satisfy\n * @param start the node to start the search from\n * @param stop the node to end the search with\n * @param dir the direction to start the traversal in\n * @return a circulator to the node satisfying the {@code predicate} or to the {@code stop} node\n */\n", "method_name": "selectOnOuterFace", "codes": ["private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    // Implement the logic to find a circulator on the outer face\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb6", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/planar/BoyerMyrvoldPlanarityInspector_selectOnOuterFace.java"}
{"generate_results": [{"generate_code": "Edge edgeToNext(){\nreturn null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat org.jgrapht.util.DoublyLinkedList.addElementLast(DoublyLinkedList.java:587)\n\tat org.jgrapht.util.DoublyLinkedList.add(DoublyLinkedList.java:618)\n\tat java.base/java.util.AbstractList.add(AbstractList.java:111)\n\tat org.jgrapht.util.DoublyLinkedList.moveAllListNodes(DoublyLinkedList.java:141)\n\tat org.jgrapht.util.DoublyLinkedList.linkListIntoThisBefore(DoublyLinkedList.java:209)\n\tat org.jgrapht.util.DoublyLinkedList.moveFrom(DoublyLinkedList.java:913)\n\tat org.jgrapht.util.DoublyLinkedList.prepend(DoublyLinkedList.java:939)\n\tat org.jgrapht.alg.planar.BoyerMyrvoldPlanarityInspector$Node.mergeChildEdges(BoyerMyrvoldPlanarityInspector.java:2347)\n\tat org.jgrapht.alg.planar.BoyerMyrvoldPlanarityInspector.mergeBiconnectedComponent(BoyerMyrvoldPlanarityInspector.java:345)\n\tat org.jgrapht.alg.planar.BoyerMyrvoldPlanarityInspector.walkDown(BoyerMyrvoldPlanarityInspector.java:444)\n\tat org.jgrapht.alg.planar.BoyerMyrvoldPlanarityInspector.lazyTestPlanarity(BoyerMyrvoldPlanarityInspector.java:306)\n\tat org.jgrapht.alg.planar.BoyerMyrvoldPlanarityInspector.isPlanar(BoyerMyrvoldPlanarityInspector.java:1479)\n\tat org.jgrapht.alg.planar.BoyerMyrvoldPlanarityInspector_edgeToNext.main(BoyerMyrvoldPlanarityInspector_edgeToNext.java:70)\n", "is_pass": false}], "docstring": "/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n", "method_name": "edgeToNext", "codes": ["Edge edgeToNext(){\nreturn null;\n}"], "code_level": "class_runnable", "_id": "6367675d1a6d9265ec018082", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/planar/BoyerMyrvoldPlanarityInspector_edgeToNext.class"}
{"generate_results": [{"generate_code": "protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    // Create an empty list to store the vertices\n    List<V> vertexList = new ArrayList<>();\n    \n    // Iterate over each edge in the tour\n    for (E edge : tour) {\n        // Get the source and target vertices of the edge\n        V source = graph.getEdgeSource(edge);\n        V target = graph.getEdgeTarget(edge);\n        \n        // Add the source vertex to the list\n        vertexList.add(source);\n        \n        // If the target vertex is not already in the list, add it\n        if (!vertexList.contains(target)) {\n            vertexList.add(target);\n        }\n    }\n    \n    // Create a new graph path with the vertices\n    return new DefaultDirectedPath<>(vertexList);\n}", "errormessage": "compile error", "error_detail_message": "HamiltonianCycleAlgorithmBase.java:102: error: cannot find symbol\n    return new DefaultDirectedPath<>(vertexList);\n               ^\n  symbol:   class DefaultDirectedPath\n  location: class HamiltonianCycleAlgorithmBase<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class HamiltonianCycleAlgorithmBase\n    E extends Object declared in class HamiltonianCycleAlgorithmBase\n1 error\n", "is_pass": false}], "docstring": "/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n", "method_name": "edgeSetToTour", "codes": ["protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    // Create an empty list to store the vertices\n    List<V> vertexList = new ArrayList<>();\n    \n    // Iterate over each edge in the tour\n    for (E edge : tour) {\n        // Get the source and target vertices of the edge\n        V source = graph.getEdgeSource(edge);\n        V target = graph.getEdgeTarget(edge);\n        \n        // Add the source vertex to the list\n        vertexList.add(source);\n        \n        // If the target vertex is not already in the list, add it\n        if (!vertexList.contains(target)) {\n            vertexList.add(target);\n        }\n    }\n    \n    // Create a new graph path with the vertices\n    return new DefaultDirectedPath<>(vertexList);\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f7c", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/tour/HamiltonianCycleAlgorithmBase_edgeSetToTour.java"}
{"generate_results": [{"generate_code": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    for(int i=0;i<bucketsByLabel.size();i++){\n        Set<Integer> bucket=bucketsByLabel.get(i);\n        if(bucket.contains(minLabel)){\n            bucket.remove(minLabel);\n            labels.set(i,0);\n        }\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Moves all vertices from the bucket with label  {@code minLabel} to the bucket with label 0.Clears the bucket with label  {@code minLabel}. Updates the labeling accordingly.\n * @param bucketsByLabel the buckets vertices are stored in\n * @param labels the labels of the vertices\n * @param minLabel the minimum value of the non-empty bucket\n */\n", "method_name": "reload", "codes": ["private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    for(int i=0;i<bucketsByLabel.size();i++){\n        Set<Integer> bucket=bucketsByLabel.get(i);\n        if(bucket.contains(minLabel)){\n            bucket.remove(minLabel);\n            labels.set(i,0);\n        }\n    }\n}"], "code_level": "self_contained", "_id": "636767641a6d9265ec018190", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/cycle/WeakChordalityInspector_reload.class"}
{"generate_results": [{"generate_code": "@Override protected V provideNextVertex(){\n    return null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat org.jgrapht.graph.AbstractGraph.assertVertexExist(AbstractGraph.java:129)\n\tat org.jgrapht.graph.AbstractBaseGraph.outgoingEdgesOf(AbstractBaseGraph.java:484)\n\tat org.jgrapht.traverse.CrossComponentIterator.selectOutgoingEdges(CrossComponentIterator.java:320)\n\tat org.jgrapht.traverse.CrossComponentIterator.addUnseenChildrenOf(CrossComponentIterator.java:325)\n\tat org.jgrapht.traverse.CrossComponentIterator.next(CrossComponentIterator.java:199)\n\tat org.jgrapht.alg.cycle.CycleDetector.execute(CycleDetector.java:148)\n\tat org.jgrapht.alg.cycle.CycleDetector.detectCyclesContainingVertex(CycleDetector.java:80)\n\tat org.jgrapht.alg.cycle.CycleDetector_provideNextVertex.main(CycleDetector_provideNextVertex.java:35)\n", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "provideNextVertex", "codes": ["@Override protected V provideNextVertex(){\n    return null;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018112", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/cycle/CycleDetector_provideNextVertex.class"}
{"generate_results": [{"generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n    for (Edge<E> edge : graph.edges()) {\n        List<Pair<Integer,Integer>> separators = getMinimalSeparators(neighborhoodSetOf(graph,edge));\n        result.add(new Pair<>(separators,edge));\n    }\n    return result;\n}", "errormessage": "compile error", "error_detail_message": "WeakChordalityInspector.java:224: error: cannot find symbol\n    for (Edge<E> edge : graph.edges()) {\n                             ^\n  symbol:   method edges()\n  location: variable graph of type Graph<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class WeakChordalityInspector\n    E extends Object declared in class WeakChordalityInspector\nWeakChordalityInspector.java:224: error: cannot find symbol\n    for (Edge<E> edge : graph.edges()) {\n         ^\n  symbol:   class Edge\n  location: class WeakChordalityInspector<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class WeakChordalityInspector\n    E extends Object declared in class WeakChordalityInspector\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Computes the global separator list of the  {@code graph}. More precisely, for every edge $e$ in the $G = (V, E)$ computes list of minimal separators $S_e$ in the neighborhood of $e$ and then concatenates these lists. Note: the result may contain duplicates\n * @return the list of minimal separators of every edge $e$ in the inspected graph\n */\n", "method_name": "computeGlobalSeparatorList", "codes": ["private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n    for (Edge<E> edge : graph.edges()) {\n        List<Pair<Integer,Integer>> separators = getMinimalSeparators(neighborhoodSetOf(graph,edge));\n        result.add(new Pair<>(separators,edge));\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180e2", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector_computeGlobalSeparatorList.java"}
{"generate_results": [{"generate_code": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSum = new ArrayList<>();\n    long sum = 0;\n    for(int i=bounds.size()-1;i>=0;i--){\n        sum += bounds.get(i);\n        suffixSum.add(sum);\n    }\n    return new Pair<>(suffixSum,sum);\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:147: error: incompatible types: long cannot be converted to Integer\n        suffixSum.add(sum);\n                      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Computes a suffix sum of the  {@code bounds}. Returns computed suffix sum and the sum of all elements in the  {@code bounds list}.\n * @param bounds list of integers.\n * @return computed pair of suffix sum list and a sum of all elements.\n */\n", "method_name": "computeSuffixSum", "codes": ["private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSum = new ArrayList<>();\n    long sum = 0;\n    for(int i=bounds.size()-1;i>=0;i--){\n        sum += bounds.get(i);\n        suffixSum.add(sum);\n    }\n    return new Pair<>(suffixSum,sum);\n}"], "code_level": "project_runnable", "_id": "636767461a6d9265ec017d0e", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeSuffixSum.java"}
{"generate_results": [{"generate_code": "private List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<>();\n    for (K key : keys) {\n        Function<K, Integer> lowerBound = lowerBounds.get(key);\n        if (lowerBound != null) {\n            lowerBounds.add(lowerBound.apply(key));\n        } else {\n            // Handle case where no lower bound is found\n            lowerBounds.add(Integer.MAX_VALUE); // Or any default value\n        }\n    }\n    return lowerBounds;\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:105: error: incompatible types: K cannot be converted to int\n        Function<K, Integer> lowerBound = lowerBounds.get(key);\n                                                          ^\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n", "method_name": "computeLowerBounds", "codes": ["private List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<>();\n    for (K key : keys) {\n        Function<K, Integer> lowerBound = lowerBounds.get(key);\n        if (lowerBound != null) {\n            lowerBounds.add(lowerBound.apply(key));\n        } else {\n            // Handle case where no lower bound is found\n            lowerBounds.add(Integer.MAX_VALUE); // Or any default value\n        }\n    }\n    return lowerBounds;\n}"], "code_level": "class_runnable", "_id": "636767431a6d9265ec017c88", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeLowerBounds.java"}
{"generate_results": [{"generate_code": "private List<Integer> computeUpperBounds(List<K> keys){\n    List<Integer> upperBounds = new ArrayList<>();\n    for (K key : keys) {\n        Function<K, Integer> upperBoundFunction = upperBounds.get(key);\n        if (upperBoundFunction != null) {\n            upperBounds.add(upperBoundFunction.apply(key));\n        } else {\n            // Handle case where no upper bound is defined\n            upperBounds.add(Integer.MAX_VALUE); // Or any default value\n        }\n    }\n    return upperBounds;\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:125: error: incompatible types: K cannot be converted to int\n        Function<K, Integer> upperBoundFunction = upperBounds.get(key);\n                                                                  ^\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n", "method_name": "computeUpperBounds", "codes": ["private List<Integer> computeUpperBounds(List<K> keys){\n    List<Integer> upperBounds = new ArrayList<>();\n    for (K key : keys) {\n        Function<K, Integer> upperBoundFunction = upperBounds.get(key);\n        if (upperBoundFunction != null) {\n            upperBounds.add(upperBoundFunction.apply(key));\n        } else {\n            // Handle case where no upper bound is defined\n            upperBounds.add(Integer.MAX_VALUE); // Or any default value\n        }\n    }\n    return upperBounds;\n}"], "code_level": "class_runnable", "_id": "636767581a6d9265ec017fb4", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeUpperBounds.java"}
{"generate_results": [{"generate_code": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    for(V v:vertices){\n        for(V w:vertices){\n            if(v.equals(w)) continue;\n            if(!graph.containsEdge(v,w)){\n                return false;\n            }\n        }\n    }\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n", "method_name": "isClique", "codes": ["private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    for(V v:vertices){\n        for(V w:vertices){\n            if(v.equals(w)) continue;\n            if(!graph.containsEdge(v,w)){\n                return false;\n            }\n        }\n    }\n    return true;\n}"], "code_level": "class_runnable", "_id": "6367675f1a6d9265ec0180cf", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/clique/CliqueMinimalSeparatorDecomposition_isClique.class"}
{"generate_results": [{"generate_code": "public int nonZeros(int row){\n    return this.rowOffsets[row+1] - this.rowOffsets[row];\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Get the number of non-zero entries of a row.\n * @param row the row\n * @return the number of non-zero entries of a row\n */\n", "method_name": "nonZeros", "codes": ["public int nonZeros(int row){\n    return this.rowOffsets[row+1] - this.rowOffsets[row];\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb0", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-opt/target/classes/org/jgrapht/opt/graph/sparse/specifics/CSRBooleanMatrix_nonZeros.class"}
{"generate_results": [{"generate_code": "private String unescapeId(String input){\n    return input.replace(\"\\\\\\\\\", \"\\\\\").replace(\"\\\\\\\"\", \"\\\"\");\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n", "method_name": "unescapeId", "codes": ["private String unescapeId(String input){\n    return input.replace(\"\\\\\\\\\", \"\\\\\").replace(\"\\\\\\\"\", \"\\\"\");\n}"], "code_level": "class_runnable", "_id": "636767461a6d9265ec017d17", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/DOTEventDrivenImporter_unescapeId.class"}
{"generate_results": [{"generate_code": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    // Your implementation here\n}", "errormessage": "compile error", "error_detail_message": "UriComponent.java:801: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n", "method_name": "decodeOctets", "codes": ["private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    // Your implementation here\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017457", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent_decodeOctets.java"}
{"generate_results": [{"generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    return decodePath(u.getPath(),decode);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Decode the path component of a URI as path segments.\n * @param u the URI. If the path component is an absolute path componentthen the leading '/' is ignored and is not considered a delimiator of a path segment.\n * @param decode true if the path segments of the path componentshould be in decoded form.\n * @return the list of path segments.\n */\n", "method_name": "decodePath", "codes": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    return decodePath(u.getPath(),decode);\n}"], "code_level": "slib_runnable", "_id": "6367667f1a6d9265ec01745d", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_decodePath.class"}
{"generate_results": [{"generate_code": "public final MatchResult match(CharSequence uri){\n    Matcher matcher = this.regexPattern.matcher(uri);\n    if(matcher.find()){\n        return new GroupIndexMatchResult(matcher);\n    }\n    return null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Match a URI against the pattern.\n * @param uri the uri to match against the template.\n * @return the match result, otherwise null if no match occurs.\n */\n", "method_name": "match", "codes": ["public final MatchResult match(CharSequence uri){\n    Matcher matcher = this.regexPattern.matcher(uri);\n    if(matcher.find()){\n        return new GroupIndexMatchResult(matcher);\n    }\n    return null;\n}"], "code_level": "project_runnable", "_id": "636766861a6d9265ec01755a", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriPattern_match.class"}
{"generate_results": [{"generate_code": "public final boolean isTemplateVariablePresent(String name){\n    return templateVariables.contains(name);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Ascertain if a template variable is a member of this template.\n * @param name name The template variable.\n * @return true if the template variable is a member of the template, otherwisefalse.\n */\n", "method_name": "isTemplateVariablePresent", "codes": ["public final boolean isTemplateVariablePresent(String name){\n    return templateVariables.contains(name);\n}"], "code_level": "class_runnable", "_id": "636766861a6d9265ec017553", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriTemplate_isTemplateVariablePresent.class"}
{"generate_results": [{"generate_code": "public static String encodeTemplateNames(String s){\n    return s.replace(\"{\", \"{{\").replace(\"}\", \"}}\");\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.\n * @param s the string with zero or more template parameters names\n * @return the string with encoded template parameters names.\n */\n", "method_name": "encodeTemplateNames", "codes": ["public static String encodeTemplateNames(String s){\n    return s.replace(\"{\", \"{{\").replace(\"}\", \"}}\");\n}"], "code_level": "self_contained", "_id": "636766801a6d9265ec017487", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_encodeTemplateNames.class"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    File f = new File(dir);\n    String[] files = f.list(new FilenameFilter(){\n        @Override\n        public boolean accept(File dir, String name) {\n            return name.endsWith(\".jar\");\n        }\n    });\n    for (String file : files) {\n        try {\n            URL url = new URL(\"file:\" + dir + \"/\" + file);\n            cpV.add(url);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        }\n    }\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nException in thread \"main\" java.lang.NoSuchMethodError: org.atmosphere.util.IntrospectionUtils$1: method 'void <init>()' not found\n\tat org.atmosphere.util.IntrospectionUtils.addToClassPath(IntrospectionUtils.java:399)\n\tat org.atmosphere.util.IntrospectionUtils_addToClassPath.main(IntrospectionUtils_addToClassPath.java:15)\n", "is_pass": false}], "docstring": "/** \n * Add all the jar files in a dir to the classpath, represented as a Vector of URLs.\n */\n", "method_name": "addToClassPath", "codes": ["@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    File f = new File(dir);\n    String[] files = f.list(new FilenameFilter(){\n        @Override\n        public boolean accept(File dir, String name) {\n            return name.endsWith(\".jar\");\n        }\n    });\n    for (String file : files) {\n        try {\n            URL url = new URL(\"file:\" + dir + \"/\" + file);\n            cpV.add(url);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec01745c", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/IntrospectionUtils_addToClassPath.class"}
{"generate_results": [{"generate_code": "public static String capitalize(String name){\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0\n\tat org.atmosphere.util.IntrospectionUtils.capitalize(IntrospectionUtils.java:376)\n\tat org.atmosphere.util.IntrospectionUtils_capitalize.main(IntrospectionUtils_capitalize.java:5)\n", "is_pass": false}], "docstring": "/** \n * Reverse of Introspector.decapitalize\n */\n", "method_name": "capitalize", "codes": ["public static String capitalize(String name){\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174bf", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/IntrospectionUtils_capitalize.class"}
{"generate_results": [{"generate_code": "public static String unescapeJava(String str) throws Exception {\n    StringWriter writer = new StringWriter(str.length());\n    unescapeJava(writer, str);\n    return writer.toString();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.length()\" because \"<parameter1>\" is null\n\tat org.atmosphere.util.StringEscapeUtils.unescapeJava(StringEscapeUtils.java:285)\n\tat org.atmosphere.util.StringEscapeUtils_unescapeJava.main(StringEscapeUtils_unescapeJava.java:6)\n", "is_pass": false}], "docstring": "/** \n * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>\n * @param str the <code>String</code> to unescape, may be null\n * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n */\n", "method_name": "unescapeJava", "codes": ["public static String unescapeJava(String str) throws Exception {\n    StringWriter writer = new StringWriter(str.length());\n    unescapeJava(writer, str);\n    return writer.toString();\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec017401", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/StringEscapeUtils_unescapeJava.class"}
{"generate_results": [{"generate_code": "private static char decodeHexNibble(final char c){\n    switch(c){\n        case '0':\n            return '0';\n        case '1':\n            return '1';\n        case '2':\n            return '2';\n        case '3':\n            return '3';\n        case '4':\n            return '4';\n        case '5':\n            return '5';\n        case '6':\n            return '6';\n        case '7':\n            return '7';\n        case '8':\n            return '8';\n        case '9':\n            return '9';\n        case 'A':\n        case 'a':\n            return '10';\n        case 'B':\n        case 'b':\n            return '11';\n        case 'C':\n        case 'c':\n            return '12';\n        case 'D':\n        case 'd':\n            return '13';\n        case 'E':\n        case 'e':\n            return '14';\n        case 'F':\n        case 'f':\n            return '15';\n        default:\n            throw new IllegalArgumentException(\"Invalid hex nibble: \" + c);\n    }\n}", "errormessage": "compile error", "error_detail_message": "QueryStringDecoder.java:432: error: unclosed character literal\n            return '10';\n                   ^\nQueryStringDecoder.java:432: error: unclosed character literal\n            return '10';\n                      ^\nQueryStringDecoder.java:435: error: unclosed character literal\n            return '11';\n                   ^\nQueryStringDecoder.java:435: error: unclosed character literal\n            return '11';\n                      ^\nQueryStringDecoder.java:438: error: unclosed character literal\n            return '12';\n                   ^\nQueryStringDecoder.java:438: error: unclosed character literal\n            return '12';\n                      ^\nQueryStringDecoder.java:441: error: unclosed character literal\n            return '13';\n                   ^\nQueryStringDecoder.java:441: error: unclosed character literal\n            return '13';\n                      ^\nQueryStringDecoder.java:444: error: unclosed character literal\n            return '14';\n                   ^\nQueryStringDecoder.java:444: error: unclosed character literal\n            return '14';\n                      ^\nQueryStringDecoder.java:447: error: unclosed character literal\n            return '15';\n                   ^\nQueryStringDecoder.java:447: error: unclosed character literal\n            return '15';\n                      ^\n12 errors\n", "is_pass": false}], "docstring": "/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}.\n * @return The hexadecimal value represented in the ASCII charactergiven, or  {@link Character#MAX_VALUE} if the character is invalid.\n */\n", "method_name": "decodeHexNibble", "codes": ["private static char decodeHexNibble(final char c){\n    switch(c){\n        case '0':\n            return '0';\n        case '1':\n            return '1';\n        case '2':\n            return '2';\n        case '3':\n            return '3';\n        case '4':\n            return '4';\n        case '5':\n            return '5';\n        case '6':\n            return '6';\n        case '7':\n            return '7';\n        case '8':\n            return '8';\n        case '9':\n            return '9';\n        case 'A':\n        case 'a':\n            return '10';\n        case 'B':\n        case 'b':\n            return '11';\n        case 'C':\n        case 'c':\n            return '12';\n        case 'D':\n        case 'd':\n            return '13';\n        case 'E':\n        case 'e':\n            return '14';\n        case 'F':\n        case 'f':\n            return '15';\n        default:\n            throw new IllegalArgumentException(\"Invalid hex nibble: \" + c);\n    }\n}"], "code_level": "slib_runnable", "_id": "636766851a6d9265ec01751b", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/QueryStringDecoder_decodeHexNibble.java"}
{"generate_results": [{"generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    // Check if the genericType is parameterized\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType parameterizedType = (ParameterizedType)genericType;\n        Type[] actualTypes = parameterizedType.getActualTypeArguments();\n        // Create an array of classes based on the actual types\n        Class<?>[] argumentClasses = new Class[actualTypes.length];\n        for(int i=0;i<argumentClasses.length;i++){\n            argumentClasses[i] = resolveClass(actualTypes[i],targetType);\n        }\n        return argumentClasses;\n    }else{\n        return null;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"typeArguments3\" is null\n\tat org.atmosphere.config.managed.TypeResolver_resolveArguments.main(TypeResolver_resolveArguments.java:24)\n", "is_pass": false}], "docstring": "/** \n * Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.\n */\n", "method_name": "resolveArguments", "codes": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    // Check if the genericType is parameterized\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType parameterizedType = (ParameterizedType)genericType;\n        Type[] actualTypes = parameterizedType.getActualTypeArguments();\n        // Create an array of classes based on the actual types\n        Class<?>[] argumentClasses = new Class[actualTypes.length];\n        for(int i=0;i<argumentClasses.length;i++){\n            argumentClasses[i] = resolveClass(actualTypes[i],targetType);\n        }\n        return argumentClasses;\n    }else{\n        return null;\n    }\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174b6", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/config/managed/TypeResolver_resolveArguments.class"}
{"generate_results": [{"generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n    // Check if the type variable has a lower bound\n    if(typeVariable.getLowerBounds().length > 0){\n        // Get the first lower bound\n        Type lowerBound = typeVariable.getLowerBounds()[0];\n        // If the lower bound is a parameterized type, recursively resolve it\n        if(lowerBound instanceof ParameterizedType){\n            return resolveBound((ParameterizedType)lowerBound);\n        }\n        // Otherwise, return the lower bound as a raw type\n        else{\n            return lowerBound;\n        }\n    }\n    // If there is no lower bound, return Unknown.class\n    else{\n        return Unknown.class;\n    }\n}", "errormessage": "compile error", "error_detail_message": "TypeResolver.java:302: error: cannot find symbol\n    if(typeVariable.getLowerBounds().length > 0){\n                   ^\n  symbol:   method getLowerBounds()\n  location: variable typeVariable of type TypeVariable<?>\nTypeResolver.java:304: error: cannot find symbol\n        Type lowerBound = typeVariable.getLowerBounds()[0];\n                                      ^\n  symbol:   method getLowerBounds()\n  location: variable typeVariable of type TypeVariable<?>\nTypeResolver.java:307: error: incompatible types: ParameterizedType cannot be converted to TypeVariable<?>\n            return resolveBound((ParameterizedType)lowerBound);\n                                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.\n */\n", "method_name": "resolveBound", "codes": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n    // Check if the type variable has a lower bound\n    if(typeVariable.getLowerBounds().length > 0){\n        // Get the first lower bound\n        Type lowerBound = typeVariable.getLowerBounds()[0];\n        // If the lower bound is a parameterized type, recursively resolve it\n        if(lowerBound instanceof ParameterizedType){\n            return resolveBound((ParameterizedType)lowerBound);\n        }\n        // Otherwise, return the lower bound as a raw type\n        else{\n            return lowerBound;\n        }\n    }\n    // If there is no lower bound, return Unknown.class\n    else{\n        return Unknown.class;\n    }\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec01741d", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver_resolveBound.java"}
{"generate_results": [{"generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequestImpl(new Builder(request));\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereRequestImpl.java:1404: error: constructor Builder in class Builder cannot be applied to given types;\n    return new AtmosphereRequestImpl(new Builder(request));\n                                     ^\n  required: no arguments\n  found:    HttpServletRequest\n  reason: actual and formal argument lists differ in length\nNote: AtmosphereRequestImpl.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: AtmosphereRequestImpl.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Wrap an  {@link HttpServletRequest}.\n * @param request {@link HttpServletRequest}\n * @return an {@link AtmosphereRequest}\n */\n", "method_name": "wrap", "codes": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequestImpl(new Builder(request));\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174d2", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl_wrap.java"}
{"generate_results": [{"generate_code": "public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    return null;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * Remove an  {@link AtmosphereHandler}.\n * @param mapping the mapping used when invoking {@link #addAtmosphereHandler(String,AtmosphereHandler)};\n * @return true if removed\n */\n", "method_name": "removeAtmosphereHandler", "codes": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    return null;\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017458", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereFramework_removeAtmosphereHandler.class"}
{"generate_results": [{"generate_code": "protected Object filter(Object msg){\n    if(msg==null||msg.equals(\"abort\")){\n        return null;\n    }\n    return msg;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Invoke the  {@link BroadcastFilter}\n * @param msg\n * @return\n */\n", "method_name": "filter", "codes": ["protected Object filter(Object msg){\n    if(msg==null||msg.equals(\"abort\")){\n        return null;\n    }\n    return msg;\n}"], "code_level": "project_runnable", "_id": "636766821a6d9265ec0174b3", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/DefaultBroadcaster_filter.class"}
{"generate_results": [{"generate_code": "private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    for (final AtmosphereInterceptor interceptor : interceptorList) {\n        if (c.isAssignableFrom(interceptor.getClass())) {\n            return true;\n        }\n    }\n    return false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>\n * @param interceptorList the interceptors\n * @param c               the interceptor class\n * @return {@code false} if an instance of the class already exists in the list, {@code true} otherwise\n */\n", "method_name": "checkDuplicate", "codes": ["private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    for (final AtmosphereInterceptor interceptor : interceptorList) {\n        if (c.isAssignableFrom(interceptor.getClass())) {\n            return true;\n        }\n    }\n    return false;\n}"], "code_level": "project_runnable", "_id": "636766811a6d9265ec017499", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereFramework_checkDuplicate.class"}
{"generate_results": [{"generate_code": "public boolean hasBytes(){\n    if(dataBytes == null){\n        return false;\n    }\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * True is the body is a byte array\n * @return True is the body is a byte array\n */\n", "method_name": "hasBytes", "codes": ["public boolean hasBytes(){\n    if(dataBytes == null){\n        return false;\n    }\n    return true;\n}"], "code_level": "class_runnable", "_id": "6367667c1a6d9265ec0173f7", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereRequestImpl_hasBytes.class"}
{"generate_results": [{"generate_code": "public static Meteor lookup(HttpServletRequest r){\n    return new Meteor(r);\n}", "errormessage": "compile error", "error_detail_message": "Meteor.java:66: error: constructor Meteor in class Meteor cannot be applied to given types;\n    return new Meteor(r);\n           ^\n  required: AtmosphereResource,List<BroadcastFilter>,Serializer\n  found:    HttpServletRequest\n  reason: actual and formal argument lists differ in length\n1 error\n", "is_pass": false}], "docstring": "/** \n * Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.\n * @param r {@link HttpServletRequest}\n * @return a {@link Meteor} or null if not found\n */\n", "method_name": "lookup", "codes": ["public static Meteor lookup(HttpServletRequest r){\n    return new Meteor(r);\n}"], "code_level": "class_runnable", "_id": "6367667d1a6d9265ec0173ff", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor_lookup.java"}
{"generate_results": [{"generate_code": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    listeners.add(e);\n    return this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add a  {@link AtmosphereResourceEventListener}.\n * @param e an instance of AtmosphereResourceEventListener\n */\n", "method_name": "addEventListener", "codes": ["@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    listeners.add(e);\n    return this;\n}"], "code_level": "project_runnable", "_id": "6367667c1a6d9265ec0173fb", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereResourceImpl_addEventListener.class"}
{"generate_results": [{"generate_code": "public InputStream next() throws IOException {\n    if (!stack.isEmpty()) {\n        return stack.pop();\n    } else {\n        return null;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.\n */\n", "method_name": "next", "codes": ["public InputStream next() throws IOException {\n    if (!stack.isEmpty()) {\n        return stack.pop();\n    } else {\n        return null;\n    }\n}"], "code_level": "class_runnable", "_id": "636766811a6d9265ec017496", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/InputStreamIterator_next.class"}
{"generate_results": [{"generate_code": "private static File[] classPath(){\n    String[] paths = System.getProperty(\"java.class.path\").split(\":\");\n    File[] files = new File[paths.length];\n    for(int i=0;i<paths.length;i++){\n        files[i] = new File(paths[i]);\n    }\n    return files;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the class path of the current JVM instance as an array of  {@link File} objects.\n */\n", "method_name": "classPath", "codes": ["private static File[] classPath(){\n    String[] paths = System.getProperty(\"java.class.path\").split(\":\");\n    File[] files = new File[paths.length];\n    for(int i=0;i<paths.length;i++){\n        files[i] = new File(paths[i]);\n    }\n    return files;\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174c9", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/ClassFileIterator_classPath.class"}
{"generate_results": [{"generate_code": "public void readFrom(final InputStream in) throws IOException {\n    int bytesRead = 0;\n    while ((bytesRead = in.read(buffer)) != -1) {\n        pointer += bytesRead;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.\n */\n", "method_name": "readFrom", "codes": ["public void readFrom(final InputStream in) throws IOException {\n    int bytesRead = 0;\n    while ((bytesRead = in.read(buffer)) != -1) {\n        pointer += bytesRead;\n    }\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017482", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/ClassFileBuffer_readFrom.class"}
{"generate_results": [{"generate_code": "private void addReverse(final InputStream[] files){\n    Deque<InputStream> stack = new LinkedList<>();\n    for(int i=files.length-1;i>=0;i--){\n        stack.push(files[i]);\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final InputStream[] files){\n    Deque<InputStream> stack = new LinkedList<>();\n    for(int i=files.length-1;i>=0;i--){\n        stack.push(files[i]);\n    }\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017477", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/InputStreamIterator_addReverse.class"}
{"generate_results": [{"generate_code": "private void addReverse(final File[] files){\n    Deque<File> stack = new LinkedList<>();\n    for (File file : files) {\n        stack.push(file);\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.io.File.getName()\" because the return value of \"java.util.Deque.peek()\" is null\n\tat org.atmosphere.util.annotation.FileIterator_addReverse.main(FileIterator_addReverse.java:16)\n", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final File[] files){\n    Deque<File> stack = new LinkedList<>();\n    for (File file : files) {\n        stack.push(file);\n    }\n}"], "code_level": "class_runnable", "_id": "636766831a6d9265ec0174eb", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/FileIterator_addReverse.class"}
{"generate_results": [{"generate_code": "public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == -1){\n        return -1;\n    }else{\n        return System.currentTimeMillis();\n    }\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * The last time, in milliseconds, a write operation occurred.\n * @return this\n */\n", "method_name": "lastWriteTimeStampInMilliseconds", "codes": ["public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == -1){\n        return -1;\n    }else{\n        return System.currentTimeMillis();\n    }\n}"], "code_level": "class_runnable", "_id": "6367667e1a6d9265ec01743a", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/websocket/WebSocket_lastWriteTimeStampInMilliseconds.class"}
{"generate_results": [{"generate_code": "@Override public Action inspect(AtmosphereResource r){\n    if(r.getTransport() == UNDEFINED){\n        return Action.SUSPEND;\n    }\n    return Action.CONTINUE;\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereResourceLifecycleInterceptor.java:113: error: cannot find symbol\n    if(r.getTransport() == UNDEFINED){\n        ^\n  symbol:   method getTransport()\n  location: variable r of type AtmosphereResource\n1 error\n", "is_pass": false}], "docstring": "/** \n * Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.\n * @param r a {@link AtmosphereResource}\n * @return {@link Action#CONTINUE}\n */\n", "method_name": "inspect", "codes": ["@Override public Action inspect(AtmosphereResource r){\n    if(r.getTransport() == UNDEFINED){\n        return Action.SUSPEND;\n    }\n    return Action.CONTINUE;\n}"], "code_level": "project_runnable", "_id": "636766851a6d9265ec017515", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor_inspect.java"}
{"generate_results": [{"generate_code": "public static String[] trimArrayElements(String[] array){\n    for(int i=0;i<array.length;i++){\n        array[i]=trim(array[i]);\n    }\n    return array;\n}", "errormessage": "compile error", "error_detail_message": "Strings.java:828: error: cannot find symbol\n        array[i]=trim(array[i]);\n                 ^\n  symbol:   method trim(String)\n  location: class Strings\nNote: /home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Objects.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Trim the elements of the given String array, calling <code>String.trim()</code> on each of them.\n * @param array the original String array\n * @return the resulting array (of the same size) with trimmed elements\n */\n", "method_name": "trimArrayElements", "codes": ["public static String[] trimArrayElements(String[] array){\n    for(int i=0;i<array.length;i++){\n        array[i]=trim(array[i]);\n    }\n    return array;\n}"], "code_level": "self_contained", "_id": "6367676d1a6d9265ec018229", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Strings_trimArrayElements.java"}
{"generate_results": [{"generate_code": "public static int nullSafeHashCode(long[] array){\n    if(array == null) return 0;\n    int hashCode = INITIAL_HASH;\n    for(long value : array){\n        hashCode = (hashCode * MULTIPLIER + value) % Integer.MAX_VALUE;\n    }\n    return hashCode;\n}", "errormessage": "compile error", "error_detail_message": "Objects.java:481: error: incompatible types: possible lossy conversion from long to int\n        hashCode = (hashCode * MULTIPLIER + value) % Integer.MAX_VALUE;\n                                                   ^\nNote: Objects.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0.\n * @param array the long array to obtain a hashcode\n * @return the long array's hashcode, which could be 0 if the array is null.\n */\n", "method_name": "nullSafeHashCode", "codes": ["public static int nullSafeHashCode(long[] array){\n    if(array == null) return 0;\n    int hashCode = INITIAL_HASH;\n    for(long value : array){\n        hashCode = (hashCode * MULTIPLIER + value) % Integer.MAX_VALUE;\n    }\n    return hashCode;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181aa", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Objects_nullSafeHashCode.java"}
{"generate_results": [{"generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n    return str.toLowerCase().startsWith(prefix.toLowerCase());\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.toLowerCase()\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.startsWithIgnoreCase(Strings.java:291)\n\tat io.jsonwebtoken.lang.Strings_startsWithIgnoreCase.main(Strings_startsWithIgnoreCase.java:8)\n", "is_pass": false}], "docstring": "/** \n * Returns  {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @param str the String to check\n * @param prefix the prefix to look for\n * @return {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @see java.lang.String#startsWith\n */\n", "method_name": "startsWithIgnoreCase", "codes": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n    return str.toLowerCase().startsWith(prefix.toLowerCase());\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181df", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_startsWithIgnoreCase.class"}
{"generate_results": [{"generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n    Iterator it = candidates.iterator();\n    while(it.hasNext()){\n        Object obj = it.next();\n        if(source.contains(obj)){\n            return obj;\n        }\n    }\n    return null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.util.Collection.iterator()\" because \"<parameter2>\" is null\n\tat io.jsonwebtoken.lang.Collections.findFirstMatch(Collections.java:204)\n\tat io.jsonwebtoken.lang.Collections_findFirstMatch.main(Collections_findFirstMatch.java:23)\n", "is_pass": false}], "docstring": "/** \n * Return the first element in '<code>candidates</code>' that is contained in '<code>source</code>'. If no element in '<code>candidates</code>' is present in '<code>source</code>' returns <code>null</code>. Iteration order is {@link Collection} implementation specific.\n * @param source the source Collection\n * @param candidates the candidates to search for\n * @return the first present object, or <code>null</code> if not found\n */\n", "method_name": "findFirstMatch", "codes": ["public static Object findFirstMatch(Collection source,Collection candidates){\n    Iterator it = candidates.iterator();\n    while(it.hasNext()){\n        Object obj = it.next();\n        if(source.contains(obj)){\n            return obj;\n        }\n    }\n    return null;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181e2", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Collections_findFirstMatch.class"}
{"generate_results": [{"generate_code": "public static String trimTrailingWhitespace(String str){\n    return str.trim();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.trim()\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.trimTrailingWhitespace(Strings.java:239)\n\tat io.jsonwebtoken.lang.Strings_trimTrailingWhitespace.main(Strings_trimTrailingWhitespace.java:17)\n", "is_pass": false}], "docstring": "/** \n * Trim trailing whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimTrailingWhitespace", "codes": ["public static String trimTrailingWhitespace(String str){\n    return str.trim();\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181ee", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimTrailingWhitespace.class"}
{"generate_results": [{"generate_code": "public static Object quoteIfString(Object obj){\nif(obj instanceof String)\nreturn \"\\\"\" + obj.toString() + \"\\\"\";\nelse\nreturn obj;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Turn the given Object into a String with single quotes if it is a String; keeping the Object as-is else.\n * @param obj the input Object (e.g. \"myString\")\n * @return the quoted String (e.g. \"'myString'\"),or the input object as-is if not a String\n */\n", "method_name": "quoteIfString", "codes": ["public static Object quoteIfString(Object obj){\nif(obj instanceof String)\nreturn \"\\\"\" + obj.toString() + \"\\\"\";\nelse\nreturn obj;\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181bf", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_quoteIfString.class"}
{"generate_results": [{"generate_code": "public static String trimLeadingWhitespace(String str){\n    return str.replaceAll(\"^\\\\s+\",\"\");\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.replaceAll(String, String)\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.trimLeadingWhitespace(Strings.java:222)\n\tat io.jsonwebtoken.lang.Strings_trimLeadingWhitespace.main(Strings_trimLeadingWhitespace.java:17)\n", "is_pass": false}], "docstring": "/** \n * Trim leading whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimLeadingWhitespace", "codes": ["public static String trimLeadingWhitespace(String str){\n    return str.replaceAll(\"^\\\\s+\",\"\");\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181cd", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimLeadingWhitespace.class"}
{"generate_results": [{"generate_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = new ArrayList<>();\n    while (enumeration.hasMoreElements()){\n        list.add(enumeration.nextElement());\n    }\n    return list.toArray(new String[0]);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copy the given Enumeration into a String array. The Enumeration must contain String elements only.\n * @param enumeration the Enumeration to copy\n * @return the String array (<code>null</code> if the passed-inEnumeration was <code>null</code>)\n */\n", "method_name": "toStringArray", "codes": ["public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = new ArrayList<>();\n    while (enumeration.hasMoreElements()){\n        list.add(enumeration.nextElement());\n    }\n    return list.toArray(new String[0]);\n}"], "code_level": "slib_runnable", "_id": "636767691a6d9265ec0181ae", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_toStringArray.class"}
{"generate_results": [{"generate_code": "public static String deleteAny(String inString,String charsToDelete){\n    if(inString==null||charsToDelete==null)\n        return inString;\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;i<inString.length();i++){\n        char c=inString.charAt(i);\n        if(!charsToDelete.contains(c+\"\"))\n            sb.append(c);\n    }\n    return sb.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Delete any character in a given String.\n * @param inString the original String\n * @param charsToDelete a set of characters to delete.E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n * @return the resulting String\n */\n", "method_name": "deleteAny", "codes": ["public static String deleteAny(String inString,String charsToDelete){\n    if(inString==null||charsToDelete==null)\n        return inString;\n    StringBuilder sb=new StringBuilder();\n    for(int i=0;i<inString.length();i++){\n        char c=inString.charAt(i);\n        if(!charsToDelete.contains(c+\"\"))\n            sb.append(c);\n    }\n    return sb.toString();\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec01820b", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_deleteAny.class"}
{"generate_results": [{"generate_code": "public static boolean containsInstance(Collection collection,Object element){\n    return collection.contains(element);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the given Collection contains the given element instance. <p>Enforces the given instance to be present, rather than returning <code>true</code> for an equal element as well.\n * @param collection the Collection to check\n * @param element the element to look for\n * @return <code>true</code> if found, <code>false</code> else\n */\n", "method_name": "containsInstance", "codes": ["public static boolean containsInstance(Collection collection,Object element){\n    return collection.contains(element);\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018223", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Collections_containsInstance.class"}
{"generate_results": [{"generate_code": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    int length = array1.length + array2.length;\n    String[] result = new String[length];\n    System.arraycopy(array1, 0, result, 0, array1.length);\n    System.arraycopy(array2, 0, result, array1.length, array2.length);\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"<parameter2>\" is null\n\tat io.jsonwebtoken.lang.Strings.concatenateStringArrays(Strings.java:737)\n\tat io.jsonwebtoken.lang.Strings_concatenateStringArrays.main(Strings_concatenateStringArrays.java:14)\n", "is_pass": false}], "docstring": "/** \n * Concatenate the given String arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.\n * @param array1 the first array (can be <code>null</code>)\n * @param array2 the second array (can be <code>null</code>)\n * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n */\n", "method_name": "concatenateStringArrays", "codes": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    int length = array1.length + array2.length;\n    String[] result = new String[length];\n    System.arraycopy(array1, 0, result, 0, array1.length);\n    System.arraycopy(array2, 0, result, array1.length, array2.length);\n    return result;\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018204", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_concatenateStringArrays.class"}
{"generate_results": [{"generate_code": "public static String[] addStringToArray(String[] array,String str){\n    // Check if the array is null\n    if(array == null){\n        throw new IllegalArgumentException(\"Array cannot be null\");\n    }\n    // Create a new array with one more element than the original array\n    String[] newArray = new String[array.length + 1];\n    // Copy the elements from the original array to the new array\n    System.arraycopy(array, 0, newArray, 0, array.length);\n    // Add the new string to the end of the new array\n    newArray[array.length] = str;\n    return newArray;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Append the given String to the given String array, returning a new array consisting of the input array contents plus the given String.\n * @param array the array to append to (can be <code>null</code>)\n * @param str the String to append\n * @return the new array (never <code>null</code>)\n */\n", "method_name": "addStringToArray", "codes": ["public static String[] addStringToArray(String[] array,String str){\n    // Check if the array is null\n    if(array == null){\n        throw new IllegalArgumentException(\"Array cannot be null\");\n    }\n    // Create a new array with one more element than the original array\n    String[] newArray = new String[array.length + 1];\n    // Copy the elements from the original array to the new array\n    System.arraycopy(array, 0, newArray, 0, array.length);\n    // Add the new string to the end of the new array\n    newArray[array.length] = str;\n    return newArray;\n}"], "code_level": "slib_runnable", "_id": "6367676a1a6d9265ec0181d4", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_addStringToArray.class"}
{"generate_results": [{"generate_code": "public static int countOccurrencesOf(String str,String sub){\n    if(str==null||sub==null) return 0;\n    int count=0;\n    for(int i=0;i<str.length()-sub.length()+1;i++){\n        if(str.substring(i,i+sub.length()).equals(sub)){\n            count++;\n        }\n    }\n    return count;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the number of occurrences the substring  {@code sub} appears in string {@code str}.\n * @param str string to search in. Return 0 if this is null.\n * @param sub string to search for. Return 0 if this is null.\n * @return the number of occurrences the substring {@code sub} appears in string {@code str}.\n */\n", "method_name": "countOccurrencesOf", "codes": ["public static int countOccurrencesOf(String str,String sub){\n    if(str==null||sub==null) return 0;\n    int count=0;\n    for(int i=0;i<str.length()-sub.length()+1;i++){\n        if(str.substring(i,i+sub.length()).equals(sub)){\n            count++;\n        }\n    }\n    return count;\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181dd", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_countOccurrencesOf.class"}
{"generate_results": [{"generate_code": "public static String stripFilenameExtension(String path){\n    int lastIndexOf = path.lastIndexOf('.');\n    return lastIndexOf == -1 ? path : path.substring(0, lastIndexOf);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.lastIndexOf(int)\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.stripFilenameExtension(Strings.java:551)\n\tat io.jsonwebtoken.lang.Strings_stripFilenameExtension.main(Strings_stripFilenameExtension.java:6)\n", "is_pass": false}], "docstring": "/** \n * Strip the filename extension from the given path, e.g. \"mypath/myfile.txt\" -&gt; \"mypath/myfile\".\n * @param path the file path (may be <code>null</code>)\n * @return the path with stripped filename extension,or <code>null</code> if none\n */\n", "method_name": "stripFilenameExtension", "codes": ["public static String stripFilenameExtension(String path){\n    int lastIndexOf = path.lastIndexOf('.');\n    return lastIndexOf == -1 ? path : path.substring(0, lastIndexOf);\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec018220", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_stripFilenameExtension.class"}
{"generate_results": [{"generate_code": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n    // Trim leading character\n    while (str.startsWith(\"\" + leadingCharacter)) {\n        str = str.substring(1);\n    }\n    return str;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.startsWith(String)\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.trimLeadingCharacter(Strings.java:257)\n\tat io.jsonwebtoken.lang.Strings_trimLeadingCharacter.main(Strings_trimLeadingCharacter.java:10)\n", "is_pass": false}], "docstring": "/** \n * Trim all occurrences of the supplied leading character from the given String.\n * @param str the String to check\n * @param leadingCharacter the leading character to be trimmed\n * @return the trimmed String\n */\n", "method_name": "trimLeadingCharacter", "codes": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n    // Trim leading character\n    while (str.startsWith(\"\" + leadingCharacter)) {\n        str = str.substring(1);\n    }\n    return str;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a7", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimLeadingCharacter.class"}
{"generate_results": [{"generate_code": "public static String[] split(String toSplit,String delimiter){\n    int index = toSplit.indexOf(delimiter);\n    if(index == -1) {\n        return new String[]{toSplit};\n    }\n    return new String[]{toSplit.substring(0,index),toSplit.substring(index+delimiter.length())};\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.indexOf(String)\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.split(Strings.java:862)\n\tat io.jsonwebtoken.lang.Strings_split.main(Strings_split.java:12)\n", "is_pass": false}], "docstring": "/** \n * Split a String at the first occurrence of the delimiter. Does not include the delimiter in the result.\n * @param toSplit the string to split\n * @param delimiter to split the string up with\n * @return a two element array with index 0 being before the delimiter, andindex 1 being after the delimiter (neither element includes the delimiter); or <code>null</code> if the delimiter wasn't found in the given input String\n */\n", "method_name": "split", "codes": ["public static String[] split(String toSplit,String delimiter){\n    int index = toSplit.indexOf(delimiter);\n    if(index == -1) {\n        return new String[]{toSplit};\n    }\n    return new String[]{toSplit.substring(0,index),toSplit.substring(index+delimiter.length())};\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a6", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_split.class"}
{"generate_results": [{"generate_code": "public static String applyRelativePath(String path,String relativePath){\n    // Validate the input parameters\n    if (path == null || relativePath == null) {\n        throw new IllegalArgumentException(\"Both path and relativePath cannot be null\");\n    }\n    // Split the path into components using FOLDER_SEPARATOR as the delimiter\n    String[] pathComponents = path.split(FOLDER_SEPARATOR);\n    // Split the relative path into components\n    String[] relativePathComponents = relativePath.split(FOLDER_SEPARATOR);\n    // Construct the new full file path by concatenating the path components and the relative path components\n    StringBuilder fullPath = new StringBuilder();\n    for (int i = 0; i < pathComponents.length; i++) {\n        fullPath.append(pathComponents[i]);\n        if (i < pathComponents.length - 1) {\n            fullPath.append(FOLDER_SEPARATOR);\n        }\n    }\n    for (int i = 0; i < relativePathComponents.length; i++) {\n        fullPath.append(relativePathComponents[i]);\n        if (i < relativePathComponents.length - 1) {\n            fullPath.append(FOLDER_SEPARATOR);\n        }\n    }\n    return fullPath.toString();\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Apply the given relative path to the given path, assuming standard Java folder separation (i.e. \"/\" separators).\n * @param path the path to start from (usually a full file path)\n * @param relativePath the relative path to apply(relative to the full file path above)\n * @return the full file path that results from applying the relative path\n */\n", "method_name": "applyRelativePath", "codes": ["public static String applyRelativePath(String path,String relativePath){\n    // Validate the input parameters\n    if (path == null || relativePath == null) {\n        throw new IllegalArgumentException(\"Both path and relativePath cannot be null\");\n    }\n    // Split the path into components using FOLDER_SEPARATOR as the delimiter\n    String[] pathComponents = path.split(FOLDER_SEPARATOR);\n    // Split the relative path into components\n    String[] relativePathComponents = relativePath.split(FOLDER_SEPARATOR);\n    // Construct the new full file path by concatenating the path components and the relative path components\n    StringBuilder fullPath = new StringBuilder();\n    for (int i = 0; i < pathComponents.length; i++) {\n        fullPath.append(pathComponents[i]);\n        if (i < pathComponents.length - 1) {\n            fullPath.append(FOLDER_SEPARATOR);\n        }\n    }\n    for (int i = 0; i < relativePathComponents.length; i++) {\n        fullPath.append(relativePathComponents[i]);\n        if (i < relativePathComponents.length - 1) {\n            fullPath.append(FOLDER_SEPARATOR);\n        }\n    }\n    return fullPath.toString();\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181ac", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_applyRelativePath.class"}
{"generate_results": [{"generate_code": "public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n    int len = substring.length();\n    if(index+len > str.length()){\n        return false;\n    }\n    for(int i=0;i<len;i++){\n        if(str.charAt(index+i) != substring.charAt(i)){\n            return false;\n        }\n    }\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns  {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n * @param str the original string (or StringBuilder)\n * @param index the index in the original string to start matching against\n * @param substring the substring to match at the given index\n * @return {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n */\n", "method_name": "substringMatch", "codes": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n    int len = substring.length();\n    if(index+len > str.length()){\n        return false;\n    }\n    for(int i=0;i<len;i++){\n        if(str.charAt(index+i) != substring.charAt(i)){\n            return false;\n        }\n    }\n    return true;\n}"], "code_level": "slib_runnable", "_id": "6367676b1a6d9265ec0181e9", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_substringMatch.class"}
{"generate_results": [{"generate_code": "protected static void deleteFile(String fileName){\n    File f = new File(fileName);\n    if(f.exists()){\n        try{\n            f.delete();\n        }catch(IOException e){\n            LogLog.error(\"Could not delete file \" + fileName,e);\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "CompositeRollingAppender.java:621: error: exception IOException is never thrown in body of corresponding try statement\n        }catch(IOException e){\n         ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Delete's the specified file if it exists \n */\n", "method_name": "deleteFile", "codes": ["protected static void deleteFile(String fileName){\n    File f = new File(fileName);\n    if(f.exists()){\n        try{\n            f.delete();\n        }catch(IOException e){\n            LogLog.error(\"Could not delete file \" + fileName,e);\n        }\n    }\n}"], "code_level": "slib_runnable", "_id": "636767821a6d9265ec0183a0", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/CompositeRollingAppender_deleteFile.java"}
{"generate_results": [{"generate_code": "public String format(LoggingEvent event){\n    StringBuffer sbuf = new StringBuffer(BUF_SIZE);\n    PatternConverter head = createPatternParser(pattern);\n    head.format(sbuf, event);\n    return sbuf.toString();\n}", "errormessage": "compile error", "error_detail_message": "PatternLayout.java:494: error: incompatible types: PatternParser cannot be converted to PatternConverter\n    PatternConverter head = createPatternParser(pattern);\n                                               ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Produces a formatted string as specified by the conversion pattern.\n */\n", "method_name": "format", "codes": ["public String format(LoggingEvent event){\n    StringBuffer sbuf = new StringBuffer(BUF_SIZE);\n    PatternConverter head = createPatternParser(pattern);\n    head.format(sbuf, event);\n    return sbuf.toString();\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01830f", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/PatternLayout_format.java"}
{"generate_results": [{"generate_code": "protected void subAppend(LoggingEvent event){\n    try{\n        // Create a temporary file\n        File tempFile = new File(dir, \"temp_\" + System.currentTimeMillis() + \".log\");\n        \n        // Get the writer for the temporary file\n        Writer writer = new BufferedWriter(new FileWriter(tempFile));\n        \n        // Write the log message to the temporary file\n        writer.write(event.getMessage());\n        \n        // Close the writer\n        writer.close();\n    } catch (Exception e) {\n        // Handle any exceptions that occur during the process\n        e.printStackTrace();\n    }\n}", "errormessage": "compile error", "error_detail_message": "TempFileAppender.java:181: error: class, interface, enum, or record expected\n  public boolean requiresLayout() {\n         ^\nTempFileAppender.java:183: error: class, interface, enum, or record expected\n  }\n  ^\nTempFileAppender.java:185: error: class, interface, enum, or record expected\n  public void close() {\n         ^\n3 errors\n", "is_pass": false}], "docstring": "/** \n * This method does actual writing\n */\n", "method_name": "subAppend", "codes": ["protected void subAppend(LoggingEvent event){\n    try{\n        // Create a temporary file\n        File tempFile = new File(dir, \"temp_\" + System.currentTimeMillis() + \".log\");\n        \n        // Get the writer for the temporary file\n        Writer writer = new BufferedWriter(new FileWriter(tempFile));\n        \n        // Write the log message to the temporary file\n        writer.write(event.getMessage());\n        \n        // Close the writer\n        writer.close();\n    } catch (Exception e) {\n        // Handle any exceptions that occur during the process\n        e.printStackTrace();\n    }\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/TempFileAppender_subAppend.java"}
{"generate_results": [{"generate_code": "public static String peek(){\n    return stack.peek();\n}", "errormessage": "compile error", "error_detail_message": "NDC.java:309: error: cannot find symbol\n    return stack.peek();\n           ^\n  symbol:   variable stack\n  location: class NDC\nNote: NDC.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Looks at the last diagnostic context at the top of this NDC without removing it. <p>The returned value is the value that was pushed last. If no context is available, then the empty string \"\" is returned.\n * @return String The innermost diagnostic context.\n */\n", "method_name": "peek", "codes": ["public static String peek(){\n    return stack.peek();\n}"], "code_level": "class_runnable", "_id": "636767831a6d9265ec0183c9", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/NDC_peek.java"}
{"generate_results": [{"generate_code": "public Logger exists(String name){\n    // Implement the logic to check if the named logger exists\n    // Return the reference of the existing logger if it exists, otherwise return null\n}", "errormessage": "compile error", "error_detail_message": "Hierarchy.java:312: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  Enumeration getCurrentCategories() {\n              ^\nHierarchy.java:350: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  void overrideAsNeeded(String override) {\n       ^\nHierarchy.java:398: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  void setDisableOverride(String override) {\n       ^\nHierarchy.java:148: error: missing return statement\n}\n^\nNote: Hierarchy.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n3 warnings\n", "is_pass": false}], "docstring": "/** \n * Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns <code>null</code>.\n * @param name The name of the logger to search for.\n */\n", "method_name": "exists", "codes": ["public Logger exists(String name){\n    // Implement the logic to check if the named logger exists\n    // Return the reference of the existing logger if it exists, otherwise return null\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01832e", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/Hierarchy_exists.java"}
{"generate_results": [{"generate_code": "public String format(final LoggingEvent event){\n    // Validate the input\n    if(event == null){\n        throw new IllegalArgumentException(\"LoggingEvent cannot be null\");\n    }\n    // Perform boundary checks\n    if(conversionPattern == null || conversionPattern.isEmpty()){\n        throw new IllegalArgumentException(\"Conversion pattern cannot be null or empty\");\n    }\n    // Capture and handle runtime errors\n    try {\n        // Format the logging event using the conversion pattern\n        return OptionConverter.formatConversionPattern(conversionPattern, event);\n    } catch (Exception e) {\n        // Handle any runtime errors by logging them\n        System.err.println(\"Error formatting logging event: \" + e.getMessage());\n        return \"\";\n    }\n}", "errormessage": "compile error", "error_detail_message": "EnhancedPatternLayout.java:435: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected final int BUF_SIZE = 256;\n                      ^\nEnhancedPatternLayout.java:441: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected final int MAX_CAPACITY = 1024;\n                      ^\nEnhancedPatternLayout.java:549: error: cannot find symbol\n        return OptionConverter.formatConversionPattern(conversionPattern, event);\n                              ^\n  symbol:   method formatConversionPattern(String,LoggingEvent)\n  location: class OptionConverter\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Formats a logging event to a writer.\n * @param event logging event to be formatted.\n */\n", "method_name": "format", "codes": ["public String format(final LoggingEvent event){\n    // Validate the input\n    if(event == null){\n        throw new IllegalArgumentException(\"LoggingEvent cannot be null\");\n    }\n    // Perform boundary checks\n    if(conversionPattern == null || conversionPattern.isEmpty()){\n        throw new IllegalArgumentException(\"Conversion pattern cannot be null or empty\");\n    }\n    // Capture and handle runtime errors\n    try {\n        // Format the logging event using the conversion pattern\n        return OptionConverter.formatConversionPattern(conversionPattern, event);\n    } catch (Exception e) {\n        // Handle any runtime errors by logging them\n        System.err.println(\"Error formatting logging event: \" + e.getMessage());\n        return \"\";\n    }\n}"], "code_level": "project_runnable", "_id": "6367677b1a6d9265ec0182bd", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/EnhancedPatternLayout_format.java"}
{"generate_results": [{"generate_code": "private Class findClass(final String className) throws ClassNotFoundException {\n    return Thread.currentThread().getContextClassLoader().loadClass(className);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n", "method_name": "findClass", "codes": ["private Class findClass(final String className) throws ClassNotFoundException {\n    return Thread.currentThread().getContextClassLoader().loadClass(className);\n}"], "code_level": "slib_runnable", "_id": "636767791a6d9265ec018263", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/EnhancedThrowableRenderer_findClass.class"}
{"generate_results": [{"generate_code": "public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable(){\n        public void run(){\n            synchronized(_lock){\n                _table.add(lr);\n            }\n        }\n    });\n}", "errormessage": "compile error", "error_detail_message": "LogBrokerMonitor.java:250: error: no suitable method found for add(LogRecord)\n                _table.add(lr);\n                      ^\n    method Component.add(PopupMenu) is not applicable\n      (argument mismatch; LogRecord cannot be converted to PopupMenu)\n    method Container.add(Component) is not applicable\n      (argument mismatch; LogRecord cannot be converted to Component)\nLogBrokerMonitor.java:1389: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected void trackTableScrollPane() {\n                 ^\nNote: LogBrokerMonitor.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: LogBrokerMonitor.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n1 warning\n", "is_pass": false}], "docstring": "/** \n * Add a log record message to be displayed in the LogTable. This method is thread-safe as it posts requests to the SwingThread rather than processing directly.\n */\n", "method_name": "addMessage", "codes": ["public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable(){\n        public void run(){\n            synchronized(_lock){\n                _table.add(lr);\n            }\n        }\n    });\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec018257", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/LogBrokerMonitor_addMessage.java"}
{"generate_results": [{"generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n    // Check if the row is valid\n    if(row < 0 || row >= table.getRowCount()){\n        throw new IllegalArgumentException(\"Invalid row index\");\n    }\n    \n    // Select the row\n    table.setRowSelectionInterval(row,row);\n    \n    // Scroll the JScrollPane to the row\n    int viewPosition = table.rowAtPoint(table.getCellRect(row,0,true).getLocation());\n    pane.getViewport().setViewPosition(new Point(0,viewPosition));\n}", "errormessage": "compile error", "error_detail_message": "LF5SwingUtils.java:70: error: cannot find symbol\n    pane.getViewport().setViewPosition(new Point(0,viewPosition));\n                                           ^\n  symbol:   class Point\n  location: class LF5SwingUtils\n1 error\n", "is_pass": false}], "docstring": "/** \n * Selects a the specified row in the specified JTable and scrolls the specified JScrollpane to the newly selected row. More importantly, the call to repaint() delayed long enough to have the table properly paint the newly selected row which may be offscre\n * @param table should belong to the specified JScrollPane\n */\n", "method_name": "selectRow", "codes": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n    // Check if the row is valid\n    if(row < 0 || row >= table.getRowCount()){\n        throw new IllegalArgumentException(\"Invalid row index\");\n    }\n    \n    // Select the row\n    table.setRowSelectionInterval(row,row);\n    \n    // Scroll the JScrollPane to the row\n    int viewPosition = table.rowAtPoint(table.getCellRect(row,0,true).getLocation());\n    pane.getViewport().setViewPosition(new Point(0,viewPosition));\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183ff", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/LF5SwingUtils_selectRow.java"}
{"generate_results": [{"generate_code": "public static void createConfigurationDirectory(){\n    String configDir = System.getProperty(\"user.home\") + File.separator + \"Documents\" + File.separator + \"lf5\";\n    File dir = new File(configDir);\n    if(!dir.exists()){\n        dir.mkdirs();\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Creates the directory where the MRU file list will be written. The \"lf5\" directory is created in the Documents and Settings directory on Windows 2000 machines and where ever the user.home variable points on all other platforms.\n */\n", "method_name": "createConfigurationDirectory", "codes": ["public static void createConfigurationDirectory(){\n    String configDir = System.getProperty(\"user.home\") + File.separator + \"Documents\" + File.separator + \"lf5\";\n    File dir = new File(configDir);\n    if(!dir.exists()){\n        dir.mkdirs();\n    }\n}"], "code_level": "slib_runnable", "_id": "636767871a6d9265ec01846d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/viewer/configure/MRUFileManager_createConfigurationDirectory.class"}
{"generate_results": [{"generate_code": "public synchronized void send(final String message){\n    for (final Socket connection : connections) {\n        try {\n            PrintWriter writer = new PrintWriter(connection.getOutputStream(), true);\n            writer.println(message);\n        } catch (IOException e) {\n            LogLog.error(\"Failed to send message\", e);\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "TelnetAppender.java:176: error: incompatible types: Object cannot be converted to Socket\n    for (final Socket connection : connections) {\n                                   ^\nNote: TelnetAppender.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: TelnetAppender.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * sends a message to each of the clients in telnet-friendly output. \n */\n", "method_name": "send", "codes": ["public synchronized void send(final String message){\n    for (final Socket connection : connections) {\n        try {\n            PrintWriter writer = new PrintWriter(connection.getOutputStream(), true);\n            writer.println(message);\n        } catch (IOException e) {\n            LogLog.error(\"Failed to send message\", e);\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec018347", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/net/TelnetAppender_send.java"}
{"generate_results": [{"generate_code": "protected void append(LoggingEvent event){\n    if(layout != null && !layout.ignoresThrowable()){\n        PrintWriter writer = new PrintWriter(new IntendedAppendable());\n        try{\n            writer.print(layout.format(event));\n        }finally{\n            writer.close();\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "TelnetAppender.java:227: error: class, interface, enum, or record expected\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n", "method_name": "append", "codes": ["protected void append(LoggingEvent event){\n    if(layout != null && !layout.ignoresThrowable()){\n        PrintWriter writer = new PrintWriter(new IntendedAppendable());\n        try{\n            writer.print(layout.format(event));\n        }finally{\n            writer.close();\n        }\n    }\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823e", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/net/TelnetAppender_append.java"}
{"generate_results": [{"generate_code": "public void put(LoggingEvent o){\n    // Validate the input\n    if (o == null) {\n        throw new IllegalArgumentException(\"Input cannot be null\");\n    }\n    // Perform boundary checks\n    if (buf.length < numElements + 1) {\n        resize(buf.length * 2);\n    }\n    // Place the LoggingEvent in the buffer\n    buf[numElements++] = o;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Input cannot be null\n\tat org.apache.log4j.helpers.BoundedFIFO.put(BoundedFIFO.java:73)\n\tat org.apache.log4j.helpers.BoundedFIFO_put.main(BoundedFIFO_put.java:27)\n", "is_pass": false}], "docstring": "/** \n * Place a  {@link LoggingEvent} in the buffer. If the buffer is fullthen the event is <b>silently dropped</b>. It is the caller's responsability to make sure that the buffer has free space.  \n */\n", "method_name": "put", "codes": ["public void put(LoggingEvent o){\n    // Validate the input\n    if (o == null) {\n        throw new IllegalArgumentException(\"Input cannot be null\");\n    }\n    // Perform boundary checks\n    if (buf.length < numElements + 1) {\n        resize(buf.length * 2);\n    }\n    // Place the LoggingEvent in the buffer\n    buf[numElements++] = o;\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec01834b", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/BoundedFIFO_put.class"}
{"generate_results": [{"generate_code": "public static String findAndSubst(String key,Properties props){\n    try{\n        String value = props.getProperty(key);\n        return substVars(value,props);\n    }catch(Exception e){\n        return value;\n    }\n}", "errormessage": "compile error", "error_detail_message": "OptionConverter.java:295: error: cannot find symbol\n        return value;\n               ^\n  symbol:   variable value\n  location: class OptionConverter\nNote: OptionConverter.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: OptionConverter.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Find the value corresponding to <code>key</code> in <code>props</code>. Then perform variable substitution on the found value.\n */\n", "method_name": "findAndSubst", "codes": ["public static String findAndSubst(String key,Properties props){\n    try{\n        String value = props.getProperty(key);\n        return substVars(value,props);\n    }catch(Exception e){\n        return value;\n    }\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec01826d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/helpers/OptionConverter_findAndSubst.java"}
{"generate_results": [{"generate_code": "public boolean isAttached(Appender appender){\n    for(int i=0;i<appenderList.size();i++){\n        Appender temp=(Appender)appenderList.get(i);\n        if(temp==appender)\n            return true;\n    }\n    return false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns <code>true</code> if the specified appender is in the list of attached appenders, <code>false</code> otherwise.\n * @since 1.2 \n */\n", "method_name": "isAttached", "codes": ["public boolean isAttached(Appender appender){\n    for(int i=0;i<appenderList.size();i++){\n        Appender temp=(Appender)appenderList.get(i);\n        if(temp==appender)\n            return true;\n    }\n    return false;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018238", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_isAttached.class"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(String value,boolean dEfault){\n    String trimmedValue = value.trim().toLowerCase();\n    return \"true\".equals(trimmedValue) || \"false\".equals(trimmedValue) ? Boolean.parseBoolean(trimmedValue) : dEfault;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.trim()\" because \"<parameter1>\" is null\n\tat org.apache.log4j.helpers.OptionConverter.toBoolean(OptionConverter.java:129)\n\tat org.apache.log4j.helpers.OptionConverter_toBoolean.main(OptionConverter_toBoolean.java:9)\n", "is_pass": false}], "docstring": "/** \n * If <code>value</code> is \"true\", then <code>true</code> is returned. If <code>value</code> is \"false\", then <code>true</code> is returned. Otherwise, <code>default</code> is returned. <p>Case of value is unimportant.  \n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(String value,boolean dEfault){\n    String trimmedValue = value.trim().toLowerCase();\n    return \"true\".equals(trimmedValue) || \"false\".equals(trimmedValue) ? Boolean.parseBoolean(trimmedValue) : dEfault;\n}"], "code_level": "self_contained", "_id": "6367677d1a6d9265ec0182fd", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/OptionConverter_toBoolean.class"}
{"generate_results": [{"generate_code": "public void add(LoggingEvent event){\n    // Check if the buffer is full\n    if (numElems == maxSize) {\n        throw new IllegalStateException(\"Buffer is full\");\n    }\n    // Add the event to the end of the buffer\n    ea[numElems] = event;\n    // Increment the number of elements in the buffer\n    numElems++;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add an <code>event</code> as the last event in the buffer.\n */\n", "method_name": "add", "codes": ["public void add(LoggingEvent event){\n    // Check if the buffer is full\n    if (numElems == maxSize) {\n        throw new IllegalStateException(\"Buffer is full\");\n    }\n    // Add the event to the end of the buffer\n    ea[numElems] = event;\n    // Increment the number of elements in the buffer\n    numElems++;\n}"], "code_level": "class_runnable", "_id": "636767841a6d9265ec0183e8", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/CyclicBuffer_add.class"}
{"generate_results": [{"generate_code": "public void removeAppender(String name){\n    for(int i=0;i<appenderList.size();i++){\n        Appender appender = (Appender)appenderList.get(i);\n        if(appender.getName().equals(name)){\n            appenderList.remove(i);\n            break;\n        }\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Remove the appender with the name passed as parameter form the list of appenders.  \n */\n", "method_name": "removeAppender", "codes": ["public void removeAppender(String name){\n    for(int i=0;i<appenderList.size();i++){\n        Appender appender = (Appender)appenderList.get(i);\n        if(appender.getName().equals(name)){\n            appenderList.remove(i);\n            break;\n        }\n    }\n}"], "code_level": "project_runnable", "_id": "636767861a6d9265ec01844c", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_removeAppender.class"}
{"generate_results": [{"generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n    Enumeration<Appender> enumeration = getAllAppenders();\n    while(enumeration.hasMoreElements()){\n        Appender appender = enumeration.nextElement();\n        appender.doAppend(event);\n    }\n    return 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Call the <code>doAppend</code> method on all attached appenders.  \n */\n", "method_name": "appendLoopOnAppenders", "codes": ["public int appendLoopOnAppenders(LoggingEvent event){\n    Enumeration<Appender> enumeration = getAllAppenders();\n    while(enumeration.hasMoreElements()){\n        Appender appender = enumeration.nextElement();\n        appender.doAppend(event);\n    }\n    return 0;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018242", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_appendLoopOnAppenders.class"}
{"generate_results": [{"generate_code": "public boolean hasThrown(){\n    return _thrown != null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @return true if getThrown().toString() is a non-empty string.\n */\n", "method_name": "hasThrown", "codes": ["public boolean hasThrown(){\n    return _thrown != null;\n}"], "code_level": "class_runnable", "_id": "636767821a6d9265ec0183ab", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/LogRecord_hasThrown.class"}
{"generate_results": [{"generate_code": "protected int removeUnusedNodes(){\n    // Your implementation here\n}", "errormessage": "compile error", "error_detail_message": "CategoryNodeEditor.java:254: error: missing return statement\n}\n^\nNote: CategoryNodeEditor.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: CategoryNodeEditor.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Removes any inactive nodes from the Category tree.\n */\n", "method_name": "removeUnusedNodes", "codes": ["protected int removeUnusedNodes(){\n    // Your implementation here\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec018314", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/categoryexplorer/CategoryNodeEditor_removeUnusedNodes.java"}
{"generate_results": [{"generate_code": "public int compare(Object aObj1,Object aObj2){\n    EventDetails e1=(EventDetails)aObj1;\n    EventDetails e2=(EventDetails)aObj2;\n    return e1.getTimeStamp().compareTo(e2.getTimeStamp());\n}", "errormessage": "compile error", "error_detail_message": "MyTableModel.java:50: error: long cannot be dereferenced\n    return e1.getTimeStamp().compareTo(e2.getTimeStamp());\n                            ^\nNote: MyTableModel.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: MyTableModel.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * @see Comparator \n */\n", "method_name": "compare", "codes": ["public int compare(Object aObj1,Object aObj2){\n    EventDetails e1=(EventDetails)aObj1;\n    EventDetails e2=(EventDetails)aObj2;\n    return e1.getTimeStamp().compareTo(e2.getTimeStamp());\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183f2", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/chainsaw/MyTableModel_compare.java"}
{"generate_results": [{"generate_code": "public int decide(LoggingEvent event){\n    String message = event.getMessage().toString();\n    boolean match = message.contains(getStringToMatch());\n    return (match ? 1 : 0);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.lang.CharSequence.toString()\" because \"s\" is null\n\tat java.base/java.lang.String.contains(String.java:2856)\n\tat org.apache.log4j.varia.StringMatchFilter.decide(StringMatchFilter.java:102)\n\tat org.apache.log4j.varia.StringMatchFilter_decide.main(StringMatchFilter_decide.java:20)\n", "is_pass": false}], "docstring": "/** \n * Returns  {@link Filter#NEUTRAL} is there is no string match.\n */\n", "method_name": "decide", "codes": ["public int decide(LoggingEvent event){\n    String message = event.getMessage().toString();\n    boolean match = message.contains(getStringToMatch());\n    return (match ? 1 : 0);\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018250", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/varia/StringMatchFilter_decide.class"}
{"generate_results": [{"generate_code": "public void abbreviate(final int nameStart,final StringBuffer buf){\n    final String name = buf.substring(nameStart).toString();\n    final String[] parts = name.split(\"\\\\.\");\n    for (int i = 0; i < parts.length - count; i++) {\n        buf.deleteCharAt(buf.indexOf(parts[i]));\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Abbreviate name.\n * @param buf buffer to append abbreviation.\n * @param nameStart start of name to abbreviate.\n */\n", "method_name": "abbreviate", "codes": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n    final String name = buf.substring(nameStart).toString();\n    final String[] parts = name.split(\"\\\\.\");\n    for (int i = 0; i < parts.length - count; i++) {\n        buf.deleteCharAt(buf.indexOf(parts[i]));\n    }\n}"], "code_level": "class_runnable", "_id": "636767861a6d9265ec018440", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/pattern/NameAbbreviator_abbreviate.class"}
{"generate_results": [{"generate_code": "public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * @return the row id\n */\n", "method_name": "id", "codes": ["public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}"], "code_level": "project_runnable", "_id": "636767df1a6d9265ec01873c", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/query/PointOfTime_id.class"}
{"generate_results": [{"generate_code": "@Override public void accept(final METRICS data){\n    String key = data.getId();\n    if(!buffer.containsKey(key)){\n        buffer.put(key,data);\n    }else{\n        METRICS existingValue = buffer.get(key);\n        boolean merged = merge(existingValue,data);\n        if(merged){\n            buffer.remove(key);\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "MergableBufferedData.java:41: error: cannot find symbol\n    String key = data.getId();\n                     ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:46: error: cannot find symbol\n        boolean merged = merge(existingValue,data);\n                         ^\n  symbol:   method merge(METRICS,METRICS)\n  location: class MergableBufferedData<METRICS>\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Accept the data into the cache and merge with the existing value. This method is not thread safe, should avoid concurrency calling.\n * @param data to be added potentially.\n */\n", "method_name": "accept", "codes": ["@Override public void accept(final METRICS data){\n    String key = data.getId();\n    if(!buffer.containsKey(key)){\n        buffer.put(key,data);\n    }else{\n        METRICS existingValue = buffer.get(key);\n        boolean merged = merge(existingValue,data);\n        if(merged){\n            buffer.remove(key);\n        }\n    }\n}"], "code_level": "self_contained", "_id": "636767e11a6d9265ec018781", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/MergableBufferedData_accept.java"}
{"generate_results": [{"generate_code": "protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> timeRanges = new ArrayList<>();\n    while (start < end) {\n        long duration = Math.min(FETCH_DATA_DURATION, end - start);\n        timeRanges.add(new TimeRange(start, start + duration));\n        start += duration;\n    }\n    return timeRanges;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}\n */\n", "method_name": "buildTimeRanges", "codes": ["protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> timeRanges = new ArrayList<>();\n    while (start < end) {\n        long duration = Math.min(FETCH_DATA_DURATION, end - start);\n        timeRanges.add(new TimeRange(start, start + duration));\n        start += duration;\n    }\n    return timeRanges;\n}"], "code_level": "self_contained", "_id": "636767df1a6d9265ec018744", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/profiling/ebpf/analyze/EBPFProfilingAnalyzer_buildTimeRanges.class"}
{"generate_results": [{"generate_code": "public void valueAccumulation(String key,Long value){\n    Long oldValue = get(key);\n    put(key,oldValue+value);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.lang.Long.longValue()\" because \"<local3>\" is null\n\tat org.apache.skywalking.oap.server.core.analysis.metrics.DataTable.valueAccumulation(DataTable.java:62)\n\tat org.apache.skywalking.oap.server.core.analysis.metrics.DataTable_valueAccumulation.main(DataTable_valueAccumulation.java:7)\n", "is_pass": false}], "docstring": "/** \n * Accumulate the value with existing value in the same given key.\n */\n", "method_name": "valueAccumulation", "codes": ["public void valueAccumulation(String key,Long value){\n    Long oldValue = get(key);\n    put(key,oldValue+value);\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec01871c", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/analysis/metrics/DataTable_valueAccumulation.class"}
{"generate_results": [{"generate_code": "public boolean isExpired(long timestamp,long expiredThreshold){\n    long duration = timestamp - lastUpdateTimestamp;\n    return duration > expiredThreshold;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @param timestamp        of current time\n * @param expiredThreshold represents the duration between last update time and the time point removing from cache.\n * @return true means this metrics should be removed from cache.\n */\n", "method_name": "isExpired", "codes": ["public boolean isExpired(long timestamp,long expiredThreshold){\n    long duration = timestamp - lastUpdateTimestamp;\n    return duration > expiredThreshold;\n}"], "code_level": "class_runnable", "_id": "636767dd1a6d9265ec0186de", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics_isExpired.class"}
{"generate_results": [{"generate_code": "private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    for (Map.Entry<String, Object> entry : jsonObject.entrySet()) {\n        content.put(entry.getKey(), entry.getValue());\n    }\n    return content;\n}", "errormessage": "compile error", "error_detail_message": "FeishuHookCallback.java:123: error: incompatible types: Entry<String,JsonElement> cannot be converted to Entry<String,Object>\n    for (Map.Entry<String, Object> entry : jsonObject.entrySet()) {\n                                                              ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * build content,if it has ats someone set the ats\n */\n", "method_name": "buildContent", "codes": ["private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    for (Map.Entry<String, Object> entry : jsonObject.entrySet()) {\n        content.put(entry.getKey(), entry.getValue());\n    }\n    return content;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018755", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/feishu/FeishuHookCallback_buildContent.java"}
{"generate_results": [{"generate_code": "private void check(String modelName) throws IllegalStateException {\n    for (ModelColumn column : keys) {\n        if (column.getValue() == null) {\n            throw new IllegalStateException(\"Key \" + modelName + \" contains null value\");\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "StorageModels.java:333: error: cannot find symbol\n        if (column.getValue() == null) {\n                  ^\n  symbol:   method getValue()\n  location: variable column of type ModelColumn\nNote: StorageModels.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n", "method_name": "check", "codes": ["private void check(String modelName) throws IllegalStateException {\n    for (ModelColumn column : keys) {\n        if (column.getValue() == null) {\n            throw new IllegalStateException(\"Key \" + modelName + \" contains null value\");\n        }\n    }\n}"], "code_level": "self_contained", "_id": "636767de1a6d9265ec01871e", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels_check.java"}
{"generate_results": [{"generate_code": "public void overrideName(String oldName,String newName){\n    for(int i=0;i<columns.length;i++){\n        if(columns[i].equals(oldName)){\n            columns[i]=newName;\n        }\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Keep the same name replacement as  {@link ColumnName#overrideName(String,String)}\n * @param oldName to be replaced.\n * @param newName to use in the storage level.\n */\n", "method_name": "overrideName", "codes": ["public void overrideName(String oldName,String newName){\n    for(int i=0;i<columns.length;i++){\n        if(columns[i].equals(oldName)){\n            columns[i]=newName;\n        }\n    }\n}"], "code_level": "self_contained", "_id": "636767dd1a6d9265ec0186f3", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/storage/model/SQLDatabaseExtension_overrideName.class"}
{"generate_results": [{"generate_code": "public boolean isCompatible(DataTable dataset){\n    List<Bucket> existingBuckets = dataset.getBuckets();\n    List<Bucket> newBuckets = Arrays.asList(new Bucket[]{new Bucket(0L, 10L), new Bucket(10L, 20L)});\n    return existingBuckets.equals(newBuckets);\n}", "errormessage": "compile error", "error_detail_message": "BucketedValues.java:69: error: cannot find symbol\n    List<Bucket> existingBuckets = dataset.getBuckets();\n                                          ^\n  symbol:   method getBuckets()\n  location: variable dataset of type DataTable\nBucketedValues.java:70: error: incompatible types: possible lossy conversion from long to int\n    List<Bucket> newBuckets = Arrays.asList(new Bucket[]{new Bucket(0L, 10L), new Bucket(10L, 20L)});\n                                                                    ^\nBucketedValues.java:70: error: incompatible types: possible lossy conversion from long to int\n    List<Bucket> newBuckets = Arrays.asList(new Bucket[]{new Bucket(0L, 10L), new Bucket(10L, 20L)});\n                                                                                         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n", "is_pass": false}], "docstring": "/** \n * @return true if the bucket is same.\n */\n", "method_name": "isCompatible", "codes": ["public boolean isCompatible(DataTable dataset){\n    List<Bucket> existingBuckets = dataset.getBuckets();\n    List<Bucket> newBuckets = Arrays.asList(new Bucket[]{new Bucket(0L, 10L), new Bucket(10L, 20L)});\n    return existingBuckets.equals(newBuckets);\n}"], "code_level": "plib_runnable", "_id": "636767e11a6d9265ec018795", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/BucketedValues_isCompatible.java"}
{"generate_results": [{"generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    Map<String, Fields> structures = getMapping(tableName);\n    return mappings.getSource().getProperties()\n            .entrySet()\n            .stream()\n            .filter(entry -> !structures.containsKey(entry.getKey()))\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n}", "errormessage": "compile error", "error_detail_message": "IndexStructures.java:68: error: incompatible types: Mappings cannot be converted to Map<String,Fields>\n    Map<String, Fields> structures = getMapping(tableName);\n                                               ^\nIndexStructures.java:69: error: cannot find symbol\n    return mappings.getSource().getProperties()\n                               ^\n  symbol:   method getProperties()\n  location: class Source\nIndexStructures.java:73: error: incompatible types: cannot infer type-variable(s) T,K#1,U\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n                                     ^\n    (argument mismatch; invalid method reference\n      method getKey in interface Entry<K#2,V> cannot be applied to given types\n        required: no arguments\n        found:    Object\n        reason: actual and formal argument lists differ in length)\n  where T,K#1,U,K#2,V are type-variables:\n    T extends Object declared in method <T,K#1,U>toMap(Function<? super T,? extends K#1>,Function<? super T,? extends U>)\n    K#1 extends Object declared in method <T,K#1,U>toMap(Function<? super T,? extends K#1>,Function<? super T,? extends U>)\n    U extends Object declared in method <T,K#1,U>toMap(Function<? super T,? extends K#1>,Function<? super T,? extends U>)\n    K#2 extends Object declared in interface Entry\n    V extends Object declared in interface Entry\nNote: IndexStructures.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Returns mappings with fields that not exist in the input mappings. The input mappings should be history mapping from current index. Do not return _source config to avoid current index update conflict.\n */\n", "method_name": "diffStructure", "codes": ["public Mappings diffStructure(String tableName,Mappings mappings){\n    Map<String, Fields> structures = getMapping(tableName);\n    return mappings.getSource().getProperties()\n            .entrySet()\n            .stream()\n            .filter(entry -> !structures.containsKey(entry.getKey()))\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n}"], "code_level": "plib_runnable", "_id": "636767de1a6d9265ec018706", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructures_diffStructure.java"}
{"generate_results": [{"generate_code": "static long compressTimeBucket(long timeBucket,int dayStep){\n    DateTimeFormatter TIME_BUCKET_FORMATTER = DateTimeFormat.forPattern(\"yyyyMMdd\");\n    DateTime DAY_ONE = new DateTime(2000,1,1,0,0,0);\n    int DAY_STEP = 1;\n    int SUPER_DATASET_DAY_STEP = 11;\n    return timeBucket / dayStep * dayStep;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n", "method_name": "compressTimeBucket", "codes": ["static long compressTimeBucket(long timeBucket,int dayStep){\n    DateTimeFormatter TIME_BUCKET_FORMATTER = DateTimeFormat.forPattern(\"yyyyMMdd\");\n    DateTime DAY_ONE = new DateTime(2000,1,1,0,0,0);\n    int DAY_STEP = 1;\n    int SUPER_DATASET_DAY_STEP = 11;\n    return timeBucket / dayStep * dayStep;\n}"], "code_level": "project_runnable", "_id": "636767dc1a6d9265ec0186be", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/target/classes/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils_compressTimeBucket.class"}
{"generate_results": [{"generate_code": "private boolean containsAllFields(Fields fields){\n    return fields.getFields().stream()\n            .allMatch(field -> properties.containsKey(field.getName()));\n}", "errormessage": "compile error", "error_detail_message": "IndexStructures.java:121: error: class, interface, enum, or record expected\n    public boolean containsMapping(String tableName, Mappings mappings) {\n           ^\nIndexStructures.java:125: error: class, interface, enum, or record expected\n        }\n        ^\nIndexStructures.java:130: error: class, interface, enum, or record expected\n    }\n    ^\nIndexStructures.java:135: error: class, interface, enum, or record expected\n    public boolean compareIndexSetting(String tableName, Map<String, Object> settings) {\n           ^\nIndexStructures.java:139: error: class, interface, enum, or record expected\n        }\n        ^\nIndexStructures.java:144: error: class, interface, enum, or record expected\n    }\n    ^\nIndexStructures.java:228: error: class, interface, enum, or record expected\n}\n^\n7 errors\n", "is_pass": false}], "docstring": "/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n", "method_name": "containsAllFields", "codes": ["private boolean containsAllFields(Fields fields){\n    return fields.getFields().stream()\n            .allMatch(field -> properties.containsKey(field.getName()));\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186c6", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructures_containsAllFields.java"}
{"generate_results": [{"generate_code": "public void addNewTarget(Channels channels,IConsumer consumer){\n    consumeTargets.add(channels);\n    consumer = consumer;\n}", "errormessage": "compile error", "error_detail_message": "MultipleChannelsConsumer.java:93: error: incompatible types: Channels cannot be converted to Group\n    consumeTargets.add(channels);\n                       ^\nNote: MultipleChannelsConsumer.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Add a new target channels.\n */\n", "method_name": "addNewTarget", "codes": ["public void addNewTarget(Channels channels,IConsumer consumer){\n    consumeTargets.add(channels);\n    consumer = consumer;\n}"], "code_level": "plib_runnable", "_id": "636767dd1a6d9265ec0186e5", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-library/library-datacarrier-queue/src/main/java/org/apache/skywalking/oap/server/library/datacarrier/consumer/MultipleChannelsConsumer_addNewTarget.java"}
{"generate_results": [{"generate_code": "public void init(){\n    File dir = new File(\"analyze_result_dist\");\n    if (!dir.exists()) {\n        dir.mkdir();\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * initialize config, such as check dist path\n */\n", "method_name": "init", "codes": ["public void init(){\n    File dir = new File(\"analyze_result_dist\");\n    if (!dir.exists()) {\n        dir.mkdir();\n    }\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186cb", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/target/classes/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig_init.class"}
{"generate_results": [{"generate_code": "public List<SequenceRange> buildSequenceRanges(){\n    List<SequenceRange> sequenceRanges = new ArrayList<>();\n    for (int i = minSequence; i <= maxSequence; i += SEQUENCE_RANGE_BATCH_SIZE) {\n        int lowerBound = Math.max(i - SEQUENCE_RANGE_BATCH_SIZE + 1, minSequence);\n        int upperBound = Math.min(i + SEQUENCE_RANGE_BATCH_SIZE - 1, maxSequence);\n        sequenceRanges.add(new SequenceRange(lowerBound, upperBound));\n    }\n    return sequenceRanges;\n}", "errormessage": "compile error", "error_detail_message": "ProfiledBasicInfo.java:76: error: cannot find symbol\n        List<BasicTrace> taskTraces = taskQueryService.getTaskTraces(config.getTaskId());\n                                                                           ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:77: error: cannot find symbol\n        BasicTrace profiledTrace = taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n                                                                                                  ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:79: error: cannot find symbol\n            throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId()\n                                                                                                         ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:80: error: cannot find symbol\n                    + \", segment id: \" + config.getTraceId() + \", current task total profiled trace count is \" + taskTraces.size());\n                                               ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:93: error: cannot find symbol\n        Trace trace = traceQueryService.queryTrace(config.getTraceId());\n                                                         ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:114: error: cannot find symbol\n        File file = new File(config.getAnalyzeResultDist() + File.separator + \"basic.yml\");\n                                   ^\n  symbol:   method getAnalyzeResultDist()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:47: error: cannot find symbol\n        config.setTaskId(args[0]);\n              ^\n  symbol:   method setTaskId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:48: error: cannot find symbol\n        config.setTraceId(args[1]);\n              ^\n  symbol:   method setTraceId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:49: error: cannot find symbol\n        config.setAnalyzeResultDist(args[2]);\n              ^\n  symbol:   method setAnalyzeResultDist(String)\n  location: variable config of type ExporterConfig\n9 errors\n", "is_pass": false}], "docstring": "/** \n * build current profiles segment snapshot search sequence ranges\n */\n", "method_name": "buildSequenceRanges", "codes": ["public List<SequenceRange> buildSequenceRanges(){\n    List<SequenceRange> sequenceRanges = new ArrayList<>();\n    for (int i = minSequence; i <= maxSequence; i += SEQUENCE_RANGE_BATCH_SIZE) {\n        int lowerBound = Math.max(i - SEQUENCE_RANGE_BATCH_SIZE + 1, minSequence);\n        int upperBound = Math.min(i + SEQUENCE_RANGE_BATCH_SIZE - 1, maxSequence);\n        sequenceRanges.add(new SequenceRange(lowerBound, upperBound));\n    }\n    return sequenceRanges;\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec018726", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo_buildSequenceRanges.java"}
{"generate_results": [{"generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    // Read the file content\n    FileInputStream fis = new FileInputStream(file);\n    BufferedInputStream bis = new BufferedInputStream(fis);\n    byte[] buffer = new byte[1024];\n    int bytesRead;\n\n    // Parse each time range\n    for (ProfileAnalyzeTimeRange timeRange : timeRanges) {\n        long startTime = timeRange.getStartTime();\n        long endTime = timeRange.getEndTime();\n\n        // Seek to the start of the time range\n        bis.skip(startTime);\n\n        // Read the thread snapshots within the time range\n        List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n        while ((bytesRead = bis.read(buffer)) != -1) {\n            ThreadSnapshot snapshot = new ThreadSnapshot();\n            // Deserialize the thread snapshot from the buffer\n            // ...\n            threadSnapshots.add(snapshot);\n        }\n\n        // Process the thread snapshots as needed\n        // ...\n    }\n\n    // Close the streams\n    bis.close();\n    fis.close();\n\n    return threadSnapshots;\n}", "errormessage": "compile error", "error_detail_message": "ProfileSnapshotDumper.java:53: error: cannot find symbol\n        String segmentId = basicInfo.getSegmentId();\n                                    ^\n  symbol:   method getSegmentId()\n  location: variable basicInfo of type ProfiledBasicInfo\nProfileSnapshotDumper.java:54: error: cannot find symbol\n        File snapshotFile = new File(basicInfo.getConfig().getAnalyzeResultDist() + File.separator + \"snapshot.data\");\n                                              ^\n  symbol:   method getConfig()\n  location: variable basicInfo of type ProfiledBasicInfo\nProfileSnapshotDumper.java:86: error: cannot find symbol\n                return threadSnapshotQueryDAO.queryRecords(segmentId, sequenceRange.getMin(), sequenceRange.getMax());\n                                                                                   ^\n  symbol:   method getMin()\n  location: variable sequenceRange of type SequenceRange\nProfileSnapshotDumper.java:86: error: cannot find symbol\n                return threadSnapshotQueryDAO.queryRecords(segmentId, sequenceRange.getMin(), sequenceRange.getMax());\n                                                                                                           ^\n  symbol:   method getMax()\n  location: variable sequenceRange of type SequenceRange\nProfileSnapshotDumper.java:99: error: cannot find symbol\n    BufferedInputStream bis = new BufferedInputStream(fis);\n    ^\n  symbol:   class BufferedInputStream\n  location: class ProfileSnapshotDumper\nProfileSnapshotDumper.java:99: error: cannot find symbol\n    BufferedInputStream bis = new BufferedInputStream(fis);\n                                  ^\n  symbol:   class BufferedInputStream\n  location: class ProfileSnapshotDumper\nProfileSnapshotDumper.java:105: error: cannot find symbol\n        long startTime = timeRange.getStartTime();\n                                  ^\n  symbol:   method getStartTime()\n  location: variable timeRange of type ProfileAnalyzeTimeRange\nProfileSnapshotDumper.java:106: error: cannot find symbol\n        long endTime = timeRange.getEndTime();\n                                ^\n  symbol:   method getEndTime()\n  location: variable timeRange of type ProfileAnalyzeTimeRange\nProfileSnapshotDumper.java:114: error: constructor ThreadSnapshot in class ThreadSnapshot cannot be applied to given types;\n            ThreadSnapshot snapshot = new ThreadSnapshot();\n                                      ^\n  required: no arguments\n  found:    no arguments\n  reason: ThreadSnapshot() has private access in ThreadSnapshot\nProfileSnapshotDumper.java:128: error: cannot find symbol\n    return threadSnapshots;\n           ^\n  symbol:   variable threadSnapshots\n  location: class ProfileSnapshotDumper\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:69: error: cannot find symbol\n        data.setConfig(config);\n            ^\n  symbol:   method setConfig(ExporterConfig)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:76: error: cannot find symbol\n        List<BasicTrace> taskTraces = taskQueryService.getTaskTraces(config.getTaskId());\n                                                                           ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:77: error: cannot find symbol\n        BasicTrace profiledTrace = taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n                                                                                                  ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:79: error: cannot find symbol\n            throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId()\n                                                                                                         ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:80: error: cannot find symbol\n                    + \", segment id: \" + config.getTraceId() + \", current task total profiled trace count is \" + taskTraces.size());\n                                               ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:87: error: cannot find symbol\n        data.setSegmentId(segmentId);\n            ^\n  symbol:   method setSegmentId(String)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:88: error: cannot find symbol\n        data.setSegmentStartTime(startTime);\n            ^\n  symbol:   method setSegmentStartTime(long)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:89: error: cannot find symbol\n        data.setSegmentEndTime(endTime);\n            ^\n  symbol:   method setSegmentEndTime(long)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:90: error: cannot find symbol\n        data.setDuration(profiledTrace.getDuration());\n            ^\n  symbol:   method setDuration(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:93: error: cannot find symbol\n        Trace trace = traceQueryService.queryTrace(config.getTraceId());\n                                                         ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:98: error: cannot find symbol\n        data.setProfiledSegmentSpans(profiledSegmentSpans);\n            ^\n  symbol:   method setProfiledSegmentSpans(List<Span>)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:103: error: cannot find symbol\n        data.setMinSequence(minSequence);\n            ^\n  symbol:   method setMinSequence(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:104: error: cannot find symbol\n        data.setMaxSequence(maxSequence);\n            ^\n  symbol:   method setMaxSequence(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:114: error: cannot find symbol\n        File file = new File(config.getAnalyzeResultDist() + File.separator + \"basic.yml\");\n                                   ^\n  symbol:   method getAnalyzeResultDist()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:47: error: cannot find symbol\n        config.setTaskId(args[0]);\n              ^\n  symbol:   method setTaskId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:48: error: cannot find symbol\n        config.setTraceId(args[1]);\n              ^\n  symbol:   method setTraceId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:49: error: cannot find symbol\n        config.setAnalyzeResultDist(args[2]);\n              ^\n  symbol:   method setAnalyzeResultDist(String)\n  location: variable config of type ExporterConfig\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n27 errors\n", "is_pass": false}], "docstring": "/** \n * load thread snapshots in appointing time range\n */\n", "method_name": "parseFromFileWithTimeRange", "codes": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    // Read the file content\n    FileInputStream fis = new FileInputStream(file);\n    BufferedInputStream bis = new BufferedInputStream(fis);\n    byte[] buffer = new byte[1024];\n    int bytesRead;\n\n    // Parse each time range\n    for (ProfileAnalyzeTimeRange timeRange : timeRanges) {\n        long startTime = timeRange.getStartTime();\n        long endTime = timeRange.getEndTime();\n\n        // Seek to the start of the time range\n        bis.skip(startTime);\n\n        // Read the thread snapshots within the time range\n        List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n        while ((bytesRead = bis.read(buffer)) != -1) {\n            ThreadSnapshot snapshot = new ThreadSnapshot();\n            // Deserialize the thread snapshot from the buffer\n            // ...\n            threadSnapshots.add(snapshot);\n        }\n\n        // Process the thread snapshots as needed\n        // ...\n    }\n\n    // Close the streams\n    bis.close();\n    fis.close();\n\n    return threadSnapshots;\n}"], "code_level": "project_runnable", "_id": "636767e11a6d9265ec018790", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfileSnapshotDumper_parseFromFileWithTimeRange.java"}
{"generate_results": [{"generate_code": "private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    JsonObject jsonObject = new JsonObject();\n    for(KeyStringValuePair property : properties){\n        jsonObject.addProperty(property.getKey(),property.getValue());\n    }\n    return jsonObject;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Convert process properties to source data\n */\n", "method_name": "convertProperties", "codes": ["private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    JsonObject jsonObject = new JsonObject();\n    for(KeyStringValuePair property : properties){\n        jsonObject.addProperty(property.getKey(),property.getValue());\n    }\n    return jsonObject;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018764", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-receiver-plugin/skywalking-ebpf-receiver-plugin/target/classes/org/apache/skywalking/oap/server/receiver/ebpf/provider/handler/EBPFProcessServiceHandler_convertProperties.class"}
{"generate_results": [{"generate_code": "private int pop(){\n    // Pop the abstract type from the output frame stack\n    return outputStack[--outputStackTop];\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100\n\tat com.alibaba.fastjson2.internal.asm.Frame.pop(Frame.java:619)\n\tat com.alibaba.fastjson2.internal.asm.Frame_pop.main(Frame_pop.java:34)\n", "is_pass": false}], "docstring": "/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n", "method_name": "pop", "codes": ["private int pop(){\n    // Pop the abstract type from the output frame stack\n    return outputStack[--outputStackTop];\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c2", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    final int[] newFrame = new int[numLocal + numStack];\n    System.arraycopy(previousFrame,0,newFrame,0,numLocal);\n    System.arraycopy(currentFrame,0,newFrame,numLocal,numStack);\n    previousFrame = newFrame;\n    currentFrame = newFrame;\n    return 3;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat com.alibaba.fastjson2.internal.asm.MethodWriter.visitFrameStart(MethodWriter.java:636)\n\tat com.alibaba.fastjson2.internal.asm.MethodWriter_visitFrameStart.main(MethodWriter_visitFrameStart.java:7)\n", "is_pass": false}], "docstring": "/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}.\n * @param offset   the bytecode offset of the instruction to which the frame corresponds.\n * @param numLocal the number of local variables in the frame.\n * @param numStack the number of stack elements in the frame.\n * @return the index of the next element to be written in this frame.\n */\n", "method_name": "visitFrameStart", "codes": ["int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    final int[] newFrame = new int[numLocal + numStack];\n    System.arraycopy(previousFrame,0,newFrame,0,numLocal);\n    System.arraycopy(currentFrame,0,newFrame,numLocal,numStack);\n    previousFrame = newFrame;\n    currentFrame = newFrame;\n    return 3;\n}"], "code_level": "self_contained", "_id": "636766aa1a6d9265ec0175ce", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/MethodWriter_visitFrameStart.class"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n    final byte[] newData = new byte[data.length + size];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n    final byte[] newData = new byte[data.length + size];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c1", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/ByteVector_enlarge.class"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    // Validate the input parameters\n    if (byteArrayValue == null || byteOffset < 0 || byteLength < 0 || byteOffset + byteLength > byteArrayValue.length) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    // Ensure that the byte vector has enough capacity to accommodate the new data\n    if (this.data.length - this.size < byteLength) {\n        this.enlarge(this.size + byteLength);\n    }\n\n    // Copy the new data into the byte vector\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.size, byteLength);\n\n    // Update the size of the byte vector\n    this.size += byteLength;\n\n    return this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:306: error: cannot find symbol\n    if (this.data.length - this.size < byteLength) {\n                               ^\n  symbol: variable size\nByteVector.java:307: error: cannot find symbol\n        this.enlarge(this.size + byteLength);\n                         ^\n  symbol: variable size\nByteVector.java:311: error: cannot find symbol\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.size, byteLength);\n                                                                ^\n  symbol: variable size\nByteVector.java:314: error: cannot find symbol\n    this.size += byteLength;\n        ^\n  symbol: variable size\n4 errors\n", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset     index of the first byte of byteArrayValue that must be copied.\n * @param byteLength     number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    // Validate the input parameters\n    if (byteArrayValue == null || byteOffset < 0 || byteLength < 0 || byteOffset + byteLength > byteArrayValue.length) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    // Ensure that the byte vector has enough capacity to accommodate the new data\n    if (this.data.length - this.size < byteLength) {\n        this.enlarge(this.size + byteLength);\n    }\n\n    // Copy the new data into the byte vector\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.size, byteLength);\n\n    // Update the size of the byte vector\n    this.size += byteLength;\n\n    return this;\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175ae", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector_putByteArray.java"}
{"generate_results": [{"generate_code": "private void pop(final int elements){\n    // Check if the number of elements to pop is valid\n    if(elements < 0 || elements > this.outputStack.length){\n        throw new IllegalArgumentException(\"Invalid number of elements to pop\");\n    }\n    \n    // Pop the specified number of elements from the stack\n    for(int i = 0; i < elements; i++){\n        this.outputStack.pop();\n    }\n}", "errormessage": "compile error", "error_detail_message": "Frame.java:639: error: cannot find symbol\n        this.outputStack.pop();\n                        ^\n  symbol:   method pop()\n  location: variable outputStack of type int[]\n1 error\n", "is_pass": false}], "docstring": "/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n", "method_name": "pop", "codes": ["private void pop(final int elements){\n    // Check if the number of elements to pop is valid\n    if(elements < 0 || elements > this.outputStack.length){\n        throw new IllegalArgumentException(\"Invalid number of elements to pop\");\n    }\n    \n    // Pop the specified number of elements from the stack\n    for(int i = 0; i < elements; i++){\n        this.outputStack.pop();\n    }\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec017586", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/Frame_pop.java"}
{"generate_results": [{"generate_code": "public ByteVector putInt(final int intValue){\n    final int[] bytes = new int[4];\n    for (int i = 0; i < 4; i++) {\n        bytes[i] = intValue & 0xFF;\n        intValue >>= 8;\n    }\n    if (data.length < 4) {\n        enlarge(4);\n    }\n    System.arraycopy(bytes, 0, data, data.length - 4, 4);\n    return this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:141: error: final parameter intValue may not be assigned\n        intValue >>= 8;\n        ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param intValue an int.\n * @return this byte vector.\n */\n", "method_name": "putInt", "codes": ["public ByteVector putInt(final int intValue){\n    final int[] bytes = new int[4];\n    for (int i = 0; i < 4; i++) {\n        bytes[i] = intValue & 0xFF;\n        intValue >>= 8;\n    }\n    if (data.length < 4) {\n        enlarge(4);\n    }\n    System.arraycopy(bytes, 0, data, data.length - 4, 4);\n    return this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017596", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector_putInt.java"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n    final char firstChar = descriptor.charAt(0);\n    switch(firstChar){\n        case 'B':\n            popByte();\n            break;\n        case 'C':\n            popChar();\n            break;\n        case 'D':\n            popDouble();\n            break;\n        case 'F':\n            popFloat();\n            break;\n        case 'I':\n            popInteger();\n            break;\n        case 'J':\n            popLong();\n            break;\n        case 'L':\n            popObject(descriptor.substring(1));\n            break;\n        case 'Z':\n            popBoolean();\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unsupported type: \" + firstChar);\n    }\n}", "errormessage": "compile error", "error_detail_message": "Frame.java:651: error: cannot find symbol\n            popByte();\n            ^\n  symbol:   method popByte()\n  location: class Frame\nFrame.java:654: error: cannot find symbol\n            popChar();\n            ^\n  symbol:   method popChar()\n  location: class Frame\nFrame.java:657: error: cannot find symbol\n            popDouble();\n            ^\n  symbol:   method popDouble()\n  location: class Frame\nFrame.java:660: error: cannot find symbol\n            popFloat();\n            ^\n  symbol:   method popFloat()\n  location: class Frame\nFrame.java:663: error: cannot find symbol\n            popInteger();\n            ^\n  symbol:   method popInteger()\n  location: class Frame\nFrame.java:666: error: cannot find symbol\n            popLong();\n            ^\n  symbol:   method popLong()\n  location: class Frame\nFrame.java:669: error: cannot find symbol\n            popObject(descriptor.substring(1));\n            ^\n  symbol:   method popObject(String)\n  location: class Frame\nFrame.java:672: error: cannot find symbol\n            popBoolean();\n            ^\n  symbol:   method popBoolean()\n  location: class Frame\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n    final char firstChar = descriptor.charAt(0);\n    switch(firstChar){\n        case 'B':\n            popByte();\n            break;\n        case 'C':\n            popChar();\n            break;\n        case 'D':\n            popDouble();\n            break;\n        case 'F':\n            popFloat();\n            break;\n        case 'I':\n            popInteger();\n            break;\n        case 'J':\n            popLong();\n            break;\n        case 'L':\n            popObject(descriptor.substring(1));\n            break;\n        case 'Z':\n            popBoolean();\n            break;\n        default:\n            throw new IllegalArgumentException(\"Unsupported type: \" + firstChar);\n    }\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175c4", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/Frame_pop.java"}
{"generate_results": [{"generate_code": "final ByteVector put11(final int byteValue1,final int byteValue2){\n    final int newLength = this.length + 2;\n    if(newLength > this.capacity){\n        this.enlarge(newLength);\n    }\n    this.data[this.length] = (byte)byteValue1;\n    this.data[this.length+1] = (byte)byteValue2;\n    this.length += 2;\n    return this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:81: error: cannot find symbol\n    if(newLength > this.capacity){\n                       ^\n  symbol: variable capacity\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n", "method_name": "put11", "codes": ["final ByteVector put11(final int byteValue1,final int byteValue2){\n    final int newLength = this.length + 2;\n    if(newLength > this.capacity){\n        this.enlarge(newLength);\n    }\n    this.data[this.length] = (byte)byteValue1;\n    this.data[this.length+1] = (byte)byteValue2;\n    this.length += 2;\n    return this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017595", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector_put11.java"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < features.length; i++) {\n        sb.append(features[i].name()).append(\",\");\n    }\n    return sb.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Serialize to JSON  {@link String}\n * @param features features to be enabled in serialization\n * @return JSON {@link String}\n */\n", "method_name": "toString", "codes": ["@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < features.length; i++) {\n        sb.append(features[i].name()).append(\",\");\n    }\n    return sb.toString();\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec01757b", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/JSONArray_toString.class"}
{"generate_results": [{"generate_code": "public static int nextPrime(int desiredCapacity){\n    // Validate the input\n    if(desiredCapacity <= 0) {\n        throw new IllegalArgumentException(\"desiredCapacity must be greater than 0\");\n    }\n    \n    // Perform boundary checks\n    if(primeCapacities == null || primeCapacities.length < desiredCapacity) {\n        throw new IndexOutOfBoundsException(\"primeCapacities array is too small for desiredCapacity\");\n    }\n    \n    // Capture and handle runtime errors\n    try {\n        // Find the next prime number\n        int current = primeCapacities[desiredCapacity - 1];\n        while(!isPrime(current)) {\n            current++;\n        }\n        \n        return current;\n    } catch (Exception e) {\n        // Handle any unexpected errors\n        System.err.println(\"An error occurred: \" + e.getMessage());\n        return -1; // Return a default value or handle the error as needed\n    }\n}", "errormessage": "compile error", "error_detail_message": "PrimeFinder.java:162: error: cannot find symbol\n        while(!isPrime(current)) {\n               ^\n  symbol:   method isPrime(int)\n  location: class PrimeFinder\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns a prime number which is <code>&gt;= desiredCapacity</code> and very close to <code>desiredCapacity</code> (within 11% if <code>desiredCapacity &gt;= 1000</code>).\n * @param desiredCapacity the capacity desired by the user.\n * @return the capacity which should be used for a hashtable.\n */\n", "method_name": "nextPrime", "codes": ["public static int nextPrime(int desiredCapacity){\n    // Validate the input\n    if(desiredCapacity <= 0) {\n        throw new IllegalArgumentException(\"desiredCapacity must be greater than 0\");\n    }\n    \n    // Perform boundary checks\n    if(primeCapacities == null || primeCapacities.length < desiredCapacity) {\n        throw new IndexOutOfBoundsException(\"primeCapacities array is too small for desiredCapacity\");\n    }\n    \n    // Capture and handle runtime errors\n    try {\n        // Find the next prime number\n        int current = primeCapacities[desiredCapacity - 1];\n        while(!isPrime(current)) {\n            current++;\n        }\n        \n        return current;\n    } catch (Exception e) {\n        // Handle any unexpected errors\n        System.err.println(\"An error occurred: \" + e.getMessage());\n        return -1; // Return a default value or handle the error as needed\n    }\n}"], "code_level": "slib_runnable", "_id": "636766a81a6d9265ec01758e", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/trove/impl/PrimeFinder_nextPrime.java"}
{"generate_results": [{"generate_code": "private static int digitValue(final char c){\n    return (c - '0');\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()} but we don't accept non-ASCII digits.\n */\n", "method_name": "digitValue", "codes": ["private static int digitValue(final char c){\n    return (c - '0');\n}"], "code_level": "self_contained", "_id": "636767a61a6d9265ec0185b7", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-parser/target/classes/io/protostuff/parser/TextFormat_digitValue.class"}
{"generate_results": [{"generate_code": "private static boolean isHex(final char c){\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Is this a hex digit?\n */\n", "method_name": "isHex", "codes": ["private static boolean isHex(final char c){\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}"], "code_level": "self_contained", "_id": "636767ab1a6d9265ec018676", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-parser/target/classes/io/protostuff/parser/TextFormat_isHex.class"}
{"generate_results": [{"generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    int size = schema.computeSize(message);\n    buffer.writeVarInt(size);\n    schema.writeDelimited(out,message,schema);\n    return size + 4; // 4 for the varint\n}", "errormessage": "compile error", "error_detail_message": "ProtobufIOUtil.java:237: error: cannot find symbol\n    int size = schema.computeSize(message);\n                     ^\n  symbol:   method computeSize(T)\n  location: variable schema of type Schema<T>\n  where T is a type-variable:\n    T extends Object declared in method <T>writeDelimitedTo(OutputStream,T,Schema<T>,LinkedBuffer)\nProtobufIOUtil.java:238: error: cannot find symbol\n    buffer.writeVarInt(size);\n          ^\n  symbol:   method writeVarInt(int)\n  location: variable buffer of type LinkedBuffer\nProtobufIOUtil.java:239: error: cannot find symbol\n    schema.writeDelimited(out,message,schema);\n          ^\n  symbol:   method writeDelimited(OutputStream,T,Schema<T>)\n  location: variable schema of type Schema<T>\n  where T is a type-variable:\n    T extends Object declared in method <T>writeDelimitedTo(OutputStream,T,Schema<T>,LinkedBuffer)\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Serializes the  {@code message}, prefixed with its length, into an  {@link OutputStream}.\n * @return the size of the message\n */\n", "method_name": "writeDelimitedTo", "codes": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    int size = schema.computeSize(message);\n    buffer.writeVarInt(size);\n    schema.writeDelimited(out,message,schema);\n    return size + 4; // 4 for the varint\n}"], "code_level": "project_runnable", "_id": "636767a41a6d9265ec018582", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/ProtobufIOUtil_writeDelimitedTo.java"}
{"generate_results": [{"generate_code": "public boolean equals(final byte[] data,int offset,final int len){\n    return Arrays.equals(bytes,data+offset,len);\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns true if the contents of the internal array and the provided array match.\n */\n", "method_name": "equals", "codes": ["public boolean equals(final byte[] data,int offset,final int len){\n    return Arrays.equals(bytes,data+offset,len);\n}"], "code_level": "class_runnable", "_id": "636767a51a6d9265ec01859d", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/ByteString_equals.class"}
{"generate_results": [{"generate_code": "public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    int size = 0;\n    for (int i = index; i < index + len; i++) {\n        char c = str.charAt(i);\n        if (c >= MIN_HIGH_SURROGATE && c <= MAX_HIGH_SURROGATE) {\n            // High surrogate\n            if (i + 1 < index + len && str.charAt(i + 1) >= MIN_LOW_SURROGATE && str.charAt(i + 1) <= MAX_LOW_SURROGATE) {\n                // High-low pair\n                i++;\n            } else {\n                // Invalid high surrogate\n                throw new IllegalArgumentException(\"Invalid high surrogate\");\n            }\n        } else if (c >= MIN_SUPPLEMENTARY_CODE_POINT) {\n            // Supplementary character\n            size += 4;\n        } else {\n            // Single-byte character\n            size += 1;\n        }\n    }\n    return size;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Computes the size of the utf8 string beginning at the specified  {@code index} with the specified {@code length}.\n */\n", "method_name": "computeUTF8Size", "codes": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    int size = 0;\n    for (int i = index; i < index + len; i++) {\n        char c = str.charAt(i);\n        if (c >= MIN_HIGH_SURROGATE && c <= MAX_HIGH_SURROGATE) {\n            // High surrogate\n            if (i + 1 < index + len && str.charAt(i + 1) >= MIN_LOW_SURROGATE && str.charAt(i + 1) <= MAX_LOW_SURROGATE) {\n                // High-low pair\n                i++;\n            } else {\n                // Invalid high surrogate\n                throw new IllegalArgumentException(\"Invalid high surrogate\");\n            }\n        } else if (c >= MIN_SUPPLEMENTARY_CODE_POINT) {\n            // Supplementary character\n            size += 4;\n        } else {\n            // Single-byte character\n            size += 1;\n        }\n    }\n    return size;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01856c", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/StringSerializer_computeUTF8Size.class"}
{"generate_results": [{"generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    int length = str.length();\n    for (int i = 0; i < length; i++) {\n        char c = str.charAt(i);\n        if (c <= 0x7F) {\n            lb.put((byte)c);\n        } else if (c <= 0x7FF) {\n            lb.put((byte)(0xC0 | (c >> 6)));\n            lb.put((byte)(0x80 | (c & 0x3F)));\n        } else if (c <= 0xFFFF) {\n            lb.put((byte)(0xE0 | (c >> 12)));\n            lb.put((byte)(0x80 | ((c >> 6) & 0x3F)));\n            lb.put((byte)(0x80 | (c & 0x3F)));\n        } else {\n            lb.put((byte)(0xF0 | (c >> 18)));\n            lb.put((byte)(0x80 | ((c >> 12) & 0x3F)));\n            lb.put((byte)(0x80 | ((c >> 6) & 0x3F)));\n            lb.put((byte)(0x80 | (c & 0x3F)));\n        }\n    }\n    return lb;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the utf8-encoded bytes from the string into the  {@link LinkedBuffer}.\n */\n", "method_name": "writeUTF8", "codes": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    int length = str.length();\n    for (int i = 0; i < length; i++) {\n        char c = str.charAt(i);\n        if (c <= 0x7F) {\n            lb.put((byte)c);\n        } else if (c <= 0x7FF) {\n            lb.put((byte)(0xC0 | (c >> 6)));\n            lb.put((byte)(0x80 | (c & 0x3F)));\n        } else if (c <= 0xFFFF) {\n            lb.put((byte)(0xE0 | (c >> 12)));\n            lb.put((byte)(0x80 | ((c >> 6) & 0x3F)));\n            lb.put((byte)(0x80 | (c & 0x3F)));\n        } else {\n            lb.put((byte)(0xF0 | (c >> 18)));\n            lb.put((byte)(0x80 | ((c >> 12) & 0x3F)));\n            lb.put((byte)(0x80 | ((c >> 6) & 0x3F)));\n            lb.put((byte)(0x80 | (c & 0x3F)));\n        }\n    }\n    return lb;\n}"], "code_level": "project_runnable", "_id": "636767ab1a6d9265ec01867b", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/StringSerializer_writeUTF8.class"}
{"generate_results": [{"generate_code": "public long readRawVarint64() throws IOException {\n    int result = 0;\n    int shift = 0;\n    while (true) {\n        int b = input.read();\n        if (b == -1) throw new EOFException(\"EOF\");\n        result |= ((b & 0x7f) << shift);\n        shift += 7;\n        if ((b & 0x80) == 0) break;\n    }\n    return result;\n}", "errormessage": "compile error", "error_detail_message": "CodedInput.java:616: error: cannot find symbol\n        if (b == -1) throw new EOFException(\"EOF\");\n                               ^\n  symbol:   class EOFException\n  location: class CodedInput\n1 error\n", "is_pass": false}], "docstring": "/** \n * Read a raw Varint from the stream.\n */\n", "method_name": "readRawVarint64", "codes": ["public long readRawVarint64() throws IOException {\n    int result = 0;\n    int shift = 0;\n    while (true) {\n        int b = input.read();\n        if (b == -1) throw new EOFException(\"EOF\");\n        result |= ((b & 0x7f) << shift);\n        shift += 7;\n        if ((b & 0x80) == 0) break;\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "636767a41a6d9265ec018572", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/CodedInput_readRawVarint64.java"}
{"generate_results": [{"generate_code": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    // Write the length of the buffer\n    out.writeInt(node.buffer.length);\n\n    // Write each byte in the buffer\n    for (int i = 0; i < node.buffer.length; i++) {\n        out.writeByte(node.buffer[i]);\n    }\n\n    return node.buffer.length;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Writes the contents of the  {@link LinkedBuffer} into the {@link DataOutput}.\n * @return the total content size of the buffer.\n */\n", "method_name": "writeTo", "codes": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    // Write the length of the buffer\n    out.writeInt(node.buffer.length);\n\n    // Write each byte in the buffer\n    for (int i = 0; i < node.buffer.length; i++) {\n        out.writeByte(node.buffer[i]);\n    }\n\n    return node.buffer.length;\n}"], "code_level": "class_runnable", "_id": "636767aa1a6d9265ec01865a", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/LinkedBuffer_writeTo.class"}
{"generate_results": [{"generate_code": "@Override public String readString() throws IOException {\n    int length = readRawVarint32();\n    return new String(buffer, bufferPos + 1, length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Read a  {@code string} field value from the stream.\n */\n", "method_name": "readString", "codes": ["@Override public String readString() throws IOException {\n    int length = readRawVarint32();\n    return new String(buffer, bufferPos + 1, length);\n}"], "code_level": "project_runnable", "_id": "636767a31a6d9265ec018552", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/CodedInput_readString.class"}
{"generate_results": [{"generate_code": "public final byte[] toByteArray(){\n    int size = this.size;\n    byte[] array = new byte[size];\n    for(int i=0;i<size;i++){\n        array[i] = this.head.array[this.head.offset+i];\n    }\n    return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a single byte array containg all the contents written to the buffer(s).\n */\n", "method_name": "toByteArray", "codes": ["public final byte[] toByteArray(){\n    int size = this.size;\n    byte[] array = new byte[size];\n    for(int i=0;i<size;i++){\n        array[i] = this.head.array[this.head.offset+i];\n    }\n    return array;\n}"], "code_level": "project_runnable", "_id": "636767a21a6d9265ec018517", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/WriteSession_toByteArray.class"}
{"generate_results": [{"generate_code": "private static int compareSigned(long a,long b){\n    return (a < b) ? -1 : ((a == b) ? 0 : 1);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares the two specified  {@code long} values. The sign of the value returned is the same as that of{@code ((Long) a).compareTo(b)}. <p> <b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the equivalent {@link Long#compare} method instead.\n * @param a the first  {@code long} to compare\n * @param b the second  {@code long} to compare\n * @return a negative value if {@code a} is less than {@code b}; a positive value if  {@code a} is greater than{@code b}; or zero if they are equal\n */\n", "method_name": "compareSigned", "codes": ["private static int compareSigned(long a,long b){\n    return (a < b) ? -1 : ((a == b) ? 0 : 1);\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01857e", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/UnsignedNumberUtil_compareSigned.class"}
{"generate_results": [{"generate_code": "public byte[] toByteArray(){\n    return this.bytes;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copies bytes to a  {@code byte[]}.\n */\n", "method_name": "toByteArray", "codes": ["public byte[] toByteArray(){\n    return this.bytes;\n}"], "code_level": "self_contained", "_id": "636767aa1a6d9265ec01864a", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/ByteString_toByteArray.class"}
{"generate_results": [{"generate_code": "private void checkIfPackedField() throws IOException {\n    // Check if the field should be packed\n    if (packedLimit > 0 && bufferPos >= packedLimit) {\n        // Read the field\n        readField(schema);\n        // Update the internal state\n        packedLimit = 0;\n    }\n}", "errormessage": "compile error", "error_detail_message": "CodedInput.java:1216: error: cannot find symbol\n        readField(schema);\n                  ^\n  symbol:   variable schema\n  location: class CodedInput\n1 error\n", "is_pass": false}], "docstring": "/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n", "method_name": "checkIfPackedField", "codes": ["private void checkIfPackedField() throws IOException {\n    // Check if the field should be packed\n    if (packedLimit > 0 && bufferPos >= packedLimit) {\n        // Read the field\n        readField(schema);\n        // Update the internal state\n        packedLimit = 0;\n    }\n}"], "code_level": "class_runnable", "_id": "636767a31a6d9265ec01854f", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/CodedInput_checkIfPackedField.java"}
{"generate_results": [{"generate_code": "public int readTag() throws IOException {\n    // Your implementation here\n}", "errormessage": "compile error", "error_detail_message": "ByteBufferInput.java:115: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Attempt to read a field tag, returning zero if we have reached EOF. Protocol message parsers use this to read tags, since a protocol message may legally end wherever a tag occurs, and zero is not a valid tag number.\n */\n", "method_name": "readTag", "codes": ["public int readTag() throws IOException {\n    // Your implementation here\n}"], "code_level": "class_runnable", "_id": "636767a81a6d9265ec0185fc", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/ByteBufferInput_readTag.java"}

{"_id": "6367676d1a6d9265ec018229", "generate_results": ["public static String[] trimArrayElements(String[] array){\n    if (array == null || array.length == 0) {\n        return array;\n    }\n    for (int i = 0; i < array.length; i++) {\n        String element = array[i];\n        if (element != null) {\n            array[i] = element.trim();\n        }\n    }\n    return array;\n}"]}
{"_id": "6367670b1a6d9265ec017a00", "generate_results": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return array1 == null ? array2 == null : array1.length == array2.length;\n}"]}
{"_id": "636766a91a6d9265ec0175c2", "generate_results": ["private int pop(){\n    if(outputStackTop == outputStackStart){\n        throw new IllegalStateException(\"Cannot pop from empty stack\");\n    }\n    return outputLocals[--outputStackTop];\n}"]}
{"_id": "636767081a6d9265ec017989", "generate_results": ["public static boolean[] toPrimitive(final Boolean[] array){\n    if (array == null) {\n        return null;\n    }\n    if (array.length == 0) {\n        return EMPTY_BOOLEAN_ARRAY;\n    }\n\n    final boolean[] result = new boolean[array.length];\n    for (int i = 0; i < array.length; i++) {\n        Boolean b = array[i];\n        result[i] = b == null ? false : b.booleanValue();\n    }\n    return result;\n}"]}
{"_id": "6367672d1a6d9265ec017c73", "generate_results": ["public boolean shouldPrintMessage(int timestamp,String message){\n    if(messages.containsKey(message)){\n        int lastTimestamp = messages.get(message);\n        if(timestamp - lastTimestamp >= 10){\n            messages.put(message,timestamp);\n            return true;\n        }else{\n            return false;\n        }\n    }else{\n        messages.put(message,timestamp);\n        return true;\n    }\n}"]}
{"_id": "636766f81a6d9265ec01775c", "generate_results": ["public static String toString(Object obj){\n    if(obj == null){\n        return \"\";\n    }\n    return obj.toString();\n}"]}
{"_id": "6367667f1a6d9265ec017457", "generate_results": ["private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    char c = (char)bb.get(i);\n    if(c <= 0x7F){ // 1-byte sequence\n        sb.append(c);\n        return i + 1;\n    } else if((c & 0xE0) == 0xC0){ // 2-byte sequence\n        char c2 = (char)bb.get(i + 1);\n        if((c2 & 0xC0) != 0x80){\n            throw new IllegalArgumentException(\"Invalid UTF-8 encoding\");\n        }\n        sb.append((char)(((c & 0x1F) << 6) | (c2 & 0x3F)));\n        return i + 2;\n    } else if((c & 0xF0) == 0xE0){ // 3-byte sequence\n        char c2 = (char)bb.get(i + 1);\n        char c3 = (char)bb.get(i + 2);\n        if(((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)){\n            throw new IllegalArgumentException(\"Invalid UTF-8 encoding\");\n        }\n        sb.append((char)(((c & 0x0F) << 12) | ((c2 & 0x3F) << 6) | (c3 & 0x3F)));\n        return i + 3;\n    } else if((c & 0xF8) == 0xF0){ // 4-byte sequence\n        char c2 = (char)bb.get(i + 1);\n        char c3 = (char)bb.get(i + 2);\n        char c4 = (char)bb.get(i + 3);\n        if(((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80) || ((c4 & 0xC0) != 0x80)){\n            throw new IllegalArgumentException(\"Invalid UTF-8 encoding\");\n        }\n        sb.append((char)(((c & 0x07) << 18) | ((c2 & 0x3F) << 12) | ((c3 & 0x3F) << 6) | (c4 & 0x3F)));\n        return i + 4;\n    } else {\n        throw new IllegalArgumentException(\"Invalid UTF-8 encoding\");\n    }\n}"]}
{"_id": "636766aa1a6d9265ec0175ce", "generate_results": ["int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    // Validate the input\n    if (offset < 0 || numLocal < 0 || numStack < 0) {\n        throw new IllegalArgumentException(\"Invalid frame parameters\");\n    }\n\n    // Initialize the currentFrame array\n    this.currentFrame = new int[numLocal + numStack];\n\n    // Set the offset in the currentFrame array\n    this.currentFrame[0] = offset;\n\n    // Return 3 as per the requirement\n    return 3;\n}"]}
{"_id": "636767191a6d9265ec017c0f", "generate_results": ["private void enlarge(final int size){\n    // Validate the input\n    if (size < 0) {\n        throw new IllegalArgumentException(\"Size must be non-negative\");\n    }\n\n    // Calculate the new capacity\n    final int newCapacity = this.data.length + size;\n\n    // Create a new array with the increased capacity\n    final byte[] newData = new byte[newCapacity];\n\n    // Copy the existing data to the new array\n    System.arraycopy(this.data, 0, newData, 0, this.data.length);\n\n    // Update the reference to the new array\n    this.data = newData;\n}"]}
{"_id": "636767821a6d9265ec0183a0", "generate_results": ["protected static void deleteFile(String fileName){\n    File file = new File(fileName);\n    if(file.exists()){\n        try{\n            file.delete();\n        }catch(SecurityException e){\n            LogLog.error(\"Security exception occurred while trying to delete file: \" + fileName, e);\n        }\n    }\n}"]}
{"_id": "636767691a6d9265ec0181aa", "generate_results": ["public static int nullSafeHashCode(long[] array){\n    if(array == null) return 0;\n    int result = INITIAL_HASH;\n    for(long l : array){\n        result = MULTIPLIER * result + hashCode(l);\n    }\n    return result;\n}"]}
{"_id": "636767441a6d9265ec017cc1", "generate_results": ["private TreeNode<T> rotateRight(TreeNode<T> node){\n    // Check for null nodes\n    if (node == null || node.getLeft() == null) {\n        return node; // No rotation needed\n    }\n\n    // Perform the rotation\n    TreeNode<T> leftChild = node.getLeft();\n    node.setLeft(leftChild.getRight());\n    leftChild.setRight(node);\n\n    // Update heights and subtree sizes\n    updateHeightAndSubtreeSize(node);\n    updateHeightAndSubtreeSize(leftChild);\n\n    return leftChild;\n}"]}
{"_id": "6367667f1a6d9265ec01745c", "generate_results": ["@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    File f = new File(dir);\n    if(f.exists() && f.isDirectory()){\n        File[] files = f.listFiles(new FilenameFilter(){\n            public boolean accept(File dir,String name){\n                return name.endsWith(\".jar\");\n            }\n        });\n        for(int i=0;i<files.length;i++){\n            try{\n                URL url = files[i].toURI().toURL();\n                cpV.add(url);\n            }catch(MalformedURLException e){\n                logger.error(\"Error adding JAR to classpath: \" + e.getMessage());\n            }\n        }\n    }else{\n        logger.warn(\"Directory does not exist or is not a directory: \" + dir);\n    }\n}"]}
{"_id": "6367677e1a6d9265ec01830f", "generate_results": ["public String format(LoggingEvent event){\n    // Validate the input\n    if (event == null) {\n        throw new IllegalArgumentException(\"LoggingEvent cannot be null\");\n    }\n\n    // Initialize the buffer\n    StringBuffer sbuf = new StringBuffer();\n\n    // Check if there is a pattern converter\n    if (head != null) {\n        // Format the event using the pattern converter\n        head.format(sbuf, event);\n    } else {\n        // If no pattern converter, use the default conversion pattern\n        sbuf.append(event.getMessage());\n    }\n\n    // Return the formatted string\n    return sbuf.toString();\n}"]}
{"_id": "636767031a6d9265ec0178dd", "generate_results": ["public long contentLength(){\n    String contentLengthHeader = request.getHeader(\"Content-Length\");\n    try {\n        return Long.parseLong(contentLengthHeader);\n    } catch (NumberFormatException e) {\n        // Handle the case where Content-Length is not a valid number\n        return -1; // Return an invalid value or log the error\n    }\n}"]}
{"_id": "636766f11a6d9265ec017658", "generate_results": ["public static int indexOfLastSeparator(String filename){\n    if(filename == null){\n        return -1;\n    }\n    int lastUnixPos = filename.lastIndexOf(UNIX_SEPARATOR);\n    int lastWindowsPos = filename.lastIndexOf(WINDOWS_SEPARATOR);\n    return Math.max(lastUnixPos,lastWindowsPos);\n}"]}
{"_id": "636767121a6d9265ec017b0a", "generate_results": ["private int parseEndOfLine(String headerPart,int end){\n    while (end < headerPart.length()){\n        char c = headerPart.charAt(end++);\n        if (c == '\\n'){\n            return end;\n        }\n    }\n    return -1;\n}"]}
{"_id": "636766f61a6d9265ec017701", "generate_results": ["public static int lastIndexOf(String str,String searchStr){\n    if (StringUtils.isEmpty(str)){\n        return INDEXNOTFOUND;\n    }\n    return str.lastIndexOf(searchStr);\n}"]}
{"_id": "6367670b1a6d9265ec0179fe", "generate_results": ["@Override public void write(byte b[]) throws IOException {\n    // Validate the input\n    if (b == null) {\n        throw new NullPointerException(\"Input byte array is null\");\n    }\n\n    // Check for boundary conditions\n    int length = b.length;\n    if (length > Integer.MAX_VALUE - written) {\n        throw new IOException(\"Array too large to write\");\n    }\n\n    // Write the bytes to the underlying stream\n    getStream().write(b);\n\n    // Update the byte count\n    written += length;\n\n    // Check if the threshold has been exceeded\n    checkThreshold(length);\n}"]}
{"_id": "636767df1a6d9265ec01873c", "generate_results": ["public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}"]}
{"_id": "636766f91a6d9265ec01777f", "generate_results": ["public static boolean toBoolean(Boolean bool){\n    return (bool != null) ? bool : false;\n}"]}
{"_id": "6367675f1a6d9265ec0180d3", "generate_results": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    Map<V,V> forwardMapping = new HashMap<>();\n    Map<V,V> backwardMapping = new HashMap<>();\n    for (V vertex : graph.vertexSet()) {\n        forwardMapping.put(vertex, vertex);\n        backwardMapping.put(vertex, vertex);\n    }\n    return new IsomorphicGraphMapping<>(forwardMapping, backwardMapping, graph, graph);\n}"]}
{"_id": "636766fe1a6d9265ec017833", "generate_results": ["public static void forceDeleteOnExit(File file) throws IOException {\n    if (file.isDirectory()) {\n        cleanDirectoryOnExit(file);\n    }\n    file.deleteOnExit();\n}"]}
{"_id": "636767791a6d9265ec018257", "generate_results": ["public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable(){\n        public void run(){\n            synchronized(_lock){\n                _table.add(lr);\n                int rowCount = _table.getRowCount();\n                if(rowCount > 0){\n                    _table.setRowSelectionInterval(rowCount - 1,rowCount - 1);\n                }\n            }\n        }\n    });\n}"]}
{"_id": "636767641a6d9265ec01817d", "generate_results": ["@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n    // Validate input\n    if (target == null || resultMap == null) {\n        throw new IllegalArgumentException(\"Input parameters cannot be null\");\n    }\n    if (!(resultMap.get(\"partitionA\") instanceof Set) || !(resultMap.get(\"partitionB\") instanceof Set)) {\n        throw new IllegalArgumentException(\"Partitions must be sets\");\n    }\n\n    // Extract partitions\n    Set<V> partitionA = (Set<V>) resultMap.get(\"partitionA\");\n    Set<V> partitionB = (Set<V>) resultMap.get(\"partitionB\");\n\n    // Check for empty partitions\n    if (partitionA.isEmpty() || partitionB.isEmpty()) {\n        throw new IllegalArgumentException(\"Both partitions must contain at least one element\");\n    }\n\n    // Generate complete bipartite graph\n    for (V vertexA : partitionA) {\n        for (V vertexB : partitionB) {\n            target.addEdge(vertexA, vertexB);\n        }\n    }\n}"]}
{"_id": "636766ff1a6d9265ec017851", "generate_results": ["protected int findByte(byte value,int pos){\n    while (pos < this.tail){\n        if (this.buffer[pos] == value){\n            return pos;\n        }\n        ++pos;\n    }\n    return -1;\n}"]}
{"_id": "636767a41a6d9265ec018582", "generate_results": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    // Validate the input\n    if (out == null || message == null || schema == null || buffer == null) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    // Calculate the size of the message\n    int size = schema.getSerializedSize(message);\n\n    // Write the size of the message as a varint\n    CodedOutputStream codedOut = CodedOutputStream.newInstance(buffer);\n    codedOut.writeVarint32(size);\n\n    // Serialize the message into the buffer\n    schema.writeTo(codedOut, message);\n\n    // Flush the buffer to the output stream\n    out.write(buffer.buffer(), 0, buffer.length());\n    out.flush();\n\n    // Return the total size of the message including the size prefix\n    return size + buffer.length();\n}"]}
{"_id": "636767001a6d9265ec01787e", "generate_results": ["public String toString(){\n    return super.toString();\n}"]}
{"_id": "636767781a6d9265ec01823d", "generate_results": ["protected void subAppend(LoggingEvent event){\n    try{\n        // Validate the input\n        if (event == null) {\n            throw new IllegalArgumentException(\"LoggingEvent cannot be null\");\n        }\n\n        // Perform boundary checks\n        if (dir == null || !dir.exists() || !dir.isDirectory()) {\n            throw new IllegalArgumentException(\"Directory is not valid\");\n        }\n\n        // Capture and handle runtime errors\n        File tempFile = File.createTempFile(prefix, suffix, dir);\n        Writer writer = new FileWriter(tempFile);\n        BufferedWriter bufferedWriter = new BufferedWriter(writer);\n\n        // Write the message to the temp file\n        String message = layout.format(event);\n        bufferedWriter.write(message);\n        bufferedWriter.close();\n\n        // Log the successful write operation\n        logger.info(\"Message written to temporary file: \" + tempFile.getAbsolutePath());\n    } catch (Exception e) {\n        // Handle any exceptions that occur during the process\n        errorHandler.error(\"Error writing to temporary file\", e, ErrorHandler.ERROR_WRITE_FAILURE);\n    }\n}"]}
{"_id": "636766ef1a6d9265ec01761a", "generate_results": ["int addType(final String value){\n    // Validate the input\n    if (value == null || value.isEmpty()) {\n        throw new IllegalArgumentException(\"Value cannot be null or empty\");\n    }\n\n    // Check for existing type entry\n    Entry existingEntry = get(value.hashCode());\n    if (existingEntry != null && existingEntry.tag == SymbolTable.CONSTANT_Class) {\n        return existingEntry.index;\n    }\n\n    // Add new type entry\n    int newIndex = typeCount++;\n    Entry newEntry = new Entry(newIndex, SymbolTable.CONSTANT_Class, value, newIndex);\n    put(newEntry);\n\n    return newIndex;\n}"]}
{"_id": "636766821a6d9265ec0174b6", "generate_results": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    // Validate the input\n    if(genericType == null || targetType == null){\n        throw new IllegalArgumentException(\"Input parameters cannot be null\");\n    }\n\n    // Check if the genericType is a ParameterizedType\n    if(!(genericType instanceof ParameterizedType)){\n        return null; // Return null if it's not parameterized\n    }\n\n    // Get the actual type arguments from the genericType\n    Type[] actualTypeArguments = ((ParameterizedType)genericType).getActualTypeArguments();\n\n    // Build a map of type variables to their resolved types\n    Map<TypeVariable<?>,Type> typeVariableMap = getTypeVariableMap(targetType);\n\n    // Resolve each type argument using the type variable map\n    Class<?>[] resolvedTypes = new Class[actualTypeArguments.length];\n    for(int i=0;i<actualTypeArguments.length;i++){\n        Type actualTypeArgument = actualTypeArguments[i];\n        if(actualTypeArgument instanceof TypeVariable){\n            Type resolvedType = typeVariableMap.get(actualTypeArgument);\n            if(resolvedType != null && resolvedType instanceof Class){\n                resolvedTypes[i] = (Class<?>)resolvedType;\n            }else{\n                return null; // Return null if resolution fails\n            }\n        }else if(actualTypeArgument instanceof Class){\n            resolvedTypes[i] = (Class<?>)actualTypeArgument;\n        }else{\n            return null; // Return null for unsupported types\n        }\n    }\n\n    return resolvedTypes;\n}"]}
{"_id": "636767e11a6d9265ec018781", "generate_results": ["@Override public void accept(final METRICS data){\n    final String id = data.getId();\n    if(buffer.containsKey(id)){\n        final METRICS existingData = buffer.get(id);\n        final METRICS combinedData = existingData.combine(data);\n        if(combinedData.isAbandoned()){\n            buffer.remove(id);\n        }else{\n            buffer.put(id,combinedData);\n        }\n    }else{\n        buffer.put(id,data);\n    }\n}"]}
{"_id": "636767531a6d9265ec017efb", "generate_results": ["void insertBefore(Bucket bucket){\n    // Validate the input\n    if (bucket == null) {\n        throw new IllegalArgumentException(\"Input bucket cannot be null\");\n    }\n\n    // Check for boundary conditions\n    if (prev != null) {\n        prev.next = bucket;\n    }\n    bucket.prev = prev;\n\n    // Update the current bucket's previous pointer\n    bucket.next = this;\n    prev = bucket;\n\n    // Handle the case where the current bucket was the head\n    if (this == head) {\n        head = bucket;\n    }\n}"]}
{"_id": "636766f11a6d9265ec017641", "generate_results": ["@Override public int available() throws IOException {\n    return Math.max(0, buffer.length - index);\n}"]}
{"_id": "636767de1a6d9265ec018706", "generate_results": ["public Mappings diffStructure(String tableName,Mappings mappings){\n    // Validate input\n    if (tableName == null || mappings == null) {\n        throw new IllegalArgumentException(\"Input cannot be null\");\n    }\n\n    // Get the structure for the given table name\n    Fields structure = getStructure(tableName);\n\n    // If no structure is found, return an empty mappings object\n    if (structure == null) {\n        return new Mappings();\n    }\n\n    // Create a new mappings object to store the differences\n    Mappings diffMappings = new Mappings();\n\n    // Iterate over each field in the structure\n    for (String fieldName : structure.getFields().keySet()) {\n        // Check if the field exists in the input mappings\n        if (!mappings.getSource().containsKey(fieldName)) {\n            // If the field does not exist, add it to the diff mappings\n            diffMappings.getSource().put(fieldName, structure.getFields().get(fieldName));\n        }\n    }\n\n    // Return the diff mappings object\n    return diffMappings;\n}"]}
{"_id": "636767dd1a6d9265ec0186e5", "generate_results": ["public void addNewTarget(Channels channels,IConsumer consumer){\n    Group newGroup = new Group(channels,consumer);\n    consumeTargets.add(newGroup);\n}"]}
{"_id": "636767871a6d9265ec01846d", "generate_results": ["public static void createConfigurationDirectory(){\n    String homeDir = System.getProperty(\"user.home\");\n    File configDir = new File(homeDir + File.separator + \"Documents\" + File.separator + \"Settings\" + File.separator + \"lf5\");\n    if (!configDir.exists()) {\n        boolean result = configDir.mkdirs();\n        if (result) {\n            System.out.println(\"Configuration directory created successfully.\");\n        } else {\n            System.out.println(\"Failed to create configuration directory.\");\n        }\n    } else {\n        System.out.println(\"Configuration directory already exists.\");\n    }\n}"]}
{"_id": "636766f81a6d9265ec01775b", "generate_results": ["public long readLong(final int offset){\n    return ((long)readInt(offset)) << 32 | (readInt(offset + 4) & 0xFFFFFFFFL);\n}"]}
{"_id": "636767a51a6d9265ec01859d", "generate_results": ["public boolean equals(final byte[] data,int offset,final int len){\n    // Validate the input\n    if (data == null || offset < 0 || len < 0 || offset + len > data.length) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    // Boundary check for the internal array\n    if (this.bytes == null || this.size() != len) {\n        return false;\n    }\n\n    // Compare the contents\n    for (int i = 0; i < len; i++) {\n        if (this.bytes[i] != data[offset + i]) {\n            return false;\n        }\n    }\n\n    return true;\n}"]}
{"_id": "6367670b1a6d9265ec0179ff", "generate_results": ["public static Byte[] nullToEmpty(final Byte[] array){\n    return (array == null || array.length == 0) ? EMPTY_BYTE_OBJECT_ARRAY : array;\n}"]}
{"_id": "6367677f1a6d9265ec018347", "generate_results": ["public synchronized void send(final String message){\n    Enumeration enumeration = this.connections.elements();\n    while(enumeration.hasMoreElements()){\n        Socket socket = (Socket)enumeration.nextElement();\n        PrintWriter writer = null;\n        try{\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            writer.println(message);\n        }catch(IOException e){\n            LogLog.error(\"Error sending message: \", e);\n        }finally{\n            if(writer != null){\n                writer.close();\n            }\n        }\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179e8", "generate_results": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n    return (array == null || array.length == 0) ? EMPTY_BOOLEAN_OBJECT_ARRAY : array;\n}"]}
{"_id": "6367677f1a6d9265ec01834b", "generate_results": ["public void put(LoggingEvent o){\n    // Validate input\n    if (o == null) {\n        throw new IllegalArgumentException(\"Input cannot be null\");\n    }\n\n    // Boundary check for resizing\n    if (numElements == maxSize) {\n        resize(maxSize * 2); // Double the size if full\n    }\n\n    // Place the event in the buffer\n    buf[next] = o;\n    next = (next + 1) % maxSize; // Circular queue logic\n    numElements++;\n}"]}
{"_id": "636767df1a6d9265ec018744", "generate_results": ["protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> result = new ArrayList<>();\n    while(start < end){\n        long nextStart = Math.min(start + FETCH_DATA_DURATION,start);\n        result.add(new TimeRange(nextStart,nextStart + FETCH_DATA_DURATION));\n        start = nextStart + FETCH_DATA_DURATION;\n    }\n    return result;\n}"]}
{"_id": "636767031a6d9265ec0178e6", "generate_results": ["public static byte[] toPrimitive(final Byte[] array){\n    if (array == null) {\n        return null;\n    }\n    final int length = array.length;\n    final byte[] result = new byte[length];\n    for (int i = 0; i < length; i++) {\n        final Byte b = array[i];\n        result[i] = (b == null ? 0 : b.byteValue());\n    }\n    return result;\n}"]}
{"_id": "636767dc1a6d9265ec0186be", "generate_results": ["static long compressTimeBucket(long timeBucket,int dayStep){\n    // Validate the input\n    if (timeBucket < 0 || dayStep <= 0) {\n        throw new IllegalArgumentException(\"Invalid input: timeBucket must be non-negative and dayStep must be positive.\");\n    }\n\n    // Extract year, month, and day from the time bucket\n    int year = (int) (timeBucket / 10000);\n    int month = (int) ((timeBucket % 10000) / 100);\n    int day = (int) (timeBucket % 100);\n\n    // Calculate the compressed day based on the dayStep\n    int compressedDay = day - (day % dayStep);\n\n    // Reconstruct the compressed time bucket\n    return (long) year * 10000 + month * 100 + compressedDay;\n}"]}
{"_id": "636767a41a6d9265ec01856c", "generate_results": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    // Validate the input\n    if (str == null || index < 0 || len < 0 || index + len > str.length()) {\n        throw new IllegalArgumentException(\"Invalid input parameters\");\n    }\n\n    int count = 0;\n    final int end = index + len;\n\n    for (int i = index; i < end; ++i) {\n        char c = str.charAt(i);\n\n        if ((c & 0x7F) == c) {\n            // ASCII character\n            count++;\n        } else if ((c & 0xE0) == 0xC0) {\n            // Two-byte UTF-8 character\n            count += 2;\n        } else if ((c & 0xF0) == 0xE0) {\n            // Three-byte UTF-8 character\n            count += 3;\n        } else if ((c & 0xF8) == 0xF0) {\n            // Four-byte UTF-8 character\n            count += 4;\n        } else {\n            // Invalid UTF-8 character\n            throw new UTFDataFormatException(\"Invalid UTF-8 character at position \" + i);\n        }\n    }\n\n    return count;\n}"]}
{"_id": "636766f01a6d9265ec017639", "generate_results": ["public static <T>List<T> asList(T[] a){\n    if(a==null)return Collections.emptyList();\n    return Arrays.asList(a);\n}"]}
{"_id": "6367672d1a6d9265ec017c74", "generate_results": ["public boolean remove(int val){\n    if(!map.containsKey(val)){\n        return false;\n    }\n    int last = values.get(values.size()-1);\n    int idx = map.get(val);\n    values.set(idx,last);\n    map.put(last,idx);\n    values.remove(values.size()-1);\n    map.remove(val);\n    return true;\n}"]}
{"_id": "6367676b1a6d9265ec0181df", "generate_results": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n    if(str == null || prefix == null){\n        return false;\n    }\n    if(prefix.length() > str.length()){\n        return false;\n    }\n    String lowerStr = str.toLowerCase();\n    String lowerPrefix = prefix.toLowerCase();\n    for(int i=0;i<prefix.length();i++){\n        if(lowerStr.charAt(i) != lowerPrefix.charAt(i)){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "6367674b1a6d9265ec017dc0", "generate_results": ["private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<>();\n    for (E e : graph.edgeSet()) {\n        V source = graph.getEdgeSource(e);\n        V target = graph.getEdgeTarget(e);\n        visibleVertices.add(source);\n        visibleVertices.add(target);\n    }\n    return visibleVertices;\n}"]}
{"_id": "636767001a6d9265ec017873", "generate_results": ["public static String reverse(final String str){\n    if (str == null) {\n        return null;\n    }\n    return new StringBuilder(str).reverse().toString();\n}"]}
{"_id": "636766ff1a6d9265ec01783b", "generate_results": ["public static String sub(String str,int start,int end){\n    if (str == null) {\n        return null;\n    }\n    int length = str.length();\n    if (start < 0 || end > length) {\n        throw new IllegalArgumentException(\"Invalid range: \" + start + \", \" + end);\n    }\n    return str.substring(start, end);\n}"]}
{"_id": "6367671a1a6d9265ec017c15", "generate_results": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    //Validate the input\n    if (byteArrayValue == null) {\n        throw new IllegalArgumentException(\"byteArrayValue cannot be null\");\n    }\n    if (byteOffset < 0 || byteLength < 0 || byteOffset + byteLength > byteArrayValue.length) {\n        throw new IndexOutOfBoundsException(\"Invalid byteOffset or byteLength\");\n    }\n\n    //Calculate the required capacity\n    final int requiredCapacity = this.size() + byteLength;\n\n    //Enlarge the byte vector if necessary\n    if (requiredCapacity > this.capacity()) {\n        this.enlarge(requiredCapacity);\n    }\n\n    //Copy the bytes from the input array to the byte vector\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.size(), byteLength);\n\n    //Update the size of the byte vector\n    this.length += byteLength;\n\n    return this;\n}"]}
{"_id": "636766821a6d9265ec0174d2", "generate_results": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequest.Builder().request(request).build();\n}"]}
{"_id": "636767ab1a6d9265ec01867b", "generate_results": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    // Validate the input\n    if (str == null || session == null || lb == null) {\n        throw new IllegalArgumentException(\"Input parameters cannot be null\");\n    }\n\n    int size = computeUTF8Size(str, 0, str.length());\n    if (size > lb.limit - lb.offset) {\n        lb = expand(lb, size);\n    }\n\n    writeUTF8(str, 0, str.length(), lb.buffer, lb.offset, lb.limit, session, lb);\n    lb.offset += size;\n\n    return lb;\n}"]}
{"_id": "6367675c1a6d9265ec01805b", "generate_results": ["public void removeFromTreeEdgeList(){\n    // Check if the edge is already removed\n    if (prev == null || next == null) {\n        return; // Edge is already removed\n    }\n\n    // Remove the edge from the previous node's next pointer\n    prev.next = next;\n\n    // Remove the edge from the next node's prev pointer\n    next.prev = prev;\n\n    // Clear the pointers to the previous and next nodes\n    prev = null;\n    next = null;\n}"]}
{"_id": "636767791a6d9265ec01826d", "generate_results": ["public static String findAndSubst(String key,Properties props){\n    try{\n        String value = props.getProperty(key);\n        return substVars(value,props);\n    }catch(Exception e){\n        return null;\n    }\n}"]}
{"_id": "636767001a6d9265ec01787f", "generate_results": ["protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    if (array == null) {\n        appendNullText(buffer,fieldName);\n        return;\n    }\n    appendFieldStart(buffer,fieldName);\n    append(arrayStart);\n    for (int i = 0; i < array.length; ++i) {\n        if (i > 0) {\n            append(arraySeparator);\n        }\n        append(array[i]);\n    }\n    append(arrayEnd);\n    appendFieldEnd(buffer,fieldName);\n}"]}
{"_id": "636766fe1a6d9265ec017834", "generate_results": ["public static String sessionId(){\n    return ((HttpServletRequest)Invoker.getHttpServlet()).getSession().getId();\n}"]}
{"_id": "636766ff1a6d9265ec01784b", "generate_results": ["public static boolean isDigits(String str){\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        if (!Character.isDigit(ch)) {\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636766fc1a6d9265ec0177da", "generate_results": ["private static boolean isParameterSeparator(final char c){\n    for (final char separator : PARAMETER_SEPARATORS) {\n        if (separator == c) {\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "6367670c1a6d9265ec017a35", "generate_results": ["private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n    if(str == null || suffix == null) return false;\n    if(suffix.length() > str.length()) return false;\n    int strOffset = str.length() - suffix.length();\n    int suffixOffset = 0;\n    while(suffixOffset < suffix.length()){\n        char strChar = str.charAt(strOffset + suffixOffset);\n        char suffixChar = suffix.charAt(suffixOffset);\n        if(ignoreCase){\n            if(Character.toUpperCase(strChar) != Character.toUpperCase(suffixChar)) return false;\n        }else{\n            if(strChar != suffixChar) return false;\n        }\n        suffixOffset++;\n    }\n    return true;\n}"]}
{"_id": "6367667f1a6d9265ec01745d", "generate_results": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    String path=u.getPath();\n    return decodePath(path,decode);\n}"]}
{"_id": "636766f11a6d9265ec017651", "generate_results": ["public static Character[] nullToEmpty(final Character[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}"]}
{"_id": "636767821a6d9265ec0183ab", "generate_results": ["public boolean hasThrown(){\n    return _thrown != null;\n}"]}
{"_id": "636767831a6d9265ec0183c9", "generate_results": ["public static String peek(){\n    return fullMessage;\n}"]}
{"_id": "636767de1a6d9265ec01871c", "generate_results": ["public void valueAccumulation(String key,Long value){\n    // Validate the input\n    if (key == null || value == null) {\n        throw new IllegalArgumentException(\"Key and value cannot be null\");\n    }\n\n    // Check if the key exists in the map\n    if (!data.containsKey(key)) {\n        // If the key does not exist, initialize it with the given value\n        data.put(key, value);\n    } else {\n        // If the key exists, add the given value to the existing value\n        Long currentValue = data.get(key);\n        data.put(key, currentValue + value);\n    }\n}"]}
{"_id": "636766811a6d9265ec017496", "generate_results": ["public InputStream next() throws IOException {\n    if (!stack.isEmpty()) {\n        return stack.getLast();\n    } else {\n        return null;\n    }\n}"]}
{"_id": "6367677e1a6d9265ec01832e", "generate_results": ["public Logger exists(String name){\n    // Validate the input\n    if (name == null) {\n        LogLog.error(\"Invalid logger name: null\");\n        return null;\n    }\n\n    // Check if the logger exists in the hierarchy\n    Logger logger = hierarchy.getLogger(name);\n    if (logger != null) {\n        return logger;\n    } else {\n        return null;\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179e7", "generate_results": ["public Converter lookup(final Class<?> clazz){\n    return converters.get(clazz);\n}"]}
{"_id": "636767a41a6d9265ec018572", "generate_results": ["public long readRawVarint64() throws IOException {\n    int b = input.read();\n    if (b == -1) {\n        throw new EOFException(\"Expected a varint but reached end of stream.\");\n    }\n    return ((long)(b & 0x7F)) << 56 |\n           ((long)((b = input.read()) & 0x7F)) << 49 |\n           ((long)((b = input.read()) & 0x7F)) << 42 |\n           ((long)((b = input.read()) & 0x7F)) << 35 |\n           ((long)((b = input.read()) & 0x7F)) << 28 |\n           ((long)((b = input.read()) & 0x7F)) << 21 |\n           ((long)((b = input.read()) & 0x7F)) << 14 |\n           ((long)((b = input.read()) & 0x7F)) << 7 |\n           (b & 0x7F);\n}"]}
{"_id": "636767021a6d9265ec0178bb", "generate_results": ["public static Double[] nullToEmpty(final Double[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\n    }\n    return array;\n}"]}
{"_id": "636767021a6d9265ec0178b2", "generate_results": ["private void pop(final String descriptor){\n    switch(descriptor.charAt(0)){\n        case 'B':\n            pop(BYTE);\n            break;\n        case 'C':\n            pop(CHAR);\n            break;\n        case 'D':\n            pop(DOUBLE);\n            break;\n        case 'F':\n            pop(FLOAT);\n            break;\n        case 'I':\n            pop(INTEGER);\n            break;\n        case 'J':\n            pop(LONG);\n            break;\n        case 'L':\n            pop(OBJECT);\n            break;\n        case '[':\n            pop(ARRAY_OF(pop()));\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}"]}
{"_id": "636766f91a6d9265ec01776e", "generate_results": ["@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    // Validate input\n    if (b == null) {\n        throw new NullPointerException(\"Input byte array is null\");\n    }\n    if (off < 0 || len < 0 || off + len > b.length) {\n        throw new IndexOutOfBoundsException(\"Invalid offset or length\");\n    }\n\n    // Ensure buffer has enough space\n    if (count + len > buf.length) {\n        expand(len);\n    }\n\n    // Copy bytes into buffer\n    System.arraycopy(b, off, buf, count, len);\n    count += len;\n\n    // Encode pending bytes if necessary\n    encodePendingBytes(true);\n}"]}
{"_id": "636767551a6d9265ec017f3f", "generate_results": ["public static final <V>void swap(V[] arr,int i,int j){\n    V temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}"]}
{"_id": "636766ae1a6d9265ec0175dc", "generate_results": ["public Boolean isPartialContentResponse(){\n    return this.response.getStatus() == 206;\n}"]}
{"_id": "636766f01a6d9265ec01762e", "generate_results": ["public static boolean isEmpty(final double[] array){\n    return array == null || array.length == 0;\n}"]}
{"_id": "6367667e1a6d9265ec01743a", "generate_results": ["public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == -1){\n        return -1;\n    }else{\n        return System.currentTimeMillis();\n    }\n}"]}
{"_id": "636767601a6d9265ec0180fd", "generate_results": ["protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    // Validate input\n    if (sourceVertex == null || targetVertex == null || e == null) {\n        throw new IllegalArgumentException(\"Input cannot be null\");\n    }\n\n    // Boundary check for touchingVerticesToEdgeMap\n    if (!touchingVerticesToEdgeMap.containsKey(Pair.of(sourceVertex, targetVertex))) {\n        touchingVerticesToEdgeMap.put(Pair.of(sourceVertex, targetVertex), new HashSet<>());\n    }\n\n    // Add edge to the set associated with the pair of vertices\n    touchingVerticesToEdgeMap.get(Pair.of(sourceVertex, targetVertex)).add(e);\n}"]}
{"_id": "636766821a6d9265ec0174c9", "generate_results": ["private static File[] classPath(){\n    String classpath = System.getProperty(\"java.class.path\");\n    String[] paths = classpath.split(File.pathSeparator);\n    File[] files = new File[paths.length];\n    for(int i=0;i<paths.length;i++){\n        files[i] = new File(paths[i]);\n    }\n    return files;\n}"]}
{"_id": "636767041a6d9265ec0178f8", "generate_results": ["private static String[] copyStrings(final String[] src){\n    if(src == null){\n        return new String[0];\n    }\n    final int length = src.length;\n    final String[] result = new String[length];\n    for(int i=0;i<length;i++){\n        result[i] = src[i].toLowerCase();\n    }\n    return result;\n}"]}
{"_id": "636767521a6d9265ec017ecc", "generate_results": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    // Validate input\n    if (box == null) {\n        throw new IllegalArgumentException(\"Input box cannot be null\");\n    }\n\n    // Calculate the midpoint along the x-axis\n    double midX = (box.getMinX() + box.getMaxX()) / 2;\n\n    // Create two new boxes with the same y-axis limits but different x-axis limits\n    Box2D leftBox = new Box2D(box.getMinX(), midX, box.getMinY(), box.getMaxY());\n    Box2D rightBox = new Box2D(midX, box.getMaxX(), box.getMinY(), box.getMaxY());\n\n    return new Pair<>(leftBox, rightBox);\n}"]}
{"_id": "636766a91a6d9265ec0175c1", "generate_results": ["private void enlarge(final int size){\n    final int newSize = Math.max(data.length + size, data.length * 2);\n    final byte[] newData = new byte[newSize];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}"]}
{"_id": "636767781a6d9265ec018238", "generate_results": ["public boolean isAttached(Appender appender){\n    // Validate input\n    if (appender == null) {\n        throw new IllegalArgumentException(\"Appender cannot be null\");\n    }\n\n    // Boundary check for appenderList\n    if (appenderList == null || appenderList.isEmpty()) {\n        return false;\n    }\n\n    // Check if appender exists in appenderList\n    Enumeration<Appender> enumeration = appenderList.elements();\n    while (enumeration.hasMoreElements()) {\n        Appender currentAppender = enumeration.nextElement();\n        if (currentAppender.equals(appender)) {\n            return true;\n        }\n    }\n\n    return false;\n}"]}
{"_id": "6367674a1a6d9265ec017dab", "generate_results": ["@Override public int compare(Double o1,Double o2){\n    double diff = Math.abs(o1 - o2);\n    if(diff < epsilon) return 0;\n    else return Double.compare(o1,o2);\n}"]}
{"_id": "6367672d1a6d9265ec017c78", "generate_results": ["public boolean insert(int val){\n    if(map.containsKey(val)){\n        return false;\n    }\n    else{\n        map.put(val,val);\n        return true;\n    }\n}"]}
{"_id": "636767dc1a6d9265ec0186c6", "generate_results": ["private boolean containsAllFields(Fields fields){\n    for (String fieldName : fields.getFieldNames()) {\n        if (!properties.containsKey(fieldName)) {\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636766821a6d9265ec0174bf", "generate_results": ["public static String capitalize(String name){\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}"]}
{"_id": "636767aa1a6d9265ec01865a", "generate_results": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    // Validate the input\n    if (out == null || node == null) {\n        throw new IllegalArgumentException(\"Input parameters cannot be null\");\n    }\n\n    // Boundary checks for buffer access\n    if (node.buffer == null || node.offset < 0 || node.start < 0 || node.start > node.buffer.length - node.offset) {\n        throw new IndexOutOfBoundsException(\"Invalid buffer or offset values\");\n    }\n\n    // Capture and handle runtime errors\n    try {\n        // Write the buffer to the output stream\n        out.write(node.buffer, node.start, node.offset);\n        return node.offset; // Return the number of bytes written\n    } catch (IOException e) {\n        // Handle the IOException appropriately\n        System.err.println(\"Error writing to output stream: \" + e.getMessage());\n        throw e; // Re-throw the exception after logging\n    }\n}"]}
{"_id": "636766f21a6d9265ec017677", "generate_results": ["public static boolean isNotTrue(Boolean bool){\n    return !bool;\n}"]}
{"_id": "6367674f1a6d9265ec017e74", "generate_results": ["public String toString(){\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size(); i++) {\n        sb.append(vs[i]);\n        if (i != size() - 1) {\n            sb.append(\", \");\n        }\n    }\n    return sb.toString();\n}"]}
{"_id": "6367675c1a6d9265ec018058", "generate_results": ["@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n    return () -> String.valueOf(start++);\n}"]}
{"_id": "6367677b1a6d9265ec0182bd", "generate_results": ["public String format(final LoggingEvent event){\n    // Validate input\n    if (event == null) {\n        throw new IllegalArgumentException(\"LoggingEvent cannot be null\");\n    }\n\n    // Initialize buffer\n    StringBuilder buf = new StringBuilder(BUF_SIZE);\n\n    // Check for conversion pattern\n    if (conversionPattern != null && !conversionPattern.isEmpty()) {\n        PatternParser parser = createPatternParser(conversionPattern);\n        parser.parse(buf, event);\n    } else {\n        // Default formatting if no pattern is provided\n        buf.append(event.getLoggerName()).append(\" - \").append(event.getMessage());\n    }\n\n    return buf.toString();\n}"]}
{"_id": "636766ff1a6d9265ec017842", "generate_results": ["public static double[] toPrimitive(final Double[] array){\n    if (array == null) {\n        return EMPTY_DOUBLE_ARRAY;\n    } else if (array.length == 0) {\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] result = new double[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}"]}
{"_id": "636766fa1a6d9265ec0177a9", "generate_results": ["private void addInitializedType(final int abstractType){\n    if(initializationCount < initializations.length){\n        initializations[initializationCount++] = abstractType;\n    }else{\n        throw new IllegalStateException(\"Too many initialized types\");\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179dc", "generate_results": ["private void putAbstractTypes(final int start,final int end){\n    for(int i=start;i<end;++i){\n        final Object t=currentFrame[i];\n        if(t instanceof Label){\n            putAbstractType(i,(Label)t);\n        }else{\n            putFrameType(t);\n        }\n    }\n}"]}
{"_id": "636766801a6d9265ec017482", "generate_results": ["public void readFrom(final InputStream in) throws IOException {\n    // Validate the input\n    if (in == null) {\n        throw new IllegalArgumentException(\"Input stream cannot be null\");\n    }\n\n    // Initialize buffer if it's not already initialized\n    if (buffer == null) {\n        resizeIfNeeded();\n    }\n\n    int bytesRead = 0;\n    while (bytesRead < size) {\n        try {\n            // Read data into the buffer\n            int result = in.read(buffer, pointer + bytesRead, size - bytesRead);\n            if (result == -1) {\n                break; // End of file reached\n            }\n            bytesRead += result;\n        } catch (IOException e) {\n            // Handle I/O errors\n            destroy(); // Clean up resources\n            throw e;\n        }\n    }\n\n    // Update the pointer and size based on the number of bytes read\n    pointer += bytesRead;\n    this.size = pointer;\n}"]}
{"_id": "6367670a1a6d9265ec0179d8", "generate_results": ["@Override public void write(final byte[] b) throws IOException {\n    // Validate the input\n    if (b == null) {\n        throw new IllegalArgumentException(\"Input byte array cannot be null\");\n    }\n\n    // Perform boundary checks\n    if (b.length > Integer.MAX_VALUE - buf.length) {\n        throw new OutOfMemoryError(\"Buffer overflow\");\n    }\n\n    // Capture and handle runtime errors\n    try {\n        // Write the byte array to the buffer\n        for (int i = 0; i < b.length; i++) {\n            buf[buf.length + i] = b[i];\n        }\n    } catch (ArrayIndexOutOfBoundsException e) {\n        throw new IOException(\"Failed to write byte array\", e);\n    }\n}"]}
{"_id": "636766a81a6d9265ec01757b", "generate_results": ["@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    return this.toString((Feature)features);\n}"]}
{"_id": "636767021a6d9265ec0178bf", "generate_results": ["@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n    if (value == null || \"\".equals(value)) {\n        return this.getDefaultType();\n    }\n    String strValue = value.toString();\n    if (strValue.length() == 0) {\n        return this.getDefaultType();\n    } else {\n        return strValue.charAt(0);\n    }\n}"]}
{"_id": "6367670b1a6d9265ec017a0f", "generate_results": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    if (str == null || searchStrArray == null) {\n        return false;\n    }\n    for (String searchStr : searchStrArray) {\n        if (StringUtils.equalsIgnoreCase(str, searchStr)) {\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "636766a81a6d9265ec01758e", "generate_results": ["public static int nextPrime(int desiredCapacity){\n    // Validate the input\n    if (desiredCapacity < 0 || desiredCapacity >= primeCapacities.length) {\n        throw new IllegalArgumentException(\"Invalid capacity index\");\n    }\n\n    // Perform boundary checks\n    if (primeCapacities[desiredCapacity] == -1) {\n        return -1; // Indicates no prime number found at this capacity\n    }\n\n    // Capture and handle runtime errors\n    try {\n        return primeCapacities[desiredCapacity];\n    } catch (ArrayIndexOutOfBoundsException e) {\n        System.err.println(\"Error accessing array: \" + e.getMessage());\n        return -1; // Return a default value or handle the error as needed\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179cf", "generate_results": ["public static char toChar(final Character ch,final char defaultValue){\n    return (ch != null) ? ch : defaultValue;\n}"]}
{"_id": "6367676b1a6d9265ec0181e2", "generate_results": ["public static Object findFirstMatch(Collection source,Collection candidates){\n    for (Object candidate : candidates) {\n        if (source.contains(candidate)) {\n            return candidate;\n        }\n    }\n    return null;\n}"]}
{"_id": "6367676b1a6d9265ec0181ee", "generate_results": ["public static String trimTrailingWhitespace(String str){\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    while ((len > 0) && Character.isWhitespace(str.charAt(len - 1))) {\n        len--;\n    }\n    return str.substring(0, len);\n}"]}
{"_id": "636767dc1a6d9265ec0186cb", "generate_results": ["public void init(){\n    File dir = new File(analyzeResultDist);\n    if (!dir.exists()) {\n        boolean result = dir.mkdirs();\n        if (result) {\n            System.out.println(\"Directory created successfully.\");\n        } else {\n            System.out.println(\"Failed to create directory.\");\n        }\n    } else {\n        System.out.println(\"Directory already exists.\");\n    }\n}"]}
{"_id": "636767a31a6d9265ec018552", "generate_results": ["@Override public String readString() throws IOException {\n  int length = readRawVarint32();\n  if (length < 0) {\n    throw InvalidProtocolBufferException.negativeSize();\n  }\n  if (bufferPos + length > bufferSize) {\n    refillBuffer(true);\n    return readString();\n  }\n  String result = new String(buffer, bufferPos, length, \"UTF-8\");\n  bufferPos += length;\n  return result;\n}"]}
{"_id": "636767a61a6d9265ec0185b7", "generate_results": ["private static int digitValue(final char c){\n    return Character.digit(c, 10);\n}"]}
{"_id": "636767e01a6d9265ec018755", "generate_results": ["private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    // Validate the input\n    if (jsonObject == null) {\n        throw new IllegalArgumentException(\"Input JsonObject is null\");\n    }\n    // Extract the \"content\" field from the JsonObject\n    JsonElement jsonElement = jsonObject.get(\"content\");\n    if (jsonElement != null && jsonElement.isJsonObject()) {\n        JsonObject innerJsonObject = jsonElement.getAsJsonObject();\n        // Iterate over each key-value pair in the inner JsonObject\n        for (Map.Entry<String, JsonElement> entry : innerJsonObject.entrySet()) {\n            String key = entry.getKey();\n            JsonElement value = entry.getValue();\n            // Add the key-value pair to the content map\n            content.put(key, value);\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid 'content' field in JsonObject\");\n    }\n    return content;\n}"]}
{"_id": "6367667f1a6d9265ec017458", "generate_results": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    // Validate the input\n    if (mapping == null || mapping.isEmpty()) {\n        throw new IllegalArgumentException(\"Mapping cannot be null or empty\");\n    }\n\n    // Remove the mapping from atmosphereHandlers\n    atmosphereHandlers.remove(mapping);\n\n    return this;\n}"]}
{"_id": "636767a21a6d9265ec018517", "generate_results": ["public final byte[] toByteArray(){\n    int size = getSize();\n    byte[] result = new byte[size];\n    copyTo(result, 0, size);\n    return result;\n}"]}
{"_id": "6367667d1a6d9265ec017401", "generate_results": ["public static String unescapeJava(String str) throws Exception {\n    if (str == null) {\n        return null;\n    }\n    Writer writer = new StringWriter(str.length());\n    unescapeJava(writer, str);\n    return writer.toString();\n}"]}
{"_id": "636766f01a6d9265ec01763e", "generate_results": ["private static String javaCharset(String charset){\n    Map<String,String> MIME2JAVA = new HashMap<>();\n    MIME2JAVA.put(\"us-ascii\", \"US-ASCII\");\n    MIME2JAVA.put(\"iso-8859-1\", \"ISO-8859-1\");\n    MIME2JAVA.put(\"utf-8\", \"UTF-8\");\n    // Add more mappings as needed\n    return MIME2JAVA.get(charset.toLowerCase(Locale.US));\n}"]}
{"_id": "6367676a1a6d9265ec0181bf", "generate_results": ["public static Object quoteIfString(Object obj){\n    if(obj instanceof String){\n        return quote((String) obj);\n    }\n    return obj;\n}"]}
{"_id": "636767501a6d9265ec017e86", "generate_results": ["@Override public ListNode<E> previousNode(){\n    return this.prev;\n}"]}
{"_id": "636766f21a6d9265ec017667", "generate_results": ["public short readShort(final int offset){\n    return (short) ((classFileBuffer[offset] & 0xFF) << 8 | (classFileBuffer[offset + 1] & 0xFF));\n}"]}
{"_id": "636767031a6d9265ec0178ef", "generate_results": ["private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    if(array == null){\n        throw new NullPointerException(\"array is null\");\n    }\n    int length = Array.getLength(array);\n    Object newArray = Array.newInstance(newArrayComponentType,length + 1);\n    System.arraycopy(array,0,newArray,0,length);\n    return newArray;\n}"]}
{"_id": "636767431a6d9265ec017c8d", "generate_results": ["private int computeBinaryLog(int n){\n    // Validate the input\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be a positive integer.\");\n    }\n\n    // Calculate the binary log using bitwise operations\n    int log = 0;\n    while (n > 1) {\n        n >>= 1; // Equivalent to n /= 2\n        log++;\n    }\n    return log;\n}"]}
{"_id": "636767611a6d9265ec018116", "generate_results": ["private Set<V> intersection(Set<V> set1,Set<V> set2){\n    // Validate input\n    if (set1 == null || set2 == null) {\n        throw new IllegalArgumentException(\"Input sets cannot be null\");\n    }\n\n    // Create a new set to store the intersection\n    Set<V> intersection = new HashSet<>(set1);\n\n    // Retain only elements that are also in set2\n    intersection.retainAll(set2);\n\n    return intersection;\n}"]}
{"_id": "636766f71a6d9265ec017730", "generate_results": ["static String[] toNoNullStringArray(Collection<?> collection){\n    if (collection == null) {\n        return ArrayUtils.EMPTY_STRING_ARRAY;\n    }\n    Object[] array = collection.toArray();\n    String[] stringArray = new String[array.length];\n    for (int i = 0; i < array.length; i++) {\n        stringArray[i] = array[i].toString();\n    }\n    return stringArray;\n}"]}
{"_id": "636767081a6d9265ec0179a2", "generate_results": ["private static boolean isAllZeros(String s){\n    for(char c:s.toCharArray()){\n        if(c != '0'){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636766821a6d9265ec0174b3", "generate_results": ["protected Object filter(Object msg){\n    if(msg == null || (msg instanceof BroadcastAction && ((BroadcastAction) msg).equals(BroadcastAction.ABORT))){\n        return null;\n    }\n    return msg;\n}"]}
{"_id": "636767e01a6d9265ec018764", "generate_results": ["private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    JsonObject jsonObject = new JsonObject();\n    for(KeyStringValuePair property : properties){\n        jsonObject.addProperty(property.getKey(),property.getValue());\n    }\n    return jsonObject;\n}"]}
{"_id": "6367677e1a6d9265ec018314", "generate_results": ["protected int removeUnusedNodes(){\n    // Validate input\n    if (_categoryModel == null) {\n        throw new IllegalArgumentException(\"Category model cannot be null\");\n    }\n\n    // Initialize counter for removed nodes\n    int removedCount = 0;\n\n    // Iterate over all nodes in the category model\n    Enumeration<CategoryNode> nodes = _categoryModel.getRoot().children();\n    while (nodes.hasMoreElements()) {\n        CategoryNode node = nodes.nextElement();\n\n        // Check if the node is unused\n        if (!isNodeUsed(node)) {\n            // Remove the node from the model\n            _categoryModel.removeNode(node);\n            removedCount++;\n        }\n    }\n\n    return removedCount;\n}"]}
{"_id": "636766ff1a6d9265ec017853", "generate_results": ["protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n    // Validate the input\n    if (labels == null || bytecodeOffset < 0) {\n        throw new IllegalArgumentException(\"Invalid input\");\n    }\n\n    // Check if the label has already been created\n    if (labels[bytecodeOffset] != null) {\n        return labels[bytecodeOffset];\n    }\n\n    // Create a new label and store it in the array\n    Label newLabel = new Label();\n    labels[bytecodeOffset] = newLabel;\n\n    return newLabel;\n}"]}
{"_id": "6367677d1a6d9265ec0182fd", "generate_results": ["public static boolean toBoolean(String value,boolean dEfault){\n    if(value==null){\n        return dEfault;\n    }\n    String trimmedValue=value.trim().toLowerCase();\n    if(trimmedValue.equals(\"true\")){\n        return true;\n    }else if(trimmedValue.equals(\"false\")){\n        return false;\n    }else{\n        return dEfault;\n    }\n}"]}
{"_id": "6367676a1a6d9265ec0181cd", "generate_results": ["public static String trimLeadingWhitespace(String str){\n    if (str == null || str.length() == 0) {\n        return str;\n    }\n    int start = 0;\n    while (start < str.length() && Character.isWhitespace(str.charAt(start))) {\n        start++;\n    }\n    return str.substring(start);\n}"]}
{"_id": "636766fe1a6d9265ec01782a", "generate_results": ["final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    final int utfOffset = cpInfoOffsets[constantPoolEntryIndex];\n    return readUtf(utfOffset,charBuffer);\n}"]}
{"_id": "636766851a6d9265ec01751b", "generate_results": ["private static char decodeHexNibble(final char c){\n    switch(c){\n        case '0':case '1':case '2':case '3':\n        case '4':case '5':case '6':case '7':\n            return (char)(c - '0');\n        case '8':case '9':case 'A':case 'B':\n        case 'C':case 'D':case 'E':case 'F':\n            return (char)(c - 'A' + 10);\n        case 'a':case 'b':case 'c':case 'd':\n        case 'e':case 'f':\n            return (char)(c - 'a' + 10);\n        default: throw new IllegalArgumentException(\"Invalid hex digit: \" + c);\n    }\n}"]}
{"_id": "636766f21a6d9265ec01767d", "generate_results": ["public static String toString(Object object){\n    return (object != null) ? object.toString() : null;\n}"]}
{"_id": "636767581a6d9265ec017fc4", "generate_results": ["public static long factorial(int n){\n    // Validate the input\n    if (n < 0) {\n        throw new IllegalArgumentException(\"Input must be a non-negative integer.\");\n    }\n\n    // Initialize result\n    long result = 1;\n\n    // Calculate factorial using loop\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n\n    return result;\n}"]}
{"_id": "636767511a6d9265ec017eb6", "generate_results": ["private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    // Validate input\n    if (start == null || stop == null) {\n        throw new IllegalArgumentException(\"Start and stop nodes cannot be null\");\n    }\n    if (!graph.containsVertex(start.getGraphVertex()) || !graph.containsVertex(stop.getGraphVertex())) {\n        throw new IllegalArgumentException(\"Start and stop nodes must belong to the graph\");\n    }\n\n    // Initialize variables\n    Node current = start;\n    int count = 0;\n\n    // Traverse the outer face in the specified direction\n    while (current != stop && count < graph.vertexSet().size() * 2) { // Boundary check to prevent infinite loop\n        if (predicate.test(current)) {\n            return new OuterFaceCirculator(current, null); // Return the first node that satisfies the predicate\n        }\n        current = nextOnOuterFace(current, dir);\n        count++;\n    }\n\n    // If no node satisfies the predicate, return null\n    return null;\n}"]}
{"_id": "636767841a6d9265ec0183e8", "generate_results": ["public void add(LoggingEvent event){\n    // Validate input\n    if (event == null) {\n        throw new IllegalArgumentException(\"Event cannot be null\");\n    }\n\n    // Boundary check for resizing\n    if (numElems >= maxSize) {\n        resize(maxSize * 2); // Double the size if full\n    }\n\n    // Add event to the end of the buffer\n    ea[last] = event;\n    last = (last + 1) % maxSize; // Update last index with wrap-around\n    numElems++;\n}"]}
{"_id": "636767a41a6d9265ec01857e", "generate_results": ["private static int compareSigned(long a,long b){\n    return (a < b) ? -1 : ((a == b) ? 0 : 1);\n}"]}
{"_id": "636767691a6d9265ec0181ae", "generate_results": ["public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = Collections.list(enumeration);\n    return list.toArray(new String[list.size()]);\n}"]}
{"_id": "636766a91a6d9265ec0175ae", "generate_results": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    // Validate the input\n    if (byteArrayValue == null) {\n        throw new IllegalArgumentException(\"byteArrayValue cannot be null\");\n    }\n    if (byteOffset < 0 || byteLength < 0 || byteOffset + byteLength > byteArrayValue.length) {\n        throw new IndexOutOfBoundsException(\"Invalid byteOffset or byteLength\");\n    }\n\n    // Ensure there is enough space in the ByteVector\n    enlarge(byteLength);\n\n    // Copy the byte array into the ByteVector\n    System.arraycopy(byteArrayValue, byteOffset, this.data, this.length, byteLength);\n    this.length += byteLength;\n\n    return this;\n}"]}
{"_id": "636766f11a6d9265ec01764f", "generate_results": ["public Collection<Object> values(){\n    return Collections.unmodifiableList(new ArrayList<>(this.values()));\n}"]}
{"_id": "636766f81a6d9265ec017758", "generate_results": ["@Override public int hashCode(){\n    return getSort() * 31 + getDimensions();\n}"]}
{"_id": "6367676c1a6d9265ec01820b", "generate_results": ["public static String deleteAny(String inString,String charsToDelete){\n    // Validate the input\n    if (inString == null || charsToDelete == null) {\n        throw new IllegalArgumentException(\"Input strings cannot be null\");\n    }\n\n    // Create a boolean array to mark characters to be deleted\n    boolean[] deleteFlags = new boolean[256];\n    for (int i = 0; i < charsToDelete.length(); i++) {\n        deleteFlags[charsToDelete.charAt(i)] = true;\n    }\n\n    // Build the result string by skipping characters marked for deletion\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < inString.length(); i++) {\n        char c = inString.charAt(i);\n        if (!deleteFlags[c]) {\n            sb.append(c);\n        }\n    }\n\n    return sb.toString();\n}"]}
{"_id": "636766861a6d9265ec01755a", "generate_results": ["public final MatchResult match(CharSequence uri){\n    Objects.requireNonNull(uri,\"uri cannot be null\");\n    if(!regexPattern.matcher(uri).matches()){\n        return null;\n    }\n    return new GroupIndexMatchResult(regexPattern.matcher(uri));\n}"]}
{"_id": "636766f91a6d9265ec01777d", "generate_results": ["public static byte convertHexDigit(byte b){\n    if(b >= '0' && b <= '9'){\n        return (byte)(b - '0');\n    }else if(b >= 'a' && b <= 'f'){\n        return (byte)(b - 'a' + 10);\n    }else if(b >= 'A' && b <= 'F'){\n        return (byte)(b - 'A' + 10);\n    }\n    throw new IllegalArgumentException(\"Invalid hexadecimal digit: \" + b);\n}"]}
{"_id": "636766801a6d9265ec017477", "generate_results": ["private void addReverse(final InputStream[] files){\n    for(int i = files.length - 1; i >= 0; --i){\n        stack.addFirst(files[i]);\n    }\n}"]}
{"_id": "636767de1a6d9265ec01871e", "generate_results": ["private void check(String modelName) throws IllegalStateException {\n    if (modelName == null) {\n        throw new IllegalArgumentException(\"Model name cannot be null\");\n    }\n}"]}
{"_id": "636766f81a6d9265ec01774b", "generate_results": ["public byte readByte() throws IOException {\n    if (head == tail) {\n        fillBuffer();\n        if (head == tail)\n            return -1; // EOF\n    }\n    return buffer[head++];\n}"]}
{"_id": "636766851a6d9265ec017515", "generate_results": ["@Override public Action inspect(AtmosphereResource r){\n    String transport = r.transport().name();\n    if (UNDEFINED.name().equals(transport)) {\n        return Action.BLOCK;\n    }\n    return Action.CONTINUE;\n}"]}
{"_id": "636767611a6d9265ec018106", "generate_results": ["public double vertexWeight(Set<V> v){\n    double totalWeight = 0.0;\n    for(DefaultWeightedEdge edge : workingGraph.incomingEdgesOf(v)){\n        totalWeight += workingGraph.getEdgeWeight(edge);\n    }\n    return totalWeight;\n}"]}
{"_id": "636767841a6d9265ec0183f2", "generate_results": ["public int compare(Object aObj1,Object aObj2){\n    EventDetails event1 = (EventDetails)aObj1;\n    EventDetails event2 = (EventDetails)aObj2;\n    return event1.getTimeStamp().compareTo(event2.getTimeStamp());\n}"]}
{"_id": "636767861a6d9265ec01844c", "generate_results": ["public void removeAppender(String name){\n    // Validate the input\n    if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Name cannot be null or empty\");\n    }\n\n    // Boundary check for appenderList\n    if (appenderList != null) {\n        Enumeration<Appender> enumeration = appenderList.elements();\n        while (enumeration.hasMoreElements()) {\n            Appender appender = enumeration.nextElement();\n            if (appender.getName().equals(name)) {\n                appenderList.remove(appender);\n                return;\n            }\n        }\n    }\n}"]}
{"_id": "636767781a6d9265ec018242", "generate_results": ["public int appendLoopOnAppenders(LoggingEvent event){\n    Enumeration enumeration = getAllAppenders();\n    int count = 0;\n    while (enumeration.hasMoreElements()){\n        Appender appender = (Appender) enumeration.nextElement();\n        try {\n            appender.doAppend(event);\n            count++;\n        } catch (Exception e) {\n            // Handle the exception appropriately\n            System.err.println(\"Error appending to appender: \" + e.getMessage());\n        }\n    }\n    return count;\n}"]}
{"_id": "6367670c1a6d9265ec017a2a", "generate_results": ["public static int[] toPrimitive(final Integer[] array){\n    if (array == null) {\n        return null;\n    }\n    if (array.length == 0) {\n        return EMPTY_INT_ARRAY;\n    }\n    final int[] result = new int[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].intValue();\n    }\n    return result;\n}"]}
{"_id": "636767041a6d9265ec017911", "generate_results": ["static void register(Object value){\n    if(value != null){\n        REGISTRY.set(value);\n    }\n}"]}
{"_id": "636767511a6d9265ec017eb0", "generate_results": ["public int nonZeros(int row){\n    // Validate the input\n    if (row < 0 || row >= rows()) {\n        throw new IllegalArgumentException(\"Invalid row index: \" + row);\n    }\n    \n    // Calculate the start and end positions for the given row\n    int startPos = rowOffsets[row];\n    int endPos = rowOffsets[row + 1];\n    \n    // Return the number of non-zero entries in the row\n    return endPos - startPos;\n}"]}
{"_id": "6367676c1a6d9265ec018223", "generate_results": ["public static boolean containsInstance(Collection collection,Object element){\n    for (Object obj : collection) {\n        if (obj == element) {\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "636766fa1a6d9265ec01779d", "generate_results": ["public static boolean isAsciiControl(final char ch){\n    return (ch >= '\\0' && ch <= '\\x1F') || ch == '\\x7F';\n}"]}
{"_id": "6367670b1a6d9265ec0179f2", "generate_results": ["@Override public boolean containsKey(final Object key){\n    // Validate the input\n    if (key == null) {\n        throw new IllegalArgumentException(\"Key cannot be null\");\n    }\n    \n    // Perform boundary checks\n    if (map == null || map.isEmpty()) {\n        return false;\n    }\n    \n    // Capture and handle runtime errors\n    try {\n        return map.containsKey(key);\n    } catch (Exception e) {\n        // Handle the exception appropriately\n        System.err.println(\"Error occurred while checking if the map contains the key: \" + e.getMessage());\n        return false;\n    }\n}"]}
{"_id": "636766fa1a6d9265ec017796", "generate_results": ["public static Boolean[] toObject(final boolean[] array){\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return EMPTY_BOOLEAN_OBJECT_ARRAY;\n    }\n    final Boolean[] result = new Boolean[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i] ? Boolean.TRUE : Boolean.FALSE;\n    }\n    return result;\n}"]}
{"_id": "636767aa1a6d9265ec01864a", "generate_results": ["public byte[] toByteArray(){\n    return copyTo(new byte[size()]);\n}"]}
{"_id": "636767561a6d9265ec017f7c", "generate_results": ["protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    // Validate input\n    requireNotEmpty(graph);\n\n    List<V> vertexList = new ArrayList<>();\n    for (E edge : tour) {\n        V source = graph.getEdgeSource(edge);\n        V target = graph.getEdgeTarget(edge);\n        if (!vertexList.contains(source)) {\n            vertexList.add(source);\n        }\n        if (!vertexList.contains(target)) {\n            vertexList.add(target);\n        }\n    }\n\n    // Ensure no duplicate vertices in the list\n    Set<V> uniqueVertices = new HashSet<>(vertexList);\n    if (uniqueVertices.size() != vertexList.size()) {\n        throw new IllegalArgumentException(\"Duplicate vertices found in the tour.\");\n    }\n\n    // Create a path from the list of vertices\n    return new Walk<V,E>(graph, vertexList);\n}"]}
{"_id": "6367670a1a6d9265ec0179f1", "generate_results": ["public static Short[] toObject(final short[] array){\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return EMPTY_SHORT_OBJECT_ARRAY;\n    }\n    final Short[] result = new Short[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = Short.valueOf(array[i]);\n    }\n    return result;\n}"]}
{"_id": "636766fe1a6d9265ec017823", "generate_results": ["int addConstantNameAndType(final String name,final String descriptor){\n    // Validate the input\n    if (name == null || descriptor == null) {\n        throw new IllegalArgumentException(\"Name and descriptor cannot be null\");\n    }\n    \n    // Compute hash code for the constant\n    int hashCode = hash(HC_NAME_AND_TYPE, name, descriptor);\n    \n    // Check if the constant already exists in the constant pool\n    Entry e = get(hashCode);\n    while (e != null) {\n        if (e.tag == HC_NAME_AND_TYPE && e.equals(name, descriptor)) {\n            return e.index;\n        }\n        e = e.next;\n    }\n    \n    // Add the constant to the constant pool\n    int index = constantPoolCount++;\n    putConstantPool(new ByteVector().put11(HC_NAME_AND_TYPE).putUTF8(name).putUTF8(descriptor));\n    \n    // Create a new entry for the constant\n    e = new Entry(index, HC_NAME_AND_TYPE, name, descriptor, 0, hashCode);\n    put(e);\n    \n    return index;\n}"]}
{"_id": "636767461a6d9265ec017d17", "generate_results": ["private String unescapeId(String input){\n    return unescapeHtmlString(input);\n}"]}
{"_id": "6367676c1a6d9265ec018204", "generate_results": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    // Validate input\n    if (array1 == null) {\n        array1 = new String[0];\n    }\n    if (array2 == null) {\n        array2 = new String[0];\n    }\n\n    // Calculate the length of the resulting array\n    int totalLength = array1.length + array2.length;\n\n    // Create a new array with the combined length\n    String[] result = new String[totalLength];\n\n    // Copy elements from the first array\n    System.arraycopy(array1, 0, result, 0, array1.length);\n\n    // Copy elements from the second array\n    System.arraycopy(array2, 0, result, array1.length, array2.length);\n\n    return result;\n}"]}
{"_id": "636767641a6d9265ec018190", "generate_results": ["private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    // Check if the minimum label bucket is empty\n    if (bucketsByLabel.get(minLabel).isEmpty()) {\n        return; // No need to reload if the bucket is already empty\n    }\n\n    // Move all vertices from the minimum label bucket to the bucket with label 0\n    for (Integer vertex : bucketsByLabel.get(minLabel)) {\n        putToNextBucket(vertex, 0, bucketsByLabel, labels);\n    }\n\n    // Clear the minimum label bucket\n    bucketsByLabel.set(minLabel, new HashSet<>());\n}"]}
{"_id": "6367676a1a6d9265ec0181d4", "generate_results": ["public static String[] addStringToArray(String[] array,String str){\n    // Validate the input\n    if (array == null) {\n        return new String[]{str};\n    }\n    // Create a new array with one more element than the original array\n    String[] newArray = Arrays.copyOf(array, array.length + 1);\n    // Add the new string to the end of the new array\n    newArray[newArray.length - 1] = str;\n    return newArray;\n}"]}
{"_id": "6367676b1a6d9265ec0181dd", "generate_results": ["public static int countOccurrencesOf(String str,String sub){\n    if(str == null || sub == null || str.length() < sub.length()){\n        return 0;\n    }\n    int count = 0;\n    int fromIndex = 0;\n    while(fromIndex != -1){\n        fromIndex = str.indexOf(sub,fromIndex);\n        if(fromIndex != -1){\n            count++;\n            fromIndex += sub.length();\n        }\n    }\n    return count;\n}"]}
{"_id": "636766811a6d9265ec017499", "generate_results": ["private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    for (final AtmosphereInterceptor interceptor : interceptorList) {\n        if (c.isInstance(interceptor)) {\n            return true;\n        }\n    }\n    return false;\n}"]}
{"_id": "636766fe1a6d9265ec017821", "generate_results": ["protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    if (array == null) {\n        appendNullText(buffer,fieldName);\n    } else {\n        appendFieldStart(buffer,fieldName);\n        append(arrayStart);\n        int length = array.length;\n        for (int i = 0; i < length; ++i) {\n            if (i > 0) {\n                append(arraySeparator);\n            }\n            append(array[i]);\n        }\n        append(arrayEnd);\n        appendFieldEnd(buffer,fieldName);\n    }\n}"]}
{"_id": "636767561a6d9265ec017f63", "generate_results": ["@Override public boolean hasNext(){\n    // Validate input\n    if (bucketList == null) {\n        throw new IllegalArgumentException(\"Input bucketList cannot be null\");\n    }\n    \n    // Perform boundary checks\n    if (bucketList.isEmpty()) {\n        return false; // No buckets means no vertices\n    }\n\n    // Check for unvisited vertices in the first bucket\n    Bucket currentBucket = bucketList.head;\n    while (currentBucket != null) {\n        Set<V> verticesInCurrentBucket = currentBucket.vertices;\n        for (V vertex : verticesInCurrentBucket) {\n            if (!vertex.isVisited()) { // Assuming V has a method isVisited()\n                return true;\n            }\n        }\n        currentBucket = currentBucket.next;\n    }\n\n    return false; // All vertices have been visited\n}"]}
{"_id": "636766a81a6d9265ec017586", "generate_results": ["private void pop(final int elements){\n    if (elements > 0) {\n        outputStackTop -= elements;\n    }\n}"]}
{"_id": "636767e11a6d9265ec018795", "generate_results": ["public boolean isCompatible(DataTable dataset){\n    long[] existingBuckets = dataset.getBuckets();\n    return Arrays.equals(buckets, existingBuckets);\n}"]}
{"_id": "636767791a6d9265ec018263", "generate_results": ["private Class findClass(final String className) throws ClassNotFoundException {\n    try {\n        return Class.forName(className);\n    } catch (ClassNotFoundException e) {\n        // Log the error and rethrow it\n        System.err.println(\"Class not found: \" + className);\n        throw e;\n    }\n}"]}
{"_id": "636767611a6d9265ec018112", "generate_results": ["@Override protected V provideNextVertex(){\n    // Validate input\n    if (graph == null || cycleSet == null || startVertex == null) {\n        throw new IllegalArgumentException(\"Input parameters cannot be null\");\n    }\n\n    // Boundary check for startVertex in cycleSet\n    if (!cycleSet.contains(startVertex)) {\n        throw new IllegalArgumentException(\"Start vertex is not part of the cycle set\");\n    }\n\n    // Traverse the graph to find the next vertex\n    Iterator<V> iterator = graph.vertexSet().iterator();\n    while (iterator.hasNext()) {\n        V vertex = iterator.next();\n        if (vertex != startVertex && !cycleSet.contains(vertex)) {\n            return vertex; // Return the first non-start vertex not in cycleSet\n        }\n    }\n\n    return null; // No valid next vertex found\n}"]}
{"_id": "636767131a6d9265ec017b23", "generate_results": ["final void addLineNumber(final int lineNumber){\n    // Validate the input\n    if (lineNumber < 0) {\n        throw new IllegalArgumentException(\"Line number cannot be negative\");\n    }\n\n    // Check if there is enough space in the array\n    if (otherLineNumbers.length == lineNumbersCapacity) {\n        // Increase the capacity of the array\n        lineNumbersCapacity += LINE_NUMBERS_CAPACITY_INCREMENT;\n        otherLineNumbers = Arrays.copyOf(otherLineNumbers, lineNumbersCapacity);\n    }\n\n    // Add the line number to the array\n    otherLineNumbers[lineNumbersCount++] = lineNumber;\n}"]}
{"_id": "6367675a1a6d9265ec018010", "generate_results": ["void removeSelf(){\n    // Check if the node is null\n    if (this == null) {\n        return;\n    }\n\n    // Update the previous node's next pointer\n    if (prev != null) {\n        prev.next = next;\n    }\n\n    // Update the next node's previous pointer\n    if (next != null) {\n        next.prev = prev;\n    }\n\n    // Set the pointers of the current node to null\n    prev = null;\n    next = null;\n}"]}
{"_id": "636767dd1a6d9265ec0186f3", "generate_results": ["public void overrideName(String oldName,String newName){\n    for(int i=0;i<columns.length;i++){\n        if(columns[i].equals(oldName)){\n            columns[i]=newName;\n        }\n    }\n}"]}
{"_id": "636767631a6d9265ec018171", "generate_results": ["private boolean unlink(ListNodeImpl<E> node){\n    //Validate the input\n    if(node == null){\n        throw new IllegalArgumentException(\"Input node cannot be null\");\n    }\n    ListNodeImpl<E> predecessor = node.getPrev();\n    ListNodeImpl<E> successor = node.getNext();\n\n    //Boundary checks\n    if(predecessor == null || successor == null){\n        throw new IllegalStateException(\"Invalid state: Node is not properly linked in the list\");\n    }\n\n    //Capture and handle runtime errors\n    try{\n        //Unlink the node from the list\n        predecessor.setNext(successor);\n        successor.setPrev(predecessor);\n\n        //Update the size of the list\n        size--;\n\n        //Check for concurrent modification\n        expectedModCount++;\n\n        return true;\n    }catch(Exception e){\n        System.err.println(\"Error occurred while unlinking the node: \" + e.getMessage());\n        return false;\n    }\n}"]}
{"_id": "636767de1a6d9265ec018726", "generate_results": ["public List<SequenceRange> buildSequenceRanges(){\n    List<SequenceRange> sequenceRanges = new ArrayList<>();\n    for (int i = minSequence; i <= maxSequence; i += SEQUENCE_RANGE_BATCH_SIZE) {\n        int upperBound = Math.min(i + SEQUENCE_RANGE_BATCH_SIZE - 1, maxSequence);\n        sequenceRanges.add(new SequenceRange(i, upperBound));\n    }\n    return sequenceRanges;\n}"]}
{"_id": "6367667c1a6d9265ec0173f7", "generate_results": ["public boolean hasBytes(){\n    if(dataBytes == null){\n        return false;\n    }else{\n        return true;\n    }\n}"]}
{"_id": "6367676c1a6d9265ec018220", "generate_results": ["public static String stripFilenameExtension(String path){\n    int extIndex = path.lastIndexOf('.');\n    return (extIndex == -1) ? path : path.substring(0, extIndex);\n}"]}
{"_id": "636766fe1a6d9265ec017838", "generate_results": ["public static char[] toPrimitive(final Character[] array){\n    if(array == null){\n        return null;\n    }\n    if(array.length == 0){\n        return EMPTY_CHAR_ARRAY;\n    }\n    final char[] result = new char[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].charValue();\n    }\n    return result;\n}"]}
{"_id": "636766fa1a6d9265ec01779c", "generate_results": ["private String parseToken(final char[] terminators){\n    StringBuilder sb = new StringBuilder();\n    while (hasChar()){\n        char ch = chars[pos++];\n        boolean isTerminator = false;\n        for (char terminator : terminators) {\n            if (ch == terminator) {\n                isTerminator = true;\n                break;\n            }\n        }\n        if (isTerminator) {\n            break;\n        }\n        sb.append(ch);\n    }\n    return sb.toString();\n}"]}
{"_id": "636767691a6d9265ec0181a7", "generate_results": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n    if(str==null||str.length()==0){\n        return str;\n    }\n    int i=0;\n    while(i<str.length()&&str.charAt(i)==leadingCharacter){\n        i++;\n    }\n    return str.substring(i);\n}"]}
{"_id": "636767041a6d9265ec01790f", "generate_results": ["public static Integer[] toObject(final int[] array){\n    if (array == null) {\n        return null;\n    }\n    final Integer[] result = new Integer[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i]; // Convert each primitive int to its corresponding Integer object\n    }\n    return result;\n}"]}
{"_id": "636766fa1a6d9265ec0177a4", "generate_results": ["public static Double[] toObject(final double[] array){\n    if (array == null) {\n        return null;\n    }\n    final Double[] result = new Double[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i]; // Autoboxing\n    }\n    return result;\n}"]}
{"_id": "636767461a6d9265ec017d0e", "generate_results": ["private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSum = new ArrayList<>(bounds.size());\n    long totalSum = 0L;\n    for(int i=bounds.size()-1;i>=0;i--){\n        totalSum += bounds.get(i);\n        suffixSum.add(0,totalSum);\n    }\n    return new Pair<>(suffixSum,totalSum);\n}"]}
{"_id": "636767491a6d9265ec017d90", "generate_results": ["public static final <V>void reverse(V[] arr,int from,int to){\n    //Validate the input\n    if(arr==null||from<0||to>=arr.length||from>to){\n        throw new IllegalArgumentException(\"Invalid input\");\n    }\n    //Perform boundary checks\n    while(from<to){\n        swap(arr,from++,to--);\n    }\n}"]}
{"_id": "6367674a1a6d9265ec017da9", "generate_results": ["private void moveAllListNodes(DoublyLinkedList<E> list){\n    ListNodeImpl<E> currentNode = list.getFirstNode();\n    while(currentNode != null){\n        ListNodeImpl<E> nextNode = currentNode.getNext();\n        unlink(currentNode); // Unlink current node from its original list\n        addListNode(currentNode); // Add current node to the new list\n        currentNode = nextNode; // Move to the next node in the original list\n    }\n}"]}
{"_id": "636767151a6d9265ec017b6b", "generate_results": ["private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n    if(str==null||prefix==null){\n        return str==prefix;\n    }\n    if(ignoreCase){\n        return str.regionMatches(true,0,prefix,0,prefix.length());\n    }else{\n        return str.startsWith(prefix);\n    }\n}"]}
{"_id": "636766fe1a6d9265ec01781c", "generate_results": ["public static Character toCharacterObject(final char ch){\n    return new Character(ch);\n}"]}
{"_id": "636766fb1a6d9265ec0177c1", "generate_results": ["public static boolean isAsciiAlphaUpper(final char ch){\n    return (ch >= 'A' && ch <= 'Z');\n}"]}
{"_id": "636767781a6d9265ec018250", "generate_results": ["public int decide(LoggingEvent event){\n    String message = event.getMessage().toString();\n    boolean isMatched = message.contains(stringToMatch);\n    return (isMatched == acceptOnMatch) ? Filter.ACCEPT : Filter.DENY;\n}"]}
{"_id": "636766861a6d9265ec017553", "generate_results": ["public final boolean isTemplateVariablePresent(String name){\n    // Validate the input\n    if (name == null || name.isEmpty()) {\n        throw new IllegalArgumentException(\"Name cannot be null or empty\");\n    }\n\n    // Perform boundary checks\n    if (templateVariables == null) {\n        return false;\n    }\n\n    // Capture and handle runtime errors\n    try {\n        return templateVariables.contains(name);\n    } catch (NullPointerException e) {\n        // Handle the NullPointerException\n        System.err.println(\"Error: \" + e.getMessage());\n        return false;\n    }\n}"]}
{"_id": "636767071a6d9265ec017962", "generate_results": ["public void putAllWriteable(BeanMap map){\n    for (String key : map.keySet()){\n        Method writeMethod = map.getWriteMethod(key);\n        if (writeMethod != null){\n            this.writeMethods.put(key, writeMethod);\n        }\n    }\n}"]}
{"_id": "6367670a1a6d9265ec0179d9", "generate_results": ["public static int length(final String str){\n    return str == null ? 0 : str.length();\n}"]}
{"_id": "636767ab1a6d9265ec018676", "generate_results": ["private static boolean isHex(final char c){\n    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n}"]}
{"_id": "636766f81a6d9265ec017748", "generate_results": ["public static String base64Decode(final String s){\n    try {\n        byte[] decodedBytes = Base64.getDecoder().decode(s);\n        return new String(decodedBytes, StandardCharsets.UTF_8);\n    } catch (IllegalArgumentException e) {\n        // Handle the case where the input is not a valid Base64 encoded string\n        System.err.println(\"Invalid Base64 encoded string: \" + s);\n        return null; // or throw a custom exception\n    }\n}"]}
{"_id": "636766f11a6d9265ec017663", "generate_results": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n    // Validate the input\n    if(array1 == null && array2 == null) {\n        return true; // Both arrays are null, so they have the same length\n    }\n    if(array1 != null && array2 != null) {\n        return array1.length == array2.length; // Compare lengths if both arrays are non-null\n    }\n    return false; // One array is null and the other is not, so their lengths are different\n}"]}
{"_id": "6367667d1a6d9265ec0173ff", "generate_results": ["public static Meteor lookup(HttpServletRequest r){\n    // Validate the input\n    if (r == null) {\n        throw new IllegalArgumentException(\"HttpServletRequest cannot be null\");\n    }\n\n    // Perform boundary checks\n    // No specific boundary checks needed for this method\n\n    // Capture and handle runtime errors\n    try {\n        // Create an AtmosphereResource from the HttpServletRequest\n        AtmosphereResource atmosphereResource = r.getAttribute(ATMOSPHERE_RESOURCE);\n\n        // Check if the resource is destroyed\n        AtomicBoolean isDestroyed = (AtomicBoolean) atmosphereResource.getAttribute(METEOR);\n\n        // If the resource is not destroyed, create a new Meteor object\n        if (!isDestroyed.get()) {\n            return new Meteor(atmosphereResource, null, null);\n        } else {\n            // Log the destruction status\n            logger.info(\"AtmosphereResource is already destroyed\");\n            return null;\n        }\n    } catch (Exception e) {\n        // Handle any unexpected exceptions\n        logger.error(\"Error occurred while looking up Meteor\", e);\n        return null;\n    }\n}"]}
{"_id": "636767691a6d9265ec0181a6", "generate_results": ["public static String[] split(String toSplit,String delimiter){\n    int index = toSplit.indexOf(delimiter);\n    if (index == -1) {\n        return new String[]{toSplit,\"\"};\n    }\n    return new String[]{toSplit.substring(0,index),toSplit.substring(index + delimiter.length())};\n}"]}
{"_id": "636767601a6d9265ec0180e2", "generate_results": ["private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList = new ArrayList<>();\n    Set<E> edges = graph.edgeSet();\n    for (E edge : edges) {\n        List<Pair<Integer,Integer>> separators = findSeparators(graph,edge);\n        Pair<List<Pair<Integer,Integer>>,E> pair = new Pair<>(separators,edge);\n        globalSeparatorList.add(pair);\n    }\n    return globalSeparatorList;\n}"]}
{"_id": "636766f31a6d9265ec01768f", "generate_results": ["public static char[] clone(final char[] array){\n    if (array == null) {\n        return null;\n    }\n    return array.clone();\n}"]}
{"_id": "636766831a6d9265ec0174eb", "generate_results": ["private void addReverse(final File[] files){\n    for(int i = files.length - 1; i >= 0; --i){\n        stack.push(files[i]);\n    }\n}"]}
{"_id": "636767841a6d9265ec0183ff", "generate_results": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n    // Validate the input\n    if (table == null || pane == null) {\n        throw new IllegalArgumentException(\"Input components cannot be null\");\n    }\n    if (row < 0 || row >= table.getRowCount()) {\n        throw new IndexOutOfBoundsException(\"Invalid row index: \" + row);\n    }\n\n    // Select the row in the table\n    table.setRowSelectionInterval(row, row);\n\n    // Scroll the pane to the selected row\n    Rectangle rect = table.getCellRect(row, 0, true);\n    SwingUtilities.invokeLater(() -> {\n        pane.getViewport().scrollRectToVisible(rect);\n    });\n}"]}
{"_id": "636766a81a6d9265ec017596", "generate_results": ["public ByteVector putInt(final int intValue){\n    // Validate the input\n    if (intValue < 0 || intValue > 0xFFFFFFFF) {\n        throw new IllegalArgumentException(\"intValue must be between 0 and 0xFFFFFFFF\");\n    }\n\n    // Calculate the required capacity for the ByteVector\n    final int requiredCapacity = data.length + 4;\n\n    // Enlarge the ByteVector if necessary\n    if (requiredCapacity > data.length) {\n        enlarge(requiredCapacity);\n    }\n\n    // Put the four bytes of the integer into the ByteVector in big-endian order\n    data[data.length] = (byte) ((intValue >> 24) & 0xFF);\n    data[data.length + 1] = (byte) ((intValue >> 16) & 0xFF);\n    data[data.length + 2] = (byte) ((intValue >> 8) & 0xFF);\n    data[data.length + 3] = (byte) (intValue & 0xFF);\n\n    // Update the length of the ByteVector\n    length += 4;\n\n    // Return the ByteVector object\n    return this;\n}"]}
{"_id": "636766fd1a6d9265ec017814", "generate_results": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n    for(int i=0;i<count;i++){\n        if(a[i]!=b[i]){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636767861a6d9265ec018440", "generate_results": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n    final String[] names = buf.toString().split(\"\\\\.\");\n    if (names.length <= count) {\n        return; // No need to abbreviate if there are fewer or equal elements than count\n    }\n    for (int i = count; i < names.length; i++) {\n        buf.append(names[i]);\n        if (i != names.length - 1) {\n            buf.append(\".\");\n        }\n    }\n}"]}
{"_id": "6367667d1a6d9265ec01741d", "generate_results": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n    Type[] bounds = typeVariable.getBounds();\n    if(bounds.length == 0){\n        return Unknown.class;\n    }\n    Type bound = bounds[0];\n    if(bound instanceof Class){\n        return bound;\n    }else if(bound instanceof ParameterizedType){\n        return resolveClass((ParameterizedType)bound,typeVariable.getDeclaringClass());\n    }else if(bound instanceof WildcardType){\n        WildcardType wildcardType = (WildcardType)bound;\n        Type[] lowerBounds = wildcardType.getLowerBounds();\n        if(lowerBounds.length > 0){\n            return resolveBound((TypeVariable<?>)lowerBounds[0]);\n        }\n        Type[] upperBounds = wildcardType.getUpperBounds();\n        if(upperBounds.length > 0){\n            return resolveBound((TypeVariable<?>)upperBounds[0]);\n        }\n    }else if(bound instanceof GenericArrayType){\n        GenericArrayType genericArrayType = (GenericArrayType)bound;\n        Type componentType = genericArrayType.getGenericComponentType();\n        if(componentType instanceof Class){\n            return Array.newInstance((Class<?>)componentType,0).getClass();\n        }else{\n            return Unknown.class;\n        }\n    }else if(bound instanceof TypeVariable){\n        return resolveBound((TypeVariable<?>)bound);\n    }\n    return Unknown.class;\n}"]}
{"_id": "6367675f1a6d9265ec0180cf", "generate_results": ["private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    for(V u:vertices){\n        for(V v:vertices){\n            if(u!=v&&!graph.containsEdge(u,v)){\n                return false;\n            }\n        }\n    }\n    return true;\n}"]}
{"_id": "636767431a6d9265ec017c88", "generate_results": ["private List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> maxLowerBounds = new ArrayList<>();\n    for(K key : keys){\n        int maxLowerBound = Integer.MAX_VALUE;\n        for(Function<K,Integer> lowerBound : lowerBounds){\n            int currentLowerBound = lowerBound.apply(key);\n            if(currentLowerBound < maxLowerBound){\n                maxLowerBound = currentLowerBound;\n            }\n        }\n        maxLowerBounds.add(maxLowerBound);\n    }\n    return maxLowerBounds;\n}"]}
{"_id": "636766a91a6d9265ec0175c4", "generate_results": ["private void pop(final String descriptor){\n    char c = descriptor.charAt(0);\n    switch(c){\n        case 'B':\n            pop(BYTE);\n            break;\n        case 'C':\n            pop(CHAR);\n            break;\n        case 'D':\n            pop(DOUBLE);\n            break;\n        case 'F':\n            pop(FLOAT);\n            break;\n        case 'I':\n            pop(INTEGER);\n            break;\n        case 'J':\n            pop(LONG);\n            break;\n        case 'L':\n            pop(OBJECT);\n            break;\n        case '[':\n            pop(ARRAY_OF(ELEMENT_OF(descriptor)));\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}"]}
{"_id": "636766fb1a6d9265ec0177c3", "generate_results": ["public static boolean isAscii(final char ch){\n    return ch >= 0 && ch <= 127;\n}"]}
{"_id": "636767581a6d9265ec017fb4", "generate_results": ["private List<Integer> computeUpperBounds(List<K> keys){\n    List<Integer> result = new ArrayList<>();\n    for(K key : keys){\n        int minUpperBound = Integer.MAX_VALUE;\n        for(Function<K,Integer> upperBound : upperBounds){\n            int currentUpperBound = upperBound.apply(key);\n            if(currentUpperBound < minUpperBound){\n                minUpperBound = currentUpperBound;\n            }\n        }\n        result.add(minUpperBound);\n    }\n    return result;\n}"]}
{"_id": "636766801a6d9265ec017487", "generate_results": ["public static String encodeTemplateNames(String s){\n    return s.replace(\"{\",\"<\").replace(\"}\",\">\");\n}"]}
{"_id": "636767531a6d9265ec017ef1", "generate_results": ["public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getX(),p2.getX()) == 0 && TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getY(),p2.getY()) == 0;\n}"]}
{"_id": "6367667c1a6d9265ec0173fb", "generate_results": ["@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    // Validate the input\n    if (e == null) {\n        throw new IllegalArgumentException(\"Listener cannot be null\");\n    }\n    \n    // Add the listener to the list\n    listeners.add(e);\n    \n    // Return the current AtmosphereResource object\n    return this;\n}"]}
{"_id": "636767691a6d9265ec0181ac", "generate_results": ["public static String applyRelativePath(String path,String relativePath){\n    if(path==null){\n        throw new IllegalArgumentException(\"Path must not be null\");\n    }\n    if(relativePath==null){\n        throw new IllegalArgumentException(\"Relative path must not be null\");\n    }\n    int separatorIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n    if(separatorIndex!=-1){\n        String newPath=path.substring(0,separatorIndex)+FOLDER_SEPARATOR+relativePath;\n        return cleanPath(newPath);\n    }else{\n        return relativePath;\n    }\n}"]}
{"_id": "636767021a6d9265ec0178bc", "generate_results": ["public static int indexOf(String str,String searchStr){\n    return StringUtils.indexOf(str,searchStr);\n}"]}
{"_id": "636766fc1a6d9265ec0177ef", "generate_results": ["static String[] toNoNullStringArray(Object[] array){\n    if(array == null || array.length == 0){\n        throw new IllegalArgumentException(\"Input array cannot be null or empty\");\n    }\n    ArrayList<String> result = new ArrayList<>();\n    for (Object obj : array) {\n        if(obj != null){\n            result.add(obj.toString());\n        }\n    }\n    return result.toArray(new String[0]);\n}"]}
{"_id": "636767061a6d9265ec01794a", "generate_results": ["public static int indexOfExtension(String filename){\n    if(filename == null){\n        return -1;\n    }\n    int extensionPos = filename.lastIndexOf(EXTENSION_SEPARATOR);\n    int lastSeparator = indexOfLastSeparator(filename);\n    return (lastSeparator > extensionPos) ? -1 : extensionPos;\n}"]}
{"_id": "636767dd1a6d9265ec0186de", "generate_results": ["public boolean isExpired(long timestamp,long expiredThreshold){\n    return (timestamp - lastUpdateTimestamp) > expiredThreshold;\n}"]}
{"_id": "6367675d1a6d9265ec018082", "generate_results": ["Edge edgeToNext(){\n    return this.edgeToNext;\n}"]}
{"_id": "6367676b1a6d9265ec0181e9", "generate_results": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n    if (index < 0 || index > str.length() - substring.length()){\n        return false;\n    }\n    for (int i = 0; i < substring.length(); i++){\n        if (str.charAt(index + i) != substring.charAt(i)){\n            return false;\n        }\n    }\n    return true;\n}"]}
{"_id": "636767781a6d9265ec01823e", "generate_results": ["protected void append(LoggingEvent event){\n    try{\n        String formattedMessage = layout.format(event);\n        if(layout.ignoresThrowable()){\n            //If layout ignores throwable, it will continue to send the StrRep of the event\n            PrintWriter writer = new PrintWriter(connection.getOutputStream());\n            writer.println(formattedMessage);\n            writer.flush();\n        }\n    }catch(IOException e){\n        LogLog.error(\"Error occurred while appending log event\",e);\n    }\n}"]}
{"_id": "6367670b1a6d9265ec017a05", "generate_results": ["public static String toString(final char ch){\n    return new String(new char[]{ch});\n}"]}
{"_id": "636767a31a6d9265ec01854f", "generate_results": ["private void checkIfPackedField() throws IOException {\n    // Check if the current field is packed\n    if (isCurrentFieldPacked()) {\n        int tag = readTag(); // Read the next tag\n        if (tag == 0) { // If the tag is zero, it indicates the end of the group\n            return; // Exit the method\n        }\n        if ((tag & TAG_TYPE_MASK) != WIRETYPE_LENGTH_DELIMITED) { // Check if the wire type is length-delimited\n            throw new InvalidProtocolBufferException(\"Invalid wire type for packed field: \" + (tag & TAG_TYPE_MASK));\n        }\n        int length = readRawVarint32(); // Read the length of the packed field\n        int oldLimit = pushLimit(length); // Push the limit for the packed field\n        try {\n            while (true) {\n                int fieldNumber = readFieldNumber(schema); // Read the field number\n                mergeObjectEncodedAsGroup(value, schema.getField(fieldNumber)); // Merge the object encoded as a group\n            }\n        } finally {\n            popLimit(oldLimit); // Pop the limit after processing the packed field\n        }\n    }\n}"]}
{"_id": "636767a81a6d9265ec0185fc", "generate_results": ["public int readTag() throws IOException {\n    // Validate input\n    if (buffer == null) {\n        throw new IllegalArgumentException(\"ByteBuffer cannot be null\");\n    }\n\n    // Boundary check for current position in buffer\n    if (currentOffset() >= currentLimit()) {\n        return 0; // End of file reached\n    }\n\n    // Read the next byte from the buffer\n    int b = buffer.get(currentOffset());\n    currentOffset++;\n\n    // Check if the tag is valid\n    if ((b >>> TAG_TYPE_BITS) == 0) {\n        throw new IOException(\"Invalid tag encountered\");\n    }\n\n    // Return the tag\n    return makeTag(b & TAG_TYPE_MASK, getTagFieldNumber(b));\n}"]}
{"_id": "636766a81a6d9265ec017595", "generate_results": ["final ByteVector put11(final int byteValue1,final int byteValue2){\n    // Validate the input\n    if (byteValue1 < 0 || byteValue1 > 255 || byteValue2 < 0 || byteValue2 > 255) {\n        throw new IllegalArgumentException(\"Invalid byte values\");\n    }\n\n    // Ensure there is enough space in the vector\n    enlarge(2);\n\n    // Put the bytes into the vector\n    data[length++] = (byte) byteValue1;\n    data[length++] = (byte) byteValue2;\n\n    return this;\n}"]}
{"_id": "636766ae1a6d9265ec0175d8", "generate_results": ["private String buildContentRange(){\n    int offset = 0; // Initialize offset\n    int limit = 0; // Initialize limit\n    int count = 0; // Initialize count\n\n    // Validate input\n    if (offset < 0 || limit < 0) {\n        throw new IllegalArgumentException(\"Offset and limit must be non-negative\");\n    }\n\n    // Perform boundary checks\n    if (limit == 0) {\n        limit = count - 1; // Set upper bound to count-1 if limit is zero\n    } else if (offset + limit > count) {\n        throw new IndexOutOfBoundsException(\"Offset plus limit exceeds count\");\n    }\n\n    // Build content range string\n    return \"bytes \" + offset + \"-\" + limit + \"/\" + count;\n}"]}
{"_id": "636767e11a6d9265ec018790", "generate_results": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    try (FileInputStream fis = new FileInputStream(file)) {\n        // Read the file content\n        byte[] buffer = new byte[(int) file.length()];\n        fis.read(buffer);\n\n        // Parse the buffer into ThreadSnapshot objects\n        for (byte[] snapshotBytes : splitBufferIntoSnapshots(buffer)) {\n            ThreadSnapshot snapshot = parseSnapshot(snapshotBytes);\n            if (isWithinTimeRange(timeRanges, snapshot.getTimestamp())) {\n                threadSnapshots.add(snapshot);\n            }\n        }\n    } catch (IOException e) {\n        log.error(\"Error reading file: {}\", file.getAbsolutePath(), e);\n        throw e;\n    }\n\n    return threadSnapshots;\n}"]}

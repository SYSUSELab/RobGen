{"generate_results": [{"generate_code": "public boolean shouldPrintMessage(int timestamp,String message){\n\tif(messages.containsKey(message)){\n\t\tif(timestamp-messages.get(message)>10){\n\t\t\tmessages.put(message,timestamp);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tmessages.put(message,timestamp);\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns true if the message should be printed in the given timestamp, otherwise returns false. If this method returns false, the message will not be printed. The timestamp is in seconds granularity. \n */\n", "method_name": "shouldPrintMessage", "codes": ["public boolean shouldPrintMessage(int timestamp,String message){\n\tif(messages.containsKey(message)){\n\t\tif(timestamp-messages.get(message)>10){\n\t\t\tmessages.put(message,timestamp);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tmessages.put(message,timestamp);\n\treturn true;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c73", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//LoggerRateLimiter_shouldPrintMessage.class"}
{"generate_results": [{"generate_code": "public boolean remove(int val){\n\tif(map.containsKey(val)){\n\t\tvalues.remove(map.get(val));\n\t\tmap.remove(val);\n\t\treturn true;\n\t}\n\treturn false;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Removes a value from the set. Returns true if the set contained the specified element. \n */\n", "method_name": "remove", "codes": ["public boolean remove(int val){\n\tif(map.containsKey(val)){\n\t\tvalues.remove(map.get(val));\n\t\tmap.remove(val);\n\t\treturn true;\n\t}\n\treturn false;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c74", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//InsertDeleteGetRandomO1_remove.class"}
{"generate_results": [{"generate_code": "public boolean insert(int val){\n\tif(map.containsKey(val)){\n\t\treturn false;\n\t}\n\tmap.put(val,val);\n\tvalues.add(val);\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n */\n", "method_name": "insert", "codes": ["public boolean insert(int val){\n\tif(map.containsKey(val)){\n\t\treturn false;\n\t}\n\tmap.put(val,val);\n\tvalues.add(val);\n\treturn true;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c78", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//InsertDeleteGetRandomO1_insert.class"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    if(array1==null){\n        return array2==null;\n    }\n\treturn ArrayUtils.getLength(array1)==ArrayUtils.getLength(array2);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    if(array1==null){\n        return array2==null;\n    }\n\treturn ArrayUtils.getLength(array1)==ArrayUtils.getLength(array2);\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec017a00", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isSameLength.class"}
{"generate_results": [{"generate_code": "public static boolean[] toPrimitive(final Boolean[] array){\n\tif (array == null) {\n\t\treturn EMPTY_BOOLEAN_ARRAY;\n\t}\n\tfinal boolean[] result = new boolean[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Boolean</code> array, may be <code>null</code>\n * @return a <code>boolean</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static boolean[] toPrimitive(final Boolean[] array){\n\tif (array == null) {\n\t\treturn EMPTY_BOOLEAN_ARRAY;\n\t}\n\tfinal boolean[] result = new boolean[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec017989", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static String toString(Object obj){\n\tif(obj==null){\n\t\treturn \"\";\n\t}\n\treturn obj.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string (\"\") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = \"\" ObjectUtils.toString(\"\")           = \"\" ObjectUtils.toString(\"bat\")        = \"bat\" ObjectUtils.toString(Boolean.TRUE) = \"true\" </pre>\n * @see StringUtils#defaultString(String)\n * @see String#valueOf(Object)\n * @param obj  the Object to <code>toString</code>, may be null\n * @return the passed in Object's toString, or nullStr if <code>null</code> input\n * @since 2.0\n */\n", "method_name": "toString", "codes": ["public static String toString(Object obj){\n\tif(obj==null){\n\t\treturn \"\";\n\t}\n\treturn obj.toString();\n}"], "code_level": "self_contained", "_id": "636766f81a6d9265ec01775c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ObjectUtils_toString.class"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(Boolean bool){\n    if(bool==null) return false;\nreturn toBoolean(bool,false);\n}", "errormessage": "compile error", "error_detail_message": "BooleanUtils.java:167: error: no suitable method found for toBoolean(Boolean,boolean)\nreturn toBoolean(bool,false);\n       ^\n    method BooleanUtils.toBoolean(Boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method BooleanUtils.toBoolean(int) is not applicable\n      (actual and formal argument lists differ in length)\n    method BooleanUtils.toBoolean(int,int,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method BooleanUtils.toBoolean(Integer,Integer,Integer) is not applicable\n      (actual and formal argument lists differ in length)\n    method BooleanUtils.toBoolean(String) is not applicable\n      (actual and formal argument lists differ in length)\n    method BooleanUtils.toBoolean(String,String,String) is not applicable\n      (actual and formal argument lists differ in length)\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2573: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            result[i] = new Character(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2641: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n            result[i] = new Long(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2709: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            result[i] = new Integer(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2777: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n            result[i] = new Short(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2845: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n            result[i] = new Byte(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2913: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n            result[i] = new Double(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:2981: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n            result[i] = new Float(array[i]);\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:3938: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return (char[]) ArrayUtils.add(array, index, new Character(element), Character.TYPE);\n                                                     ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:3969: warning: [removal] Byte(byte) in Byte has been deprecated and marked for removal\n        return (byte[]) ArrayUtils.add(array, index, new Byte(element), Byte.TYPE);\n                                                     ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4000: warning: [removal] Short(short) in Short has been deprecated and marked for removal\n        return (short[]) ArrayUtils.add(array, index, new Short(element), Short.TYPE);\n                                                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4031: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n        return (int[]) ArrayUtils.add(array, index, new Integer(element), Integer.TYPE);\n                                                    ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4062: warning: [removal] Long(long) in Long has been deprecated and marked for removal\n        return (long[]) ArrayUtils.add(array, index, new Long(element), Long.TYPE);\n                                                     ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4093: warning: [removal] Float(float) in Float has been deprecated and marked for removal\n        return (float[]) ArrayUtils.add(array, index, new Float(element), Float.TYPE);\n                                                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java:4124: warning: [removal] Double(double) in Double has been deprecated and marked for removal\n        return (double[]) ArrayUtils.add(array, index, new Double(element), Double.TYPE);\n                                                       ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ArrayUtils.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n14 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>\n * @param bool  the boolean to convert\n * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>\n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(Boolean bool){\n    if(bool==null) return false;\nreturn toBoolean(bool,false);\n}"], "code_level": "self_contained", "_id": "636766f91a6d9265ec01777f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/BooleanUtils_toBoolean.java"}
{"generate_results": [{"generate_code": "public static Byte[] nullToEmpty(final Byte[] array){\n    if(array==null){\n        return EMPTY_BYTE_OBJECT_ARRAY;\n    }\n\treturn ArrayUtils.nullToEmpty(array);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n\tat net.hasor.utils.ArrayUtils.nullToEmpty(ArrayUtils.java:603)\n", "is_pass": false}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Byte[] nullToEmpty(final Byte[] array){\n    if(array==null){\n        return EMPTY_BYTE_OBJECT_ARRAY;\n    }\n\treturn ArrayUtils.nullToEmpty(array);\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec0179ff", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static Boolean[] nullToEmpty(final Boolean[] array){\n    if(array==null){\n        return EMPTY_BOOLEAN_OBJECT_ARRAY;\n    }\n\treturn array==null?EMPTY_BOOLEAN_OBJECT_ARRAY:array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n    if(array==null){\n        return EMPTY_BOOLEAN_OBJECT_ARRAY;\n    }\n\treturn array==null?EMPTY_BOOLEAN_OBJECT_ARRAY:array;\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179e8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static byte[] toPrimitive(final Byte[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal byte[] result=new byte[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Byte</code> array, may be <code>null</code>\n * @return a <code>byte</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static byte[] toPrimitive(final Byte[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal byte[] result=new byte[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767031a6d9265ec0178e6", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static String reverse(final String str){\n\tif(str == null){\n\t\treturn null;\n\t}\n\treturn new StringBuilder(str).reverse().toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse(\"\")    = \"\" StringUtils.reverse(\"bat\") = \"tab\" </pre>\n * @param str  the String to reverse, may be null\n * @return the reversed String, <code>null</code> if null String input\n */\n", "method_name": "reverse", "codes": ["public static String reverse(final String str){\n\tif(str == null){\n\t\treturn null;\n\t}\n\treturn new StringBuilder(str).reverse().toString();\n}"], "code_level": "slib_runnable", "_id": "636767001a6d9265ec017873", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_reverse.class"}
{"generate_results": [{"generate_code": "public static boolean isDigits(String str){\n\tif(str==null){\n\t\treturn false;\n\t}\n\tint sz=str.length();\n\tfor(int i=0;i<sz;i++){\n\t\tif(Character.isDigit(str.charAt(i))==false){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if str contains only unicode numeric\n */\n", "method_name": "isDigits", "codes": ["public static boolean isDigits(String str){\n\tif(str==null){\n\t\treturn false;\n\t}\n\tint sz=str.length();\n\tfor(int i=0;i<sz;i++){\n\t\tif(Character.isDigit(str.charAt(i))==false){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "slib_runnable", "_id": "636766ff1a6d9265ec01784b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/NumberUtils_isDigits.class"}
{"generate_results": [{"generate_code": "private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n if (str == null || suffix == null) {\n  return false;\n }\n if (suffix.length() > str.length()) {\n  return false;\n }\n if (ignoreCase) {\n  return str.regionMatches(true,str.length() - suffix.length(),suffix,0,suffix.length());\n }\n return str.endsWith(suffix);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "endsWith", "codes": ["private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n if (str == null || suffix == null) {\n  return false;\n }\n if (suffix.length() > str.length()) {\n  return false;\n }\n if (ignoreCase) {\n  return str.regionMatches(true,str.length() - suffix.length(),suffix,0,suffix.length());\n }\n return str.endsWith(suffix);\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a35", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_endsWith.class"}
{"generate_results": [{"generate_code": "public static Character[] nullToEmpty(final Character[] array){\n    if(array==null){\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n\treturn array==null||array.length==0?EMPTY_CHARACTER_OBJECT_ARRAY:array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Character[] nullToEmpty(final Character[] array){\n    if(array==null){\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n\treturn array==null||array.length==0?EMPTY_CHARACTER_OBJECT_ARRAY:array;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017651", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static Double[] nullToEmpty(final Double[] array){\n    if(array==null){\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\n    }\n\treturn array==null||array.length==0?EMPTY_DOUBLE_OBJECT_ARRAY:array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Double[] nullToEmpty(final Double[] array){\n    if(array==null){\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\n    }\n\treturn array==null||array.length==0?EMPTY_DOUBLE_OBJECT_ARRAY:array;\n}"], "code_level": "self_contained", "_id": "636767021a6d9265ec0178bb", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static boolean isEmpty(final double[] array){\n    if(array==null){\n        return true;\n    }\n\treturn ArrayUtils.isEmpty(array);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n\tat net.hasor.utils.ArrayUtils.isEmpty(ArrayUtils.java:3125)\n", "is_pass": false}], "docstring": "/** \n * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n * @param array  the array to test\n * @return <code>true</code> if the array is empty or <code>null</code>\n * @since 2.1\n */\n", "method_name": "isEmpty", "codes": ["public static boolean isEmpty(final double[] array){\n    if(array==null){\n        return true;\n    }\n\treturn ArrayUtils.isEmpty(array);\n}"], "code_level": "self_contained", "_id": "636766f01a6d9265ec01762e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isEmpty.class"}
{"generate_results": [{"generate_code": "public static boolean isNotTrue(Boolean bool){\n    if(bool==null) return true;\nreturn!isTrue(bool);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>\n * @param bool  the boolean to check, null returns <code>true</code>\n * @return <code>true</code> if the input is null or false\n * @since 2.3\n */\n", "method_name": "isNotTrue", "codes": ["public static boolean isNotTrue(Boolean bool){\n    if(bool==null) return true;\nreturn!isTrue(bool);\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec017677", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/BooleanUtils_isNotTrue.class"}
{"generate_results": [{"generate_code": "public static double[] toPrimitive(final Double[] array){\n\tif(array==null){\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\tfinal int length=array.length;\n\tif(length==0){\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\tfinal double[] result=new double[length];\n\tfor(int i=0;i<length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Double</code> array, may be <code>null</code>\n * @return a <code>double</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static double[] toPrimitive(final Double[] array){\n\tif(array==null){\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\tfinal int length=array.length;\n\tif(length==0){\n\t\treturn EMPTY_DOUBLE_ARRAY;\n\t}\n\tfinal double[] result=new double[length];\n\tfor(int i=0;i<length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017842", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static char toChar(final Character ch,final char defaultValue){\nif(ch==null){\nreturn defaultValue;\n}\nreturn ch.charValue();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>\n * @param ch  the character to convert\n * @param defaultValue  the value to use if the  Character is null\n * @return the char value of the Character or the default if null\n */\n", "method_name": "toChar", "codes": ["public static char toChar(final Character ch,final char defaultValue){\nif(ch==null){\nreturn defaultValue;\n}\nreturn ch.charValue();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179cf", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toChar.class"}
{"generate_results": [{"generate_code": "private static boolean isAllZeros(String s){\n\tif(s==null){\n\t\treturn false;\n\t}\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s.charAt(i)!='0'){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Utility method for  {@link #createNumber(String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>\n * @param s the String to check\n * @return if it is all zeros or <code>null</code>\n */\n", "method_name": "isAllZeros", "codes": ["private static boolean isAllZeros(String s){\n\tif(s==null){\n\t\treturn false;\n\t}\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s.charAt(i)!='0'){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec0179a2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/NumberUtils_isAllZeros.class"}
{"generate_results": [{"generate_code": "public static String toString(Object object){\n    if(object == null)\n        return null;\n    else\n    t.println(Arrays.toString(array));\n\treturn object == null? null : object.toString();\n}", "errormessage": "compile error", "error_detail_message": "StringUtils.java:6137: error: cannot find symbol\n    t.println(Arrays.toString(array));\n    ^\n  symbol:   variable t\n  location: class StringUtils\nStringUtils.java:6137: error: cannot find symbol\n    t.println(Arrays.toString(array));\n                              ^\n  symbol:   variable array\n  location: class StringUtils\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CharUtils.java:71: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            CharUtils.CHAR_ARRAY[i] = new Character((char) i);\n                                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CharUtils.java:105: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return new Character(ch);\n               ^\n2 errors\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Object to String ,when null object then null else return toString(); \n */\n", "method_name": "toString", "codes": ["public static String toString(Object object){\n    if(object == null)\n        return null;\n    else\n    t.println(Arrays.toString(array));\n\treturn object == null? null : object.toString();\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec01767d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/StringUtils_toString.java"}
{"generate_results": [{"generate_code": "public static int[] toPrimitive(final Integer[] array){\n\tif (array == null) {\n\t\treturn EMPTY_INT_ARRAY;\n\t}\n\tfinal int[] result = new int[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Integer</code> array, may be <code>null</code>\n * @return an <code>int</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static int[] toPrimitive(final Integer[] array){\n\tif (array == null) {\n\t\treturn EMPTY_INT_ARRAY;\n\t}\n\tfinal int[] result = new int[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a2a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static boolean isAsciiControl(final char ch){\n    if(ch<0x20){\n        return true;\n    }\nreturn (ch<0x20);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 32 or equals 127\n */\n", "method_name": "isAsciiControl", "codes": ["public static boolean isAsciiControl(final char ch){\n    if(ch<0x20){\n        return true;\n    }\nreturn (ch<0x20);\n}"], "code_level": "self_contained", "_id": "636766fa1a6d9265ec01779d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAsciiControl.class"}
{"generate_results": [{"generate_code": "public static Boolean[] toObject(final boolean[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\tfinal Boolean[] result = new Boolean[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>boolean</code> array\n * @return a <code>Boolean</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Boolean[] toObject(final boolean[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\tfinal Boolean[] result = new Boolean[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec017796", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static Short[] toObject(final short[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\tfinal Short[] result = new Short[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>short</code> array\n * @return a <code>Short</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Short[] toObject(final short[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\tfinal Short[] result = new Short[array.length];\n\tfor (int i = 0; i < array.length; i++) {\n\t\tresult[i] = array[i];\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179f1", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static char[] toPrimitive(final Character[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal int length=array.length;\n\tif(length==0){\n\t\treturn EMPTY_CHAR_ARRAY;\n\t}\n\tfinal char[] result=new char[length];\n\tfor(int i=0;i<length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Character</code> array, may be <code>null</code>\n * @return a <code>char</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static char[] toPrimitive(final Character[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal int length=array.length;\n\tif(length==0){\n\t\treturn EMPTY_CHAR_ARRAY;\n\t}\n\tfinal char[] result=new char[length];\n\tfor(int i=0;i<length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636766fe1a6d9265ec017838", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static Integer[] toObject(final int[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal Integer[] result=new Integer[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  an <code>int</code> array\n * @return an <code>Integer</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Integer[] toObject(final int[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal Integer[] result=new Integer[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tresult[i]=array[i];\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec01790f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static Double[] toObject(final double[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal Double[] result=new Double[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tresult[i]=new Double(array[i]);\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>double</code> array\n * @return a <code>Double</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Double[] toObject(final double[] array){\n\tif(array==null){\n\t\treturn null;\n\t}\n\tfinal Double[] result=new Double[array.length];\n\tfor(int i=0;i<array.length;i++){\n\t\tresult[i]=new Double(array[i]);\n\t}\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a4", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n if(str == null || prefix == null){\n  return false;\n }\n if(prefix.length() > str.length()){\n  return false;\n }\n if(ignoreCase){\n  return str.regionMatches(true,0,prefix,0,prefix.length());\n }\n return str.startsWith(prefix);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "startsWith", "codes": ["private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n if(str == null || prefix == null){\n  return false;\n }\n if(prefix.length() > str.length()){\n  return false;\n }\n if(ignoreCase){\n  return str.regionMatches(true,0,prefix,0,prefix.length());\n }\n return str.startsWith(prefix);\n}"], "code_level": "self_contained", "_id": "636767151a6d9265ec017b6b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_startsWith.class"}
{"generate_results": [{"generate_code": "public static Character toCharacterObject(final char ch){\n    if(ch == 0) return null;\n\treturn new Character(ch);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>\n * @param ch  the character to convert\n * @return a Character of the specified character\n */\n", "method_name": "toCharacterObject", "codes": ["public static Character toCharacterObject(final char ch){\n    if(ch == 0) return null;\n\treturn new Character(ch);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01781c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toCharacterObject.class"}
{"generate_results": [{"generate_code": "public static boolean isAsciiAlphaUpper(final char ch){\n    if(ch >= 'A' && ch <= 'Z'){\n        return true;\n    }\n\treturn (ch >= 'A' && ch <= 'Z');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if between 65 and 90 inclusive\n */\n", "method_name": "isAsciiAlphaUpper", "codes": ["public static boolean isAsciiAlphaUpper(final char ch){\n    if(ch >= 'A' && ch <= 'Z'){\n        return true;\n    }\n\treturn (ch >= 'A' && ch <= 'Z');\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c1", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAsciiAlphaUpper.class"}
{"generate_results": [{"generate_code": "public static int length(final String str){\nif(str==null){\nreturn 0;\n}\nreturn str.length();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n * @param str a String or <code>null</code>\n * @return String length or <code>0</code> if the String is <code>null</code>.\n * @since 2.4\n */\n", "method_name": "length", "codes": ["public static int length(final String str){\nif(str==null){\nreturn 0;\n}\nreturn str.length();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179d9", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_length.class"}
{"generate_results": [{"generate_code": "public static String base64Decode(final String s){\n    if(s==null){\n        return null;\n    }\n\treturn new String(base64DecodeToArray(s),StandardCharsets.UTF_8);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Decoding a string to a string follow the Base64 regular. \n */\n", "method_name": "base64Decode", "codes": ["public static String base64Decode(final String s){\n    if(s==null){\n        return null;\n    }\n\treturn new String(base64DecodeToArray(s),StandardCharsets.UTF_8);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017748", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CommonCodeUtils_base64Decode.class"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1==null){\n        return array2==null;\n    }\n\treturn ArrayUtils.isSameLength(array1,array2);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n\tat net.hasor.utils.ArrayUtils.isSameLength(ArrayUtils.java:1136)\n", "is_pass": false}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1==null){\n        return array2==null;\n    }\n\treturn ArrayUtils.isSameLength(array1,array2);\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017663", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isSameLength.class"}
{"generate_results": [{"generate_code": "public static char[] clone(final char[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\tfinal char[] newArray = new char[array.length];\n\tSystem.arraycopy(array, 0, newArray, 0, array.length);\n\treturn newArray;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  the array to clone, may be <code>null</code>\n * @return the cloned array, <code>null</code> if <code>null</code> input\n */\n", "method_name": "clone", "codes": ["public static char[] clone(final char[] array){\n\tif (array == null) {\n\t\treturn null;\n\t}\n\tfinal char[] newArray = new char[array.length];\n\tSystem.arraycopy(array, 0, newArray, 0, array.length);\n\treturn newArray;\n}"], "code_level": "self_contained", "_id": "636766f31a6d9265ec01768f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_clone.class"}
{"generate_results": [{"generate_code": "public static boolean isAscii(final char ch){\n    if(ch>127)\n    \treturn false;\n\treturn ch<128;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\\n') = true CharUtils.isAscii('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 128\n */\n", "method_name": "isAscii", "codes": ["public static boolean isAscii(final char ch){\n    if(ch>127)\n    \treturn false;\n\treturn ch<128;\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c3", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAscii.class"}
{"generate_results": [{"generate_code": "public static String toString(final char ch){\n    if(ch=='\\n'){\n        return \"\\\\n\";\n    }else if(ch=='\\r'){\n        return \"\\\\r\";\n    }else if(ch=='\\t'){\n        return \"\\\\t\";\n    }else if(ch=='\\b'){\n        return \"\\\\b\";\n    }else if(ch=='\\f'){\n        return \"\\\\f\";\n    }else if(ch=='\\0'){\n        return \"\\\\0\";\n    }else if(ch=='\\''||ch=='\"'||ch=='\\\\'){\n        return \"\\\\\"+ch;\n    }else{\n        return String.valueOf(ch);\n    }\n\treturn String.valueOf(ch);\n}", "errormessage": "compile error", "error_detail_message": "CharUtils.java:71: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n            CharUtils.CHAR_ARRAY[i] = new Character((char) i);\n                                      ^\nCharUtils.java:105: warning: [removal] Character(char) in Character has been deprecated and marked for removal\n        return new Character(ch);\n               ^\nCharUtils.java:328: error: unreachable statement\n\treturn String.valueOf(ch);\n\t^\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = \" \" CharUtils.toString('A')  = \"A\" </pre>\n * @param ch  the character to convert\n * @return a String containing the one specified character\n */\n", "method_name": "toString", "codes": ["public static String toString(final char ch){\n    if(ch=='\\n'){\n        return \"\\\\n\";\n    }else if(ch=='\\r'){\n        return \"\\\\r\";\n    }else if(ch=='\\t'){\n        return \"\\\\t\";\n    }else if(ch=='\\b'){\n        return \"\\\\b\";\n    }else if(ch=='\\f'){\n        return \"\\\\f\";\n    }else if(ch=='\\0'){\n        return \"\\\\0\";\n    }else if(ch=='\\''||ch=='\"'||ch=='\\\\'){\n        return \"\\\\\"+ch;\n    }else{\n        return String.valueOf(ch);\n    }\n\treturn String.valueOf(ch);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec017a05", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CharUtils_toString.java"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n\tif(size>0){\n\t\tint newSize=this.data.length+size;\n\t\tbyte[] newData=new byte[newSize];\n\t\tSystem.arraycopy(this.data,0,newData,0,this.data.length);\n\t\tthis.data=newData;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n\tif(size>0){\n\t\tint newSize=this.data.length+size;\n\t\tbyte[] newData=new byte[newSize];\n\t\tSystem.arraycopy(this.data,0,newData,0,this.data.length);\n\t\tthis.data=newData;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767191a6d9265ec017c0f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ByteVector_enlarge.class"}
{"generate_results": [{"generate_code": "int addType(final String value){\n    if (typeCount == typeTable.length) {\n        typeTable = Arrays.copyOf(typeTable, typeTable.length + 1);\n    }\n\tint typeIndex = typeTable.length;\n\tfor (int i = 0; i < typeTable.length; ++i) {\n\t\tif (typeTable[i].value.equals(value)) {\n\t\t\ttypeIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (typeIndex == typeTable.length) {\n\t\ttypeTable = Arrays.copyOf(typeTable, typeTable.length + 1);\n\t\ttypeTable[typeIndex] = new Entry(typeIndex, CONSTANT_Utf8, value, hash(CONSTANT_Utf8, value));\n\t}\n\treturn typeIndex;\n}", "errormessage": "compile error", "error_detail_message": "SymbolTable.java:1004: error: cannot find symbol\n        typeTable = Arrays.copyOf(typeTable, typeTable.length + 1);\n                    ^\n  symbol:   variable Arrays\n  location: class SymbolTable\nSymbolTable.java:1014: error: cannot find symbol\n\t\ttypeTable = Arrays.copyOf(typeTable, typeTable.length + 1);\n\t\t            ^\n  symbol:   variable Arrays\n  location: class SymbolTable\nSymbolTable.java:1015: error: cannot find symbol\n\t\ttypeTable[typeIndex] = new Entry(typeIndex, CONSTANT_Utf8, value, hash(CONSTANT_Utf8, value));\n\t\t                                            ^\n  symbol:   variable CONSTANT_Utf8\n  location: class SymbolTable\nSymbolTable.java:1015: error: cannot find symbol\n\t\ttypeTable[typeIndex] = new Entry(typeIndex, CONSTANT_Utf8, value, hash(CONSTANT_Utf8, value));\n\t\t                                                                       ^\n  symbol:   variable CONSTANT_Utf8\n  location: class SymbolTable\n4 errors\n", "is_pass": false}], "docstring": "/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n", "method_name": "addType", "codes": ["int addType(final String value){\n    if (typeCount == typeTable.length) {\n        typeTable = Arrays.copyOf(typeTable, typeTable.length + 1);\n    }\n\tint typeIndex = typeTable.length;\n\tfor (int i = 0; i < typeTable.length; ++i) {\n\t\tif (typeTable[i].value.equals(value)) {\n\t\t\ttypeIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (typeIndex == typeTable.length) {\n\t\ttypeTable = Arrays.copyOf(typeTable, typeTable.length + 1);\n\t\ttypeTable[typeIndex] = new Entry(typeIndex, CONSTANT_Utf8, value, hash(CONSTANT_Utf8, value));\n\t}\n\treturn typeIndex;\n}"], "code_level": "project_runnable", "_id": "636766ef1a6d9265ec01761a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/SymbolTable_addType.java"}
{"generate_results": [{"generate_code": "public long readLong(final int offset){\n    if(offset < 0 || offset + 8 > b.length){\n        throw new IllegalArgumentException();\n    }\nreturn(readUnsignedShort(offset) << 16) | readUnsignedShort(offset + 2);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Reads a signed long value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readLong", "codes": ["public long readLong(final int offset){\n    if(offset < 0 || offset + 8 > b.length){\n        throw new IllegalArgumentException();\n    }\nreturn(readUnsignedShort(offset) << 16) | readUnsignedShort(offset + 2);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01775b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readLong.class"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteLength==0)return this;\n\tif(byteOffset<0||byteOffset+byteLength>byteArrayValue.length)throw new IllegalArgumentException(\"byteOffset=\"+byteOffset+\",byteLength=\"+byteLength+\",byteArrayValue.length=\"+byteArrayValue.length);\n\tif(byteLength<0)throw new IllegalArgumentException(\"byteLength=\"+byteLength);\n\tif(byteLength==0)return this;\n\tif(byteLength>this.length-this.offset){\n\t\tthis.enlarge(byteLength);\n\t}\n\tSystem.arraycopy(byteArrayValue,byteOffset,this.data,this.offset,byteLength);\n\tthis.offset+=byteLength;\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:329: error: cannot find symbol\n\tif(byteLength>this.length-this.offset){\n\t                              ^\n  symbol: variable offset\nByteVector.java:332: error: cannot find symbol\n\tSystem.arraycopy(byteArrayValue,byteOffset,this.data,this.offset,byteLength);\n\t                                                         ^\n  symbol: variable offset\nByteVector.java:333: error: cannot find symbol\n\tthis.offset+=byteLength;\n\t    ^\n  symbol: variable offset\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset index of the first byte of byteArrayValue that must be copied.\n * @param byteLength number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteLength==0)return this;\n\tif(byteOffset<0||byteOffset+byteLength>byteArrayValue.length)throw new IllegalArgumentException(\"byteOffset=\"+byteOffset+\",byteLength=\"+byteLength+\",byteArrayValue.length=\"+byteArrayValue.length);\n\tif(byteLength<0)throw new IllegalArgumentException(\"byteLength=\"+byteLength);\n\tif(byteLength==0)return this;\n\tif(byteLength>this.length-this.offset){\n\t\tthis.enlarge(byteLength);\n\t}\n\tSystem.arraycopy(byteArrayValue,byteOffset,this.data,this.offset,byteLength);\n\tthis.offset+=byteLength;\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "6367671a1a6d9265ec017c15", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ByteVector_putByteArray.java"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n    if(descriptor.equals(\"V\")){\n\treturn;\n    }\n\tint i=0;\n\tint length=descriptor.length();\n\twhile(i<length){\n\t\tchar c=descriptor.charAt(i);\n\t\tswitch(c){\n\t\t\tcase 'B':\n\t\t\tcase 'C':\n\t\t\tcase 'D':\n\t\t\tcase 'F':\n\t\t\tcase 'I':\n\t\t\tcase 'J':\n\t\t\tcase 'S':\n\t\t\tcase 'Z':\n\t\t\t\tpop();\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tpop(descriptor.substring(i+1,descriptor.indexOf(';',i)));\n\t\t\t\ti=descriptor.indexOf(';',i);\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tpop(descriptor.substring(i+1,descriptor.indexOf(']',i)));\n\t\t\t\ti=descriptor.indexOf(']',i);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Invalid descriptor : \"+descriptor);\n\t\t}\n\t\ti++;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.RuntimeException: Invalid descriptor : (sdkjfsadkrtwer)wersdf\n\tat net.hasor.utils.asm.Frame.pop(Frame.java:572)\n\tat net.hasor.utils.asm.Frame_pop.main(Frame_pop.java:23)\n", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n    if(descriptor.equals(\"V\")){\n\treturn;\n    }\n\tint i=0;\n\tint length=descriptor.length();\n\twhile(i<length){\n\t\tchar c=descriptor.charAt(i);\n\t\tswitch(c){\n\t\t\tcase 'B':\n\t\t\tcase 'C':\n\t\t\tcase 'D':\n\t\t\tcase 'F':\n\t\t\tcase 'I':\n\t\t\tcase 'J':\n\t\t\tcase 'S':\n\t\t\tcase 'Z':\n\t\t\t\tpop();\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tpop(descriptor.substring(i+1,descriptor.indexOf(';',i)));\n\t\t\t\ti=descriptor.indexOf(';',i);\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tpop(descriptor.substring(i+1,descriptor.indexOf(']',i)));\n\t\t\t\ti=descriptor.indexOf(']',i);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Invalid descriptor : \"+descriptor);\n\t\t}\n\t\ti++;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767021a6d9265ec0178b2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "private void addInitializedType(final int abstractType){\n\tif(initializations==null){\n\t\tinitializations=new int[1];\n\t\tinitializations[0]=abstractType;\n\t}else{\n\t\tint[] newInitializations=new int[initializations.length+1];\n\t\tSystem.arraycopy(initializations,0,newInitializations,0,initializations.length);\n\t\tnewInitializations[initializations.length]=abstractType;\n\t\tinitializations=newInitializations;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat net.hasor.utils.asm.Frame_addInitializedType.main(Frame_addInitializedType.java:28)\n", "is_pass": false}], "docstring": "/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n", "method_name": "addInitializedType", "codes": ["private void addInitializedType(final int abstractType){\n\tif(initializations==null){\n\t\tinitializations=new int[1];\n\t\tinitializations[0]=abstractType;\n\t}else{\n\t\tint[] newInitializations=new int[initializations.length+1];\n\t\tSystem.arraycopy(initializations,0,newInitializations,0,initializations.length);\n\t\tnewInitializations[initializations.length]=abstractType;\n\t\tinitializations=newInitializations;\n\t}\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a9", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Frame_addInitializedType.class"}
{"generate_results": [{"generate_code": "private void putAbstractTypes(final int start,final int end){\n    if (currentFrame!= null) {\nt.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n * Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.jruby.runtime.builtin.io;\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyFixnum;\nimport org.jruby.RubyModule;\nimport org.jruby.runtime.Block;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\npublic class IO extends RubyObject {\n    public IO(Ruby runtime,RubyClass type) {\n        super(runtime,type);\n    }\n    public static RubyClass createIOClass(Ruby runtime) {\n        RubyClass ioClass = runtime.defineClass(\"IO\",runtime.getObject(),IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods\nfor (int i=start; i<end; i++) {\nputFrameType(currentFrame[i]);\n}\n}", "errormessage": "compile error", "error_detail_message": "MethodWriter.java:1734: error: <identifier> expected\nt.\n  ^\nMethodWriter.java:1736: error: illegal start of expression\n * This program is distributed in the hope that it will be useful, but WITHOUT\n ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n       ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                  ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                 ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                          ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                                  ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                                          ^\nMethodWriter.java:1736: error: not a statement\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                                           ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                                                 ^\nMethodWriter.java:1736: error: ';' expected\n * This program is distributed in the hope that it will be useful, but WITHOUT\n                                                                              ^\nMethodWriter.java:1737: error: ';' expected\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n                             ^\nMethodWriter.java:1737: error: ';' expected\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n                                         ^\nMethodWriter.java:1737: error: ';' expected\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n                                                     ^\nMethodWriter.java:1737: error: ';' expected\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n                                                                        ^\nMethodWriter.java:1738: error: not a statement\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n ^\nMethodWriter.java:1738: error: ';' expected\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n      ^\nMethodWriter.java:1738: error: ';' expected\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n                   ^\nMethodWriter.java:1738: error: ';' expected\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n                                    ^\nMethodWriter.java:1738: error: ';' expected\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n                                                ^\nMethodWriter.java:1738: error: ';' expected\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n                                                               ^\nMethodWriter.java:1738: error: '(' expected\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n                                                                   ^\nMethodWriter.java:1739: error: <identifier> expected\n * details.\n           ^\nMethodWriter.java:1741: error: illegal start of expression\n * You should have received a copy of the GNU General Public License along with\n ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n      ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n             ^\nMethodWriter.java:1741: error: not a statement\n * You should have received a copy of the GNU General Public License along with\n              ^\nMethodWriter.java:1741: error: ')' expected\n * You should have received a copy of the GNU General Public License along with\n                  ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n                             ^\nMethodWriter.java:1741: error: variable declaration not allowed here\n * You should have received a copy of the GNU General Public License along with\n                            ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n                                     ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n                                             ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n                                                            ^\nMethodWriter.java:1741: error: ';' expected\n * You should have received a copy of the GNU General Public License along with\n                                                                          ^\nMethodWriter.java:1742: error: not a statement\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n ^\nMethodWriter.java:1742: error: ';' expected\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n       ^\nMethodWriter.java:1742: error: not a statement\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n        ^\nMethodWriter.java:1742: error: '(' expected\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n                   ^\nMethodWriter.java:1742: error: ')' expected\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n                       ^\nMethodWriter.java:1742: error: ';' expected\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n                                 ^\nMethodWriter.java:1742: error: ';' expected\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n                                          ^\nMethodWriter.java:1742: error: ';' expected\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n                                                                   ^\nMethodWriter.java:1743: error: not a statement\n * Place, Suite 330, Boston, MA 02111-1307 USA\n ^\nMethodWriter.java:1743: error: ';' expected\n * Place, Suite 330, Boston, MA 02111-1307 USA\n        ^\nMethodWriter.java:1743: error: not a statement\n * Place, Suite 330, Boston, MA 02111-1307 USA\n          ^\nMethodWriter.java:1743: error: ';' expected\n * Place, Suite 330, Boston, MA 02111-1307 USA\n               ^\nMethodWriter.java:1743: error: not a statement\n * Place, Suite 330, Boston, MA 02111-1307 USA\n                     ^\nMethodWriter.java:1743: error: ';' expected\n * Place, Suite 330, Boston, MA 02111-1307 USA\n                           ^\nMethodWriter.java:1743: error: not a statement\n * Place, Suite 330, Boston, MA 02111-1307 USA\n                             ^\nMethodWriter.java:1743: error: ';' expected\n * Place, Suite 330, Boston, MA 02111-1307 USA\n                               ^\nMethodWriter.java:1744: error: illegal start of expression\n */\n  ^\nMethodWriter.java:1745: error: illegal start of expression\npackage org.jruby.runtime.builtin.io;\n^\nMethodWriter.java:1745: error: not a statement\npackage org.jruby.runtime.builtin.io;\n                                 ^\nMethodWriter.java:1746: error: illegal start of expression\nimport org.jruby.Ruby;\n^\nMethodWriter.java:1746: error: not a statement\nimport org.jruby.Ruby;\n                ^\nMethodWriter.java:1747: error: illegal start of expression\nimport org.jruby.RubyClass;\n^\nMethodWriter.java:1747: error: not a statement\nimport org.jruby.RubyClass;\n                ^\nMethodWriter.java:1748: error: illegal start of expression\nimport org.jruby.RubyFixnum;\n^\nMethodWriter.java:1748: error: not a statement\nimport org.jruby.RubyFixnum;\n                ^\nMethodWriter.java:1749: error: illegal start of expression\nimport org.jruby.RubyModule;\n^\nMethodWriter.java:1749: error: not a statement\nimport org.jruby.RubyModule;\n                ^\nMethodWriter.java:1750: error: illegal start of expression\nimport org.jruby.runtime.Block;\n^\nMethodWriter.java:1750: error: not a statement\nimport org.jruby.runtime.Block;\n                        ^\nMethodWriter.java:1751: error: illegal start of expression\nimport org.jruby.runtime.ThreadContext;\n^\nMethodWriter.java:1751: error: not a statement\nimport org.jruby.runtime.ThreadContext;\n                        ^\nMethodWriter.java:1752: error: illegal start of expression\nimport org.jruby.runtime.builtin.IRubyObject;\n^\nMethodWriter.java:1752: error: not a statement\nimport org.jruby.runtime.builtin.IRubyObject;\n                                ^\nMethodWriter.java:1753: error: illegal start of expression\npublic class IO extends RubyObject {\n^\nMethodWriter.java:1820: error: not a statement\n        ioClass.defineAnnotatedMethods\n               ^\nMethodWriter.java:1820: error: ';' expected\n        ioClass.defineAnnotatedMethods\n                                      ^\nMethodWriter.java:2155: error: reached end of file while parsing\n}\n ^\n71 errors\n", "is_pass": false}], "docstring": "/** \n * Puts some abstract types of  {@link #currentFrame} in {@link #stackMapTableEntries} , using theJVMS verification_type_info format used in StackMapTable attributes.\n * @param start index of the first type in {@link #currentFrame} to write.\n * @param end index of last type in {@link #currentFrame} to write (exclusive).\n */\n", "method_name": "putAbstractTypes", "codes": ["private void putAbstractTypes(final int start,final int end){\n    if (currentFrame!= null) {\nt.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 59 Temple\n * Place, Suite 330, Boston, MA 02111-1307 USA\n */\npackage org.jruby.runtime.builtin.io;\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyFixnum;\nimport org.jruby.RubyModule;\nimport org.jruby.runtime.Block;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\npublic class IO extends RubyObject {\n    public IO(Ruby runtime,RubyClass type) {\n        super(runtime,type);\n    }\n    public static RubyClass createIOClass(Ruby runtime) {\n        RubyClass ioClass = runtime.defineClass(\"IO\",runtime.getObject(),IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods(IO.class);\n        ioClass.defineAnnotatedMethods\nfor (int i=start; i<end; i++) {\nputFrameType(currentFrame[i]);\n}\n}"], "code_level": "project_runnable", "_id": "6367670a1a6d9265ec0179dc", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/MethodWriter_putAbstractTypes.java"}
{"generate_results": [{"generate_code": "public short readShort(final int offset){\n    if(offset < 0 || offset + 2 > classFileBuffer.length){\n        throw new IllegalArgumentException();\n    }\n\treturn (short)((classFileBuffer[offset] & 0xff) | (classFileBuffer[offset + 1] & 0xff) << 8);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Unsupported class file major version 13312\n\tat net.hasor.utils.asm.ClassReader.<init>(ClassReader.java:175)\n\tat net.hasor.utils.asm.ClassReader.<init>(ClassReader.java:158)\n\tat net.hasor.utils.asm.ClassReader.<init>(ClassReader.java:147)\n\tat net.hasor.utils.asm.ClassReader.<init>(ClassReader.java:271)\n\tat net.hasor.utils.asm.ClassReader_readShort.main(ClassReader_readShort.java:16)\n", "is_pass": false}], "docstring": "/** \n * Reads a signed short value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readShort", "codes": ["public short readShort(final int offset){\n    if(offset < 0 || offset + 2 > classFileBuffer.length){\n        throw new IllegalArgumentException();\n    }\n\treturn (short)((classFileBuffer[offset] & 0xff) | (classFileBuffer[offset + 1] & 0xff) << 8);\n}"], "code_level": "class_runnable", "_id": "636766f21a6d9265ec017667", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readShort.class"}
{"generate_results": [{"generate_code": "protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n if (labels == null) {\n return null;\n}\nfor (int i = 0; i < labels.length; i++) {\n if (labels[i].bytecodeOffset == bytecodeOffset) {\n return labels[i];\n}\n}\nLabel label = new Label();\nlabel.bytecodeOffset = bytecodeOffset;\nlabels[labels.length] = label;\nreturn label;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read field \"bytecodeOffset\" because \"<parameter2>[<local3>]\" is null\n\tat net.hasor.utils.asm.ClassReader.readLabel(ClassReader.java:2273)\n\tat net.hasor.utils.asm.ClassReader_readLabel.main(ClassReader_readLabel.java:25)\n", "is_pass": false}], "docstring": "/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n", "method_name": "readLabel", "codes": ["protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n if (labels == null) {\n return null;\n}\nfor (int i = 0; i < labels.length; i++) {\n if (labels[i].bytecodeOffset == bytecodeOffset) {\n return labels[i];\n}\n}\nLabel label = new Label();\nlabel.bytecodeOffset = bytecodeOffset;\nlabels[labels.length] = label;\nreturn label;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017853", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readLabel.class"}
{"generate_results": [{"generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\nif(constantUtf8Values[constantPoolEntryIndex]!= null){\nreturn constantUtf8Values[constantPoolEntryIndex];\n}\nfinal int utfOffset = cpInfoOffsets[constantPoolEntryIndex];\nfinal int utfLength = readUnsignedShort(utfOffset);\nfinal int utfLength2 = utfLength + utfOffset;\nif(utfLength2 > maxStringLength){\nthrow new RuntimeException(\"UTF-8 string too long\");\n}\nfinal int utfLength3 = utfLength2 + 2;\nif(utfLength3 > classFileBuffer.length){\nthrow new RuntimeException(\"UTF-8 string too long\");\n}\nfor(int i = 0; i < utfLength; ++i){\ncharBuffer[i] = (char)classFileBuffer[utfOffset + i + 2];\n}\nconstantUtf8Values[constantPoolEntryIndex] = new String(charBuffer,0,utfLength);\nreturn constantUtf8Values[constantPoolEntryIndex];\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}.\n * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pooltable.\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficientlylarge. It is not automatically resized.\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\n */\n", "method_name": "readUtf", "codes": ["final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\nif(constantUtf8Values[constantPoolEntryIndex]!= null){\nreturn constantUtf8Values[constantPoolEntryIndex];\n}\nfinal int utfOffset = cpInfoOffsets[constantPoolEntryIndex];\nfinal int utfLength = readUnsignedShort(utfOffset);\nfinal int utfLength2 = utfLength + utfOffset;\nif(utfLength2 > maxStringLength){\nthrow new RuntimeException(\"UTF-8 string too long\");\n}\nfinal int utfLength3 = utfLength2 + 2;\nif(utfLength3 > classFileBuffer.length){\nthrow new RuntimeException(\"UTF-8 string too long\");\n}\nfor(int i = 0; i < utfLength; ++i){\ncharBuffer[i] = (char)classFileBuffer[utfOffset + i + 2];\n}\nconstantUtf8Values[constantPoolEntryIndex] = new String(charBuffer,0,utfLength);\nreturn constantUtf8Values[constantPoolEntryIndex];\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01782a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readUtf.class"}
{"generate_results": [{"generate_code": "@Override public int hashCode(){\n    if(sort==VOID)return VOID;\nreturn sort;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a hash code value for this type.\n * @return a hash code value for this type.\n */\n", "method_name": "hashCode", "codes": ["@Override public int hashCode(){\n    if(sort==VOID)return VOID;\nreturn sort;\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017758", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Type_hashCode.class"}
{"generate_results": [{"generate_code": "int addConstantNameAndType(final String name,final String descriptor){\n    if(name==null){\n        throw new IllegalArgumentException(\"name == null\");\n    }\n\treturn addConstantNameAndType(name,descriptor,0);\n}", "errormessage": "compile error", "error_detail_message": "SymbolTable.java:653: error: incompatible types: String cannot be converted to int\n\treturn addConstantNameAndType(name,descriptor,0);\n\t                              ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n", "method_name": "addConstantNameAndType", "codes": ["int addConstantNameAndType(final String name,final String descriptor){\n    if(name==null){\n        throw new IllegalArgumentException(\"name == null\");\n    }\n\treturn addConstantNameAndType(name,descriptor,0);\n}"], "code_level": "project_runnable", "_id": "636766fe1a6d9265ec017823", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/SymbolTable_addConstantNameAndType.java"}
{"generate_results": [{"generate_code": "final void addLineNumber(final int lineNumber){\nif(this.lineNumber==0){\nthis.lineNumber=lineNumber;\n}else{\nif(this.otherLineNumbers==null){\nthis.otherLineNumbers=new int[LINE_NUMBERS_CAPACITY_INCREMENT];\n}\nif(this.otherLineNumbers.length==this.otherLineNumbers.length){\nint[] newOtherLineNumbers=new int[this.otherLineNumbers.length+LINE_NUMBERS_CAPACITY_INCREMENT];\nSystem.arraycopy(this.otherLineNumbers,0,newOtherLineNumbers,0,this.otherLineNumbers.length);\nthis.otherLineNumbers=newOtherLineNumbers;\n}\nthis.otherLineNumbers[this.otherLineNumbers.length-1]=lineNumber;\n}\n}", "errormessage": "compile error", "error_detail_message": "Label.java:298: error: incompatible types: possible lossy conversion from int to short\nthis.lineNumber=lineNumber;\n                ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n", "method_name": "addLineNumber", "codes": ["final void addLineNumber(final int lineNumber){\nif(this.lineNumber==0){\nthis.lineNumber=lineNumber;\n}else{\nif(this.otherLineNumbers==null){\nthis.otherLineNumbers=new int[LINE_NUMBERS_CAPACITY_INCREMENT];\n}\nif(this.otherLineNumbers.length==this.otherLineNumbers.length){\nint[] newOtherLineNumbers=new int[this.otherLineNumbers.length+LINE_NUMBERS_CAPACITY_INCREMENT];\nSystem.arraycopy(this.otherLineNumbers,0,newOtherLineNumbers,0,this.otherLineNumbers.length);\nthis.otherLineNumbers=newOtherLineNumbers;\n}\nthis.otherLineNumbers[this.otherLineNumbers.length-1]=lineNumber;\n}\n}"], "code_level": "class_runnable", "_id": "636767131a6d9265ec017b23", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/Label_addLineNumber.java"}
{"generate_results": [{"generate_code": "public static int indexOfLastSeparator(String filename){\n    if(filename == null){\n        return -1;\n    }\n\treturn indexOfLastSeparator(filename,UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n}", "errormessage": "compile error", "error_detail_message": "FilenameUtils.java:620: error: method indexOfLastSeparator in class FilenameUtils cannot be applied to given types;\n\treturn indexOfLastSeparator(filename,UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n\t       ^\n  required: String\n  found:    String,char,char\n  reason: actual and formal argument lists differ in length\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns the index of the last directory separator character. <p> This method will handle a file in either Unix or Windows format. The position of the last forward or backslash is returned. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfLastSeparator", "codes": ["public static int indexOfLastSeparator(String filename){\n    if(filename == null){\n        return -1;\n    }\n\treturn indexOfLastSeparator(filename,UNIX_SEPARATOR,WINDOWS_SEPARATOR);\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017658", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/FilenameUtils_indexOfLastSeparator.java"}
{"generate_results": [{"generate_code": "public static void forceDeleteOnExit(File file) throws IOException {\n\tif (file.isDirectory()) {\n\t\tcleanDirectoryOnExit(file);\n\t} else {\n\t\tdeleteQuietly(file);\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.\n * @param file  file or directory to delete, must not be {@code null}\n * @throws NullPointerException if the file is {@code null}\n * @throws IOException in case deletion is unsuccessful\n */\n", "method_name": "forceDeleteOnExit", "codes": ["public static void forceDeleteOnExit(File file) throws IOException {\n\tif (file.isDirectory()) {\n\t\tcleanDirectoryOnExit(file);\n\t} else {\n\t\tdeleteQuietly(file);\n\t}\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017833", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FileUtils_forceDeleteOnExit.class"}
{"generate_results": [{"generate_code": "public static int indexOfExtension(String filename){\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint extensionPos = filename.lastIndexOf(EXTENSION_SEPARATOR);\n\tint lastSeparator = indexOfLastSeparator(filename);\n\treturn (lastSeparator > extensionPos? -1 : extensionPos);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the index of the last extension separator character, which is a dot. <p> This method also checks that there is no directory separator after the last dot. To do this it uses  {@link #indexOfLastSeparator(String)} which willhandle a file in either Unix or Windows format. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfExtension", "codes": ["public static int indexOfExtension(String filename){\n\tif (filename == null) {\n\t\treturn -1;\n\t}\n\tint extensionPos = filename.lastIndexOf(EXTENSION_SEPARATOR);\n\tint lastSeparator = indexOfLastSeparator(filename);\n\treturn (lastSeparator > extensionPos? -1 : extensionPos);\n}"], "code_level": "class_runnable", "_id": "636767061a6d9265ec01794a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FilenameUtils_indexOfExtension.class"}
{"generate_results": [{"generate_code": "@Override public void write(byte b[]) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\nwrite(b,0,b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Writes <code>b.length</code> bytes from the specified byte array to this output stream.\n * @param b The array of bytes to be written.\n * @exception IOException if an error occurs.\n */\n", "method_name": "write", "codes": ["@Override public void write(byte b[]) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\nwrite(b,0,b.length);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179fe", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/output/ThresholdingOutputStream_write.class"}
{"generate_results": [{"generate_code": "@Override public void write(final byte b[],final int off,final int len) throws IOException {\nif(len<0) throw new IllegalArgumentException(\"len < 0: \"+len);\nif(off<0) throw new IllegalArgumentException(\"off < 0: \"+off);\nif(off>b.length) throw new IllegalArgumentException(\"off > b.length: \"+off);\nif(off+len<0) throw new IllegalArgumentException(\"off+len < 0: \"+(off+len));\nif(off+len>b.length) throw new IllegalArgumentException(\"off+len > b.length: \"+(off+len));\nif(len==0) return;\nif(buf==null) {\nbuf=new byte[size];\n}\nif(len<=buf.length) {\nSystem.arraycopy(b,off,buf,0,len);\ncount=len;\n}\nelse {\nif(writer==null) {\nwriter=new Writer() {\n@Override public void write(final char[] cbuf,final int off,final int len) throws IOException {\nwriter.write(cbuf,off,len);\n}\n@Override public void flush() throws IOException {\nwriter.flush();\n}\n@Override public void close() throws IOException {\nwriter.close();\n}\n};\n}\nwriter.write(b,off,len);\n}\n}", "errormessage": "compile error", "error_detail_message": "Base64OutputStream.java:117: error: cannot find symbol\nbuf=new byte[size];\n             ^\n  symbol:   variable size\n  location: class Base64OutputStream\nBase64OutputStream.java:137: error: no suitable method found for write(byte[],int,int)\nwriter.write(b,off,len);\n      ^\n    method Writer.write(char[],int,int) is not applicable\n      (argument mismatch; byte[] cannot be converted to char[])\n    method Writer.write(String,int,int) is not applicable\n      (argument mismatch; byte[] cannot be converted to String)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.\n * @param b   the data.\n * @param off the start offset in the data.\n * @param len the number of bytes to write.\n */\n", "method_name": "write", "codes": ["@Override public void write(final byte b[],final int off,final int len) throws IOException {\nif(len<0) throw new IllegalArgumentException(\"len < 0: \"+len);\nif(off<0) throw new IllegalArgumentException(\"off < 0: \"+off);\nif(off>b.length) throw new IllegalArgumentException(\"off > b.length: \"+off);\nif(off+len<0) throw new IllegalArgumentException(\"off+len < 0: \"+(off+len));\nif(off+len>b.length) throw new IllegalArgumentException(\"off+len > b.length: \"+(off+len));\nif(len==0) return;\nif(buf==null) {\nbuf=new byte[size];\n}\nif(len<=buf.length) {\nSystem.arraycopy(b,off,buf,0,len);\ncount=len;\n}\nelse {\nif(writer==null) {\nwriter=new Writer() {\n@Override public void write(final char[] cbuf,final int off,final int len) throws IOException {\nwriter.write(cbuf,off,len);\n}\n@Override public void flush() throws IOException {\nwriter.flush();\n}\n@Override public void close() throws IOException {\nwriter.close();\n}\n};\n}\nwriter.write(b,off,len);\n}\n}"], "code_level": "class_runnable", "_id": "636766f91a6d9265ec01776e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/output/Base64OutputStream_write.java"}
{"generate_results": [{"generate_code": "@Override public void write(final byte[] b) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n\twrite(b, 0, b.length);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @see OutputStream#write(byte[]) \n */\n", "method_name": "write", "codes": ["@Override public void write(final byte[] b) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n\twrite(b, 0, b.length);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179d8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/output/WriterOutputStream_write.class"}
{"generate_results": [{"generate_code": "public String toString(){\n    if(this.buffer.length() > 0){\n        this.buffer.setLength(this.buffer.length() - 2);\n    }\n\treturn this.buffer.toString();\n}", "errormessage": "compile error", "error_detail_message": "ReflectionToStringBuilder.java:667: error: buffer has private access in ToStringBuilder\n    if(this.buffer.length() > 0){\n           ^\nReflectionToStringBuilder.java:668: error: buffer has private access in ToStringBuilder\n        this.buffer.setLength(this.buffer.length() - 2);\n                                  ^\nReflectionToStringBuilder.java:668: error: buffer has private access in ToStringBuilder\n        this.buffer.setLength(this.buffer.length() - 2);\n            ^\nReflectionToStringBuilder.java:670: error: buffer has private access in ToStringBuilder\n\treturn this.buffer.toString();\n\t           ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1520: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1541: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n4 errors\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p> Gets the String built by this builder. </p>\n * @return the built string\n */\n", "method_name": "toString", "codes": ["public String toString(){\n    if(this.buffer.length() > 0){\n        this.buffer.setLength(this.buffer.length() - 2);\n    }\n\treturn this.buffer.toString();\n}"], "code_level": "project_runnable", "_id": "636767001a6d9265ec01787e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ReflectionToStringBuilder_toString.java"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n}"], "code_level": "class_runnable", "_id": "636767001a6d9265ec01787f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ToStringStyle_appendDetail.class"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return EMPTY_STRING_ARRAY;\n    }\n\treturn (collection == null)? EMPTY_STRING_ARRAY : collection.toArray(new String[collection.size()]);\n}", "errormessage": "compile error", "error_detail_message": "ReflectionToStringBuilder.java:314: error: cannot find symbol\n        return EMPTY_STRING_ARRAY;\n               ^\n  symbol:   variable EMPTY_STRING_ARRAY\n  location: class ReflectionToStringBuilder\nReflectionToStringBuilder.java:316: error: cannot find symbol\n\treturn (collection == null)? EMPTY_STRING_ARRAY : collection.toArray(new String[collection.size()]);\n\t                             ^\n  symbol:   variable EMPTY_STRING_ARRAY\n  location: class ReflectionToStringBuilder\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1520: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1541: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n2 errors\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.\n * @param collection The collection to convert\n * @return A new array of Strings.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return EMPTY_STRING_ARRAY;\n    }\n\treturn (collection == null)? EMPTY_STRING_ARRAY : collection.toArray(new String[collection.size()]);\n}"], "code_level": "project_runnable", "_id": "636766f71a6d9265ec017730", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ReflectionToStringBuilder_toNoNullStringArray.java"}
{"generate_results": [{"generate_code": "static void register(Object value){\n\tif(value!= null){\n\t\tREGISTRY.get().put(value,value);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "ToStringStyle.java:159: error: cannot find symbol\n\t\tREGISTRY.get().put(value,value);\n\t\t              ^\n  symbol:   method put(Object,Object)\n  location: class Object\nToStringStyle.java:1505: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\nToStringStyle.java:1526: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: ToStringStyle.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n", "method_name": "register", "codes": ["static void register(Object value){\n\tif(value!= null){\n\t\tREGISTRY.get().put(value,value);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec017911", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle_register.java"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017821", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ToStringStyle_appendDetail.class"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Object[] array){\n\tif(array == null){\n\t\tthrow new NullPointerException(\"The Array must not be null\");\n\t}\n\tif(array.length == 0){\n\t\tthrow new IllegalArgumentException(\"The Array must not be empty\");\n\t}\n\tArrayList<String> list = new ArrayList<String>(array.length);\n\tfor(Object obj : array){\n\t\tif(obj!= null){\n\t\t\tlist.add(obj.toString());\n\t\t}\n\t}\n\treturn list.toArray(new String[list.size()]);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}if an array element is <code>null</code>.\n * @param array The array to check\n * @return The given array or a new array without null.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Object[] array){\n\tif(array == null){\n\t\tthrow new NullPointerException(\"The Array must not be null\");\n\t}\n\tif(array.length == 0){\n\t\tthrow new IllegalArgumentException(\"The Array must not be empty\");\n\t}\n\tArrayList<String> list = new ArrayList<String>(array.length);\n\tfor(Object obj : array){\n\t\tif(obj!= null){\n\t\t\tlist.add(obj.toString());\n\t\t}\n\t}\n\treturn list.toArray(new String[list.size()]);\n}"], "code_level": "project_runnable", "_id": "636766fc1a6d9265ec0177ef", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ReflectionToStringBuilder_toNoNullStringArray.class"}
{"generate_results": [{"generate_code": "@Override public int available() throws IOException {\nif (index >= length) {\nfillBuffer();\n}\nreturn length - index;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * @see InputStream#available() \n */\n", "method_name": "available", "codes": ["@Override public int available() throws IOException {\nif (index >= length) {\nfillBuffer();\n}\nreturn length - index;\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017641", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/input/ReaderInputStream_available.class"}
{"generate_results": [{"generate_code": "public static <T>List<T> asList(T[] a){\n    if(a == null) return Collections.emptyList();\n return a == null? Collections.emptyList() : Arrays.asList(a);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Array to List. <p> Works like  {@link Arrays#asList(Object)}, but handles null arrays.\n * @return a list backed by the array.\n */\n", "method_name": "asList", "codes": ["public static <T>List<T> asList(T[] a){\n    if(a == null) return Collections.emptyList();\n return a == null? Collections.emptyList() : Arrays.asList(a);\n}"], "code_level": "slib_runnable", "_id": "636766f01a6d9265ec017639", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/json/TypeUtil_asList.class"}
{"generate_results": [{"generate_code": "public static byte convertHexDigit(byte b){\n\tif (b >= '0' && b <= '9') return (byte)(b - '0');\n\tif (b >= 'a' && b <= 'f') return (byte)(b - 'a' + 10);\n\tif (b >= 'A' && b <= 'F') return (byte)(b - 'A' + 10);\n\tthrow new IllegalArgumentException(\"Invalid hex digit: \" + b);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @param b An ASCII encoded character 0-9 a-f A-F\n * @return The byte value of the character 0-16.\n */\n", "method_name": "convertHexDigit", "codes": ["public static byte convertHexDigit(byte b){\n\tif (b >= '0' && b <= '9') return (byte)(b - '0');\n\tif (b >= 'a' && b <= 'f') return (byte)(b - 'a' + 10);\n\tif (b >= 'A' && b <= 'F') return (byte)(b - 'A' + 10);\n\tthrow new IllegalArgumentException(\"Invalid hex digit: \" + b);\n}"], "code_level": "slib_runnable", "_id": "636766f91a6d9265ec01777d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/json/TypeUtil_convertHexDigit.class"}
{"generate_results": [{"generate_code": "public Converter lookup(final Class<?> clazz){\n    if(clazz == null)\n        return null;\n\treturn converters.get(clazz);\n}", "errormessage": "compile error", "error_detail_message": "ConverterBean.java:475: error: incompatible types: Object cannot be converted to Converter\n\treturn converters.get(clazz);\n\t                     ^\nNote: ConverterBean.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Look up and return any registered  {@link Converter} for the specifieddestination class; if there is no registered Converter, return <code>null</code>.\n * @param clazz Class for which to return a registered Converter\n * @return The registered {@link Converter} or <code>null</code> if not found\n */\n", "method_name": "lookup", "codes": ["public Converter lookup(final Class<?> clazz){\n    if(clazz == null)\n        return null;\n\treturn converters.get(clazz);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179e7", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/convert/ConverterBean_lookup.java"}
{"generate_results": [{"generate_code": "@Override public boolean containsKey(final Object key){\n    if(key==null) return false;\nreturn map.containsKey(key);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return <code>true</code> if this map contains a mapping for the specified key.\n * @param key  the key to be searched for\n * @return true if the map contains the key\n */\n", "method_name": "containsKey", "codes": ["@Override public boolean containsKey(final Object key){\n    if(key==null) return false;\nreturn map.containsKey(key);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179f2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/convert/WeakFastHashMap_containsKey.class"}
{"generate_results": [{"generate_code": "private static String[] copyStrings(final String[] src){\n\tif(src == null){\n\t\treturn null;\n\t}\n\tString[] result = new String[src.length];\n\tfor(int i = 0; i < src.length; i++){\n\t\tresult[i] = src[i].toLowerCase();\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n", "method_name": "copyStrings", "codes": ["private static String[] copyStrings(final String[] src){\n\tif(src == null){\n\t\treturn null;\n\t}\n\tString[] result = new String[src.length];\n\tfor(int i = 0; i < src.length; i++){\n\t\tresult[i] = src[i].toLowerCase();\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767041a6d9265ec0178f8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/convert/convert/BooleanConverter_copyStrings.class"}
{"generate_results": [{"generate_code": "@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\tif (value == null) {\n\t\treturn null;\n\t}\n\tif (type == Character.class) {\n\t\tif (value instanceof String) {\n\t\t\tString str = (String) value;\n\t\t\tif (str.length() == 0) {\n\t\t\t\treturn this.defaultValue;\n\t\t\t}\n\t\t\treturn str.charAt(0);\n\t\t}\n\t\treturn value;\n\t}\n\treturn BeanUtils.convert(value, type);\n}", "errormessage": "compile error", "error_detail_message": "CharacterConverter.java:85: error: defaultValue has private access in AbstractConverter\n\t\t\t\treturn this.defaultValue;\n\t\t\t\t           ^\nCharacterConverter.java:91: error: cannot find symbol\n\treturn BeanUtils.convert(value, type);\n\t                ^\n  symbol:   method convert(Object,Class<CAP#1>)\n  location: class BeanUtils\n  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n2 errors\n", "is_pass": false}], "docstring": "/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n", "method_name": "convertToType", "codes": ["@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n\tif (value == null) {\n\t\treturn null;\n\t}\n\tif (type == Character.class) {\n\t\tif (value instanceof String) {\n\t\t\tString str = (String) value;\n\t\t\tif (str.length() == 0) {\n\t\t\t\treturn this.defaultValue;\n\t\t\t}\n\t\t\treturn str.charAt(0);\n\t\t}\n\t\treturn value;\n\t}\n\treturn BeanUtils.convert(value, type);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bf", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/convert/convert/CharacterConverter_convertToType.java"}
{"generate_results": [{"generate_code": "public Collection<Object> values(){\n    if(this.values == null){\n        this.values = new ArrayList<Object>();\n        for(Entry<String,Object> entry : this.entrySet()){\n            this.values.add(entry.getValue());\n        }\n    }\n\treturn Collections.unmodifiableCollection(this.values);\n}", "errormessage": "compile error", "error_detail_message": "BeanMap.java:307: error: values is not public in AbstractMap; cannot be accessed from outside package\n    if(this.values == null){\n           ^\nBeanMap.java:308: error: values is not public in AbstractMap; cannot be accessed from outside package\n        this.values = new ArrayList<Object>();\n            ^\nBeanMap.java:309: error: type Entry does not take parameters\n        for(Entry<String,Object> entry : this.entrySet()){\n                 ^\nBeanMap.java:310: error: values is not public in AbstractMap; cannot be accessed from outside package\n            this.values.add(entry.getValue());\n                ^\nBeanMap.java:313: error: values is not public in AbstractMap; cannot be accessed from outside package\n\treturn Collections.unmodifiableCollection(this.values);\n\t                                              ^\nNote: BeanMap.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n5 errors\n", "is_pass": false}], "docstring": "/** \n * Returns the values for the BeanMap.\n * @return values for the BeanMap. The returned collection is not modifiable.\n */\n", "method_name": "values", "codes": ["public Collection<Object> values(){\n    if(this.values == null){\n        this.values = new ArrayList<Object>();\n        for(Entry<String,Object> entry : this.entrySet()){\n            this.values.add(entry.getValue());\n        }\n    }\n\treturn Collections.unmodifiableCollection(this.values);\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec01764f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ref/BeanMap_values.java"}
{"generate_results": [{"generate_code": "public void putAllWriteable(BeanMap map){\n\tif(map == null)\n\t\treturn ;\n\tfor(Entry<String,Object> entry : map.entrySet()){\n\t\tString key = entry.getKey();\n\t\tObject value = entry.getValue();\n\t\tif(value!= null){\n\t\t\tMethod writeMethod = getWriteMethod(key);\n\t\t\tif(writeMethod!= null){\n\t\t\t\ttry{\n\t\t\t\t\twriteMethod.invoke(bean,value);\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlogWarn(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "BeanMap.java:156: error: type Entry does not take parameters\n\tfor(Entry<String,Object> entry : map.entrySet()){\n\t         ^\nNote: BeanMap.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts all of the writable properties from the given BeanMap into this BeanMap. Read-only and Write-only properties will be ignored.\n * @param map  the BeanMap whose properties to put\n */\n", "method_name": "putAllWriteable", "codes": ["public void putAllWriteable(BeanMap map){\n\tif(map == null)\n\t\treturn ;\n\tfor(Entry<String,Object> entry : map.entrySet()){\n\t\tString key = entry.getKey();\n\t\tObject value = entry.getValue();\n\t\tif(value!= null){\n\t\t\tMethod writeMethod = getWriteMethod(key);\n\t\t\tif(writeMethod!= null){\n\t\t\t\ttry{\n\t\t\t\t\twriteMethod.invoke(bean,value);\n\t\t\t\t}catch(Exception ex){\n\t\t\t\t\tlogWarn(ex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"], "code_level": "class_runnable", "_id": "636767071a6d9265ec017962", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ref/BeanMap_putAllWriteable.java"}
{"generate_results": [{"generate_code": "public long contentLength(){\n    if(contentLength == -1){\n        contentLength = 0;\n        try {\n            InputStream is = getInputStream();\n            while(is.read()!= -1){\n                contentLength++;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\treturn contentLength;\n}", "errormessage": "compile error", "error_detail_message": "ServletRequestContext.java:61: error: cannot find symbol\n    if(contentLength == -1){\n       ^\n  symbol:   variable contentLength\n  location: class ServletRequestContext\nServletRequestContext.java:62: error: cannot find symbol\n        contentLength = 0;\n        ^\n  symbol:   variable contentLength\n  location: class ServletRequestContext\nServletRequestContext.java:66: error: cannot find symbol\n                contentLength++;\n                ^\n  symbol:   variable contentLength\n  location: class ServletRequestContext\nServletRequestContext.java:72: error: cannot find symbol\n\treturn contentLength;\n\t       ^\n  symbol:   variable contentLength\n  location: class ServletRequestContext\n4 errors\n", "is_pass": false}], "docstring": "/** \n * Retrieve the content length of the request.\n * @return The content length of the request.\n * @since 1.3\n */\n", "method_name": "contentLength", "codes": ["public long contentLength(){\n    if(contentLength == -1){\n        contentLength = 0;\n        try {\n            InputStream is = getInputStream();\n            while(is.read()!= -1){\n                contentLength++;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\treturn contentLength;\n}"], "code_level": "project_runnable", "_id": "636767031a6d9265ec0178dd", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/ServletRequestContext_contentLength.java"}
{"generate_results": [{"generate_code": "private int parseEndOfLine(String headerPart,int end){\n    if(end == -1){\n        return -1;\n    }\n\tint index = headerPart.indexOf(ENTER,end);\n\tif(index == -1){\n\t\tthrow new FileUploadException(format(\"Invalid header part: %s\",headerPart));\n\t}\n\treturn index;\n}", "errormessage": "compile error", "error_detail_message": "FileUpload.java:343: error: cannot find symbol\n\tint index = headerPart.indexOf(ENTER,end);\n\t                               ^\n  symbol:   variable ENTER\n  location: class FileUpload\n1 error\n", "is_pass": false}], "docstring": "/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n", "method_name": "parseEndOfLine", "codes": ["private int parseEndOfLine(String headerPart,int end){\n    if(end == -1){\n        return -1;\n    }\n\tint index = headerPart.indexOf(ENTER,end);\n\tif(index == -1){\n\t\tthrow new FileUploadException(format(\"Invalid header part: %s\",headerPart));\n\t}\n\treturn index;\n}"], "code_level": "self_contained", "_id": "636767121a6d9265ec017b0a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/FileUpload_parseEndOfLine.java"}
{"generate_results": [{"generate_code": "protected int findByte(byte value,int pos){\n    if(pos<0){\n        return -1;\n    }\n\tint i=pos;\n\twhile(i<tail){\n\t\tif(buffer[i]==value){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn -1;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n", "method_name": "findByte", "codes": ["protected int findByte(byte value,int pos){\n    if(pos<0){\n        return -1;\n    }\n\tint i=pos;\n\twhile(i<tail){\n\t\tif(buffer[i]==value){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn -1;\n}"], "code_level": "class_runnable", "_id": "636766ff1a6d9265ec017851", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/MultipartStream_findByte.class"}
{"generate_results": [{"generate_code": "public byte readByte() throws IOException {\n\tif (head == tail) {\n\t\tmakeAvailable();\n\t\tif (head == tail) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tbyte result = buffer[head];\n\thead = (head + 1) % buffer.length;\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "MultipartStream.java:188: error: cannot find symbol\n\t\tmakeAvailable();\n\t\t^\n  symbol:   method makeAvailable()\n  location: class MultipartStream\n1 error\n", "is_pass": false}], "docstring": "/** \n * Reads a byte from the <code>buffer</code>, and refills it as necessary.\n * @return The next byte from the input stream.\n * @throws IOException if there is no more data available.\n */\n", "method_name": "readByte", "codes": ["public byte readByte() throws IOException {\n\tif (head == tail) {\n\t\tmakeAvailable();\n\t\tif (head == tail) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tbyte result = buffer[head];\n\thead = (head + 1) % buffer.length;\n\treturn result;\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01774b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/MultipartStream_readByte.java"}
{"generate_results": [{"generate_code": "private String parseToken(final char[] terminators){\n    if (pos >= len) {\n        return null;\n    }\n\tfinal StringBuilder sb = new StringBuilder();\n\twhile (hasChar()) {\n\t\tfinal char ch = chars[pos];\n\t\tif (isOneOf(ch,terminators)) {\n\t\t\tbreak;\n\t\t}\n\t\tsb.append(ch);\n\t\tpos++;\n\t}\n\treturn sb.toString();\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n", "method_name": "parseToken", "codes": ["private String parseToken(final char[] terminators){\n    if (pos >= len) {\n        return null;\n    }\n\tfinal StringBuilder sb = new StringBuilder();\n\twhile (hasChar()) {\n\t\tfinal char ch = chars[pos];\n\t\tif (isOneOf(ch,terminators)) {\n\t\t\tbreak;\n\t\t}\n\t\tsb.append(ch);\n\t\tpos++;\n\t}\n\treturn sb.toString();\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec01779c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/ParameterParser_parseToken.class"}
{"generate_results": [{"generate_code": "public static boolean arrayequals(byte[] a,byte[] b,int count){\n\tif(a == null || b == null){\n\t\treturn false;\n\t}\n\tif(a.length!= b.length){\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < count; i++){\n\t\tif(a[i]!= b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares <code>count</code> first bytes in the arrays <code>a</code> and <code>b</code>.\n * @param a     The first array to compare.\n * @param b     The second array to compare.\n * @param count How many bytes should be compared.\n * @return <code>true</code> if <code>count</code> first bytes in arrays<code>a</code> and <code>b</code> are equal.\n */\n", "method_name": "arrayequals", "codes": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n\tif(a == null || b == null){\n\t\treturn false;\n\t}\n\tif(a.length!= b.length){\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < count; i++){\n\t\tif(a[i]!= b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "self_contained", "_id": "636766fd1a6d9265ec017814", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/MultipartStream_arrayequals.class"}
{"generate_results": [{"generate_code": "public static int lastIndexOf(String str,String searchStr){\n\tif(StringUtils.isEmpty(str) || StringUtils.isEmpty(searchStr)){\n\t\treturn INDEXNOTFOUND;\n\t}\n\treturn str.lastIndexOf(searchStr);\n}", "errormessage": "compile error", "error_detail_message": "StringUdfSource.java:162: error: cannot find symbol\n\t\treturn INDEXNOTFOUND;\n\t\t       ^\n  symbol:   variable INDEXNOTFOUND\n  location: class StringUdfSource\n1 error\n", "is_pass": false}], "docstring": "/** \n * Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}. \n */\n", "method_name": "lastIndexOf", "codes": ["public static int lastIndexOf(String str,String searchStr){\n\tif(StringUtils.isEmpty(str) || StringUtils.isEmpty(searchStr)){\n\t\treturn INDEXNOTFOUND;\n\t}\n\treturn str.lastIndexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636766f61a6d9265ec017701", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/src/main/java/net/hasor/dataql/fx/basic/StringUdfSource_lastIndexOf.java"}
{"generate_results": [{"generate_code": "public static String sub(String str,int start,int end){\n\tif(str == null){\n\t\treturn null;\n\t}\n\tif(start < 0){\n\t\tstart = str.length() + start;\n\t}\n\tif(end < 0){\n\t\tend = str.length() + end;\n\t}\n\tif(start < 0){\n\t\tstart = 0;\n\t}\n\tif(end > str.length()){\n\t\tend = str.length();\n\t}\n\tif(start > end){\n\t\treturn \"\";\n\t}\n\tif(start == end){\n\t\treturn \"\";\n\t}\n\treturn str.substring(start,end);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a substring from the specified String avoiding exceptions. \n */\n", "method_name": "sub", "codes": ["public static String sub(String str,int start,int end){\n\tif(str == null){\n\t\treturn null;\n\t}\n\tif(start < 0){\n\t\tstart = str.length() + start;\n\t}\n\tif(end < 0){\n\t\tend = str.length() + end;\n\t}\n\tif(start < 0){\n\t\tstart = 0;\n\t}\n\tif(end > str.length()){\n\t\tend = str.length();\n\t}\n\tif(start > end){\n\t\treturn \"\";\n\t}\n\tif(start == end){\n\t\treturn \"\";\n\t}\n\treturn str.substring(start,end);\n}"], "code_level": "project_runnable", "_id": "636766ff1a6d9265ec01783b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_sub.class"}
{"generate_results": [{"generate_code": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\tif(str == null || searchStrArray == null || searchStrArray.size() == 0){\n\t\treturn false;\n\t}\n\tfor(String searchStr : searchStrArray){\n\t\tif(str.toLowerCase().contains(searchStr.toLowerCase())){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Case in-sensitive Checks if the String contains any character in the given set of string. \n */\n", "method_name": "containsAnyIgnoreCase", "codes": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n\tif(str == null || searchStrArray == null || searchStrArray.size() == 0){\n\t\treturn false;\n\t}\n\tfor(String searchStr : searchStrArray){\n\t\tif(str.toLowerCase().contains(searchStr.toLowerCase())){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}"], "code_level": "project_runnable", "_id": "6367670b1a6d9265ec017a0f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_containsAnyIgnoreCase.class"}
{"generate_results": [{"generate_code": "public static int indexOf(String str,String searchStr){\n    if(str == null || searchStr == null){\n        return -1;\n    }\n\treturn str.indexOf(searchStr);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}. \n */\n", "method_name": "indexOf", "codes": ["public static int indexOf(String str,String searchStr){\n    if(str == null || searchStr == null){\n        return -1;\n    }\n\treturn str.indexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bc", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_indexOf.class"}
{"generate_results": [{"generate_code": "private static boolean isParameterSeparator(final char c){\n    if(c == ':' || c == '?'){\n\t\treturn true;\n\t}\n\tfor(int i = 0; i < PARAMETER_SEPARATORS.length; i++){\n\t\tif(PARAMETER_SEPARATORS[i] == c){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n", "method_name": "isParameterSeparator", "codes": ["private static boolean isParameterSeparator(final char c){\n    if(c == ':' || c == '?'){\n\t\treturn true;\n\t}\n\tfor(int i = 0; i < PARAMETER_SEPARATORS.length; i++){\n\t\tif(PARAMETER_SEPARATORS[i] == c){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}"], "code_level": "class_runnable", "_id": "636766fc1a6d9265ec0177da", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-db/target/classes/net/hasor/db/jdbc/core/ParsedSql_isParameterSeparator.class"}
{"generate_results": [{"generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    if(array==null)\n\tthrow new NullPointerException();\n\tfinal int length=Array.getLength(array);\n\tfinal Object newArray=Array.newInstance(newArrayComponentType,length+1);\n\tSystem.arraycopy(array,0,newArray,0,length);\n\treturn newArray;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils.copyArrayGrow1(ArrayUtils.java:53)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils.add(ArrayUtils.java:46)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils_copyArrayGrow1.main(ArrayUtils_copyArrayGrow1.java:14)\n", "is_pass": false}], "docstring": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n", "method_name": "copyArrayGrow1", "codes": ["private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    if(array==null)\n\tthrow new NullPointerException();\n\tfinal int length=Array.getLength(array);\n\tfinal Object newArray=Array.newInstance(newArrayComponentType,length+1);\n\tSystem.arraycopy(array,0,newArray,0,length);\n\treturn newArray;\n}"], "code_level": "slib_runnable", "_id": "636767031a6d9265ec0178ef", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-rsf/rsf-framework/target/classes/net/hasor/rsf/protocol/rsf/v1/ArrayUtils_copyArrayGrow1.class"}
{"generate_results": [{"generate_code": "public static String sessionId(){\n    if(Invoker.get() == null) return null;\n\treturn Invoker.get().getSession().getId();\n}", "errormessage": "compile error", "error_detail_message": "WebUdfSource.java:274: error: method get in interface Invoker cannot be applied to given types;\n    if(Invoker.get() == null) return null;\n              ^\n  required: String\n  found:    no arguments\n  reason: actual and formal argument lists differ in length\nWebUdfSource.java:275: error: method get in interface Invoker cannot be applied to given types;\n\treturn Invoker.get().getSession().getId();\n\t              ^\n  required: String\n  found:    no arguments\n  reason: actual and formal argument lists differ in length\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Session ID. \n */\n", "method_name": "sessionId", "codes": ["public static String sessionId(){\n    if(Invoker.get() == null) return null;\n\treturn Invoker.get().getSession().getId();\n}"], "code_level": "plib_runnable", "_id": "636766fe1a6d9265ec017834", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/src/main/java/net/hasor/dataql/fx/web/WebUdfSource_sessionId.java"}
{"generate_results": [{"generate_code": "public Boolean isPartialContentResponse(){\n    if(partialContentResponse == null){\n        partialContentResponse = Boolean.valueOf(CrudUtilHelper.isPartialContentResponse(uriInfo));\n    }\n\treturn partialContentResponse;\n}", "errormessage": "compile error", "error_detail_message": "PaginationHelper.java:97: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n                drc.setOffset(new Integer(0));\n                              ^\nPaginationHelper.java:165: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setOffset(new Integer(offset));\n                                  ^\nPaginationHelper.java:166: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setLimit(new Integer(limit));\n                                 ^\nPaginationHelper.java:211: error: cannot find symbol\n    if(partialContentResponse == null){\n       ^\n  symbol:   variable partialContentResponse\n  location: class PaginationHelper\nPaginationHelper.java:212: error: cannot find symbol\n        partialContentResponse = Boolean.valueOf(CrudUtilHelper.isPartialContentResponse(uriInfo));\n        ^\n  symbol:   variable partialContentResponse\n  location: class PaginationHelper\nPaginationHelper.java:212: error: cannot find symbol\n        partialContentResponse = Boolean.valueOf(CrudUtilHelper.isPartialContentResponse(uriInfo));\n                                                               ^\n  symbol:   method isPartialContentResponse(UriInfo)\n  location: class CrudUtilHelper\nPaginationHelper.java:214: error: cannot find symbol\n\treturn partialContentResponse;\n\t       ^\n  symbol:   variable partialContentResponse\n  location: class PaginationHelper\nPaginationHelper.java:295: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            drc.setOffset(new Integer(0));\n                          ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:28: error: package io.swagger.annotations does not exist\nimport io.swagger.annotations.ApiOperation;\n                             ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:29: error: package io.swagger.jaxrs does not exist\nimport io.swagger.jaxrs.PATCH;\n                       ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:49: error: cannot find symbol\n    @ApiOperation(value = \"persist entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:57: error: cannot find symbol\n    @ApiOperation(value = \"full update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:63: error: cannot find symbol\n    @PATCH\n     ^\n  symbol:   class PATCH\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:66: error: cannot find symbol\n    @ApiOperation(value = \"partial update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:75: error: cannot find symbol\n    @ApiOperation(value = \"remove entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:84: error: cannot find symbol\n    @ApiOperation(value = \"find by ID\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n12 errors\n4 warnings\n", "is_pass": false}], "docstring": "/** \n * Check if the actual response is a Partial Content (HTTP 206 code)\n * @return is partial content or not\n */\n", "method_name": "isPartialContentResponse", "codes": ["public Boolean isPartialContentResponse(){\n    if(partialContentResponse == null){\n        partialContentResponse = Boolean.valueOf(CrudUtilHelper.isPartialContentResponse(uriInfo));\n    }\n\treturn partialContentResponse;\n}"], "code_level": "plib_runnable", "_id": "636766ae1a6d9265ec0175dc", "project_name": "framework-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/pagination/PaginationHelper_isPartialContentResponse.java"}
{"generate_results": [{"generate_code": "private String buildContentRange(){\n    if(paginationConfig.isPaginationEnabled()){\n        if(paginationConfig.isRequestPagination()){\n            if(paginationConfig.isPartialContentResponse()){\n                return \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n            }else{\n                return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n            }\n        }else{\n            return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n        }\n    }else{\n        return \"\";\n    }\n\tString contentRange = \"\";\n\tif(paginationConfig.isPaginationEnabled()){\n\t\tif(paginationConfig.isRequestPagination()){\n\t\t\tif(paginationConfig.isPartialContentResponse()){\n\t\t\t\tcontentRange = \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n\t\t\t}else{\n\t\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t\t}\n\t\t}else{\n\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t}\n\t}\n\treturn contentRange;\n}", "errormessage": "compile error", "error_detail_message": "PaginationHelper.java:97: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n                drc.setOffset(new Integer(0));\n                              ^\nPaginationHelper.java:165: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setOffset(new Integer(offset));\n                                  ^\nPaginationHelper.java:166: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setLimit(new Integer(limit));\n                                 ^\nPaginationHelper.java:226: error: cannot find symbol\n    if(paginationConfig.isPaginationEnabled()){\n                       ^\n  symbol:   method isPaginationEnabled()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:227: error: cannot find symbol\n        if(paginationConfig.isRequestPagination()){\n                           ^\n  symbol:   method isRequestPagination()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:228: error: cannot find symbol\n            if(paginationConfig.isPartialContentResponse()){\n                               ^\n  symbol:   method isPartialContentResponse()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:229: error: cannot find symbol\n                return \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n                                                  ^\n  symbol:   method getOffset()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:229: error: cannot find symbol\n                return \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n                                                                                       ^\n  symbol:   method getLimit()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:229: error: cannot find symbol\n                return \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n                                                                                                                           ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:231: error: cannot find symbol\n                return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n                                                     ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:231: error: cannot find symbol\n                return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n                                                                                              ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:234: error: cannot find symbol\n            return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n                                                 ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:234: error: cannot find symbol\n            return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n                                                                                          ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:240: error: cannot find symbol\n\tif(paginationConfig.isPaginationEnabled()){\n\t                   ^\n  symbol:   method isPaginationEnabled()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:241: error: cannot find symbol\n\t\tif(paginationConfig.isRequestPagination()){\n\t\t                   ^\n  symbol:   method isRequestPagination()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:242: error: cannot find symbol\n\t\t\tif(paginationConfig.isPartialContentResponse()){\n\t\t\t                   ^\n  symbol:   method isPartialContentResponse()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:243: error: cannot find symbol\n\t\t\t\tcontentRange = \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n\t\t\t\t                                          ^\n  symbol:   method getOffset()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:243: error: cannot find symbol\n\t\t\t\tcontentRange = \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n\t\t\t\t                                                                               ^\n  symbol:   method getLimit()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:243: error: cannot find symbol\n\t\t\t\tcontentRange = \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n\t\t\t\t                                                                                                                   ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:245: error: cannot find symbol\n\t\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t\t\t                                             ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:245: error: cannot find symbol\n\t\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t\t\t                                                                                      ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:248: error: cannot find symbol\n\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t\t                                             ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:248: error: cannot find symbol\n\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t\t                                                                                      ^\n  symbol:   method getCount()\n  location: variable paginationConfig of type PaginationHelperConfig\nPaginationHelper.java:316: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            drc.setOffset(new Integer(0));\n                          ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:28: error: package io.swagger.annotations does not exist\nimport io.swagger.annotations.ApiOperation;\n                             ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:29: error: package io.swagger.jaxrs does not exist\nimport io.swagger.jaxrs.PATCH;\n                       ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:49: error: cannot find symbol\n    @ApiOperation(value = \"persist entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:57: error: cannot find symbol\n    @ApiOperation(value = \"full update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:63: error: cannot find symbol\n    @PATCH\n     ^\n  symbol:   class PATCH\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:66: error: cannot find symbol\n    @ApiOperation(value = \"partial update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:75: error: cannot find symbol\n    @ApiOperation(value = \"remove entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:84: error: cannot find symbol\n    @ApiOperation(value = \"find by ID\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n28 errors\n4 warnings\n", "is_pass": false}], "docstring": "/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n", "method_name": "buildContentRange", "codes": ["private String buildContentRange(){\n    if(paginationConfig.isPaginationEnabled()){\n        if(paginationConfig.isRequestPagination()){\n            if(paginationConfig.isPartialContentResponse()){\n                return \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n            }else{\n                return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n            }\n        }else{\n            return \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n        }\n    }else{\n        return \"\";\n    }\n\tString contentRange = \"\";\n\tif(paginationConfig.isPaginationEnabled()){\n\t\tif(paginationConfig.isRequestPagination()){\n\t\t\tif(paginationConfig.isPartialContentResponse()){\n\t\t\t\tcontentRange = \"items \" + paginationConfig.getOffset() + \"-\" + paginationConfig.getLimit() + \"/\" + paginationConfig.getCount();\n\t\t\t}else{\n\t\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t\t}\n\t\t}else{\n\t\t\tcontentRange = \"items 0-\" + (paginationConfig.getCount() - 1) + \"/\" + paginationConfig.getCount();\n\t\t}\n\t}\n\treturn contentRange;\n}"], "code_level": "class_runnable", "_id": "636766ae1a6d9265ec0175d8", "project_name": "framework-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/pagination/PaginationHelper_buildContentRange.java"}
{"generate_results": [{"generate_code": "private static String javaCharset(String charset){\nif(charset == null) return null;\nString javaCharset = MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));\nif(javaCharset == null) javaCharset = charset;\nreturn javaCharset;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n", "method_name": "javaCharset", "codes": ["private static String javaCharset(String charset){\nif(charset == null) return null;\nString javaCharset = MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));\nif(javaCharset == null) javaCharset = charset;\nreturn javaCharset;\n}"], "code_level": "class_runnable", "_id": "636766f01a6d9265ec01763e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/util/MimeUtility_javaCharset.class"}
{"generate_results": [{"generate_code": "private TreeNode<T> rotateRight(TreeNode<T> node){\n    if(node == null) return null;\n\tTreeNode<T> newRoot = node.getLeft();\n\tTreeNode<T> newLeft = newRoot.getRight();\n\tnewRoot.setRight(node);\n\tnode.setLeft(newLeft);\n\tnode.updateHeightAndSubtreeSize();\n\tnewRoot.updateHeightAndSubtreeSize();\n\treturn newRoot;\n}", "errormessage": "compile error", "error_detail_message": "AVLTree.java:492: error: cannot find symbol\n\tnewRoot.setRight(node);\n\t       ^\n  symbol:   method setRight(TreeNode<T>)\n  location: variable newRoot of type TreeNode<T>\n  where T is a type-variable:\n    T extends Object declared in class AVLTree\nAVLTree.java:493: error: cannot find symbol\n\tnode.setLeft(newLeft);\n\t    ^\n  symbol:   method setLeft(TreeNode<T>)\n  location: variable node of type TreeNode<T>\n  where T is a type-variable:\n    T extends Object declared in class AVLTree\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}\n */\n", "method_name": "rotateRight", "codes": ["private TreeNode<T> rotateRight(TreeNode<T> node){\n    if(node == null) return null;\n\tTreeNode<T> newRoot = node.getLeft();\n\tTreeNode<T> newLeft = newRoot.getRight();\n\tnewRoot.setRight(node);\n\tnode.setLeft(newLeft);\n\tnode.updateHeightAndSubtreeSize();\n\tnewRoot.updateHeightAndSubtreeSize();\n\treturn newRoot;\n}"], "code_level": "file_runnable", "_id": "636767441a6d9265ec017cc1", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/AVLTree_rotateRight.java"}
{"generate_results": [{"generate_code": "public static final <V>void swap(V[] arr,int i,int j){\n    if(i==j)return;\n\tV tmp=arr[i];\n\tarr[i]=arr[j];\n\tarr[j]=tmp;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Swaps the two elements at the specified indices in the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param i the index of the first element\n * @param j the index of the second element\n */\n", "method_name": "swap", "codes": ["public static final <V>void swap(V[] arr,int i,int j){\n    if(i==j)return;\n\tV tmp=arr[i];\n\tarr[i]=arr[j];\n\tarr[j]=tmp;\n}"], "code_level": "self_contained", "_id": "636767551a6d9265ec017f3f", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/ArrayUtil_swap.class"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n    if(start < 0) throw new IllegalArgumentException(\"start must be >= 0\");\nreturn () -> String.valueOf(start++);\n}", "errormessage": "compile error", "error_detail_message": "SupplierUtil.java:188: error: local variables referenced from a lambda expression must be final or effectively final\nreturn () -> String.valueOf(start++);\n                            ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Create a string supplier which returns unique strings. The returns strings are simply integers starting from start.\n * @param start where to start the sequence\n * @return a string supplier\n */\n", "method_name": "createStringSupplier", "codes": ["@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n    if(start < 0) throw new IllegalArgumentException(\"start must be >= 0\");\nreturn () -> String.valueOf(start++);\n}"], "code_level": "slib_runnable", "_id": "6367675c1a6d9265ec018058", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/SupplierUtil_createStringSupplier.java"}
{"generate_results": [{"generate_code": "@Override public ListNode<E> previousNode(){\n    if(prev==null)\n        return null;\nreturn prev;\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:1224: error: cannot find symbol\n    if(prev==null)\n       ^\n  symbol:   variable prev\n  location: class DoublyLinkedList<E>.ListNodeIteratorImpl\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:1226: error: cannot find symbol\nreturn prev;\n       ^\n  symbol:   variable prev\n  location: class DoublyLinkedList<E>.ListNodeIteratorImpl\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\n2 errors\n", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "previousNode", "codes": ["@Override public ListNode<E> previousNode(){\n    if(prev==null)\n        return null;\nreturn prev;\n}"], "code_level": "class_runnable", "_id": "636767501a6d9265ec017e86", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_previousNode.java"}
{"generate_results": [{"generate_code": "public static long factorial(int n){\n    if(n == 0){\n        return 1;\n    }\n\tlong result = 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tresult *= i;\n\t}\n\treturn result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Calculate the factorial of $n$.\n * @param n the input number\n * @return the factorial\n */\n", "method_name": "factorial", "codes": ["public static long factorial(int n){\n    if(n == 0){\n        return 1;\n    }\n\tlong result = 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tresult *= i;\n\t}\n\treturn result;\n}"], "code_level": "self_contained", "_id": "636767581a6d9265ec017fc4", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/MathUtil_factorial.class"}
{"generate_results": [{"generate_code": "private boolean unlink(ListNodeImpl<E> node){\n\tif(node == null){\n\t\treturn false;\n\t}\n\tif(node.getPrev() == null){\n\t\thead = node.getNext();\n\t}else{\n\t\tnode.getPrev().setNext(node.getNext());\n\t}\n\tif(node.getNext() == null){\n\t\tlast = node.getPrev();\n\t}else{\n\t\tnode.getNext().setPrev(node.getPrev());\n\t}\n\tnode.setNext(null);\n\tnode.setPrev(null);\n\tsize--;\n\texpectedModCount++;\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:247: error: cannot find symbol\n\t\tnode.getPrev().setNext(node.getNext());\n\t\t              ^\n  symbol:   method setNext(ListNodeImpl<E>)\n  location: class ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:250: error: cannot find symbol\n\t\tlast = node.getPrev();\n\t\t^\n  symbol:   variable last\n  location: class DoublyLinkedList<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:252: error: cannot find symbol\n\t\tnode.getNext().setPrev(node.getPrev());\n\t\t              ^\n  symbol:   method setPrev(ListNodeImpl<E>)\n  location: class ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:254: error: cannot find symbol\n\tnode.setNext(null);\n\t    ^\n  symbol:   method setNext(<null>)\n  location: variable node of type ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:255: error: cannot find symbol\n\tnode.setPrev(null);\n\t    ^\n  symbol:   method setPrev(<null>)\n  location: variable node of type ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:257: error: cannot find symbol\n\texpectedModCount++;\n\t^\n  symbol:   variable expectedModCount\n  location: class DoublyLinkedList<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\n6 errors\n", "is_pass": false}], "docstring": "/** \n * Remove the non null  {@code node} from the list. \n */\n", "method_name": "unlink", "codes": ["private boolean unlink(ListNodeImpl<E> node){\n\tif(node == null){\n\t\treturn false;\n\t}\n\tif(node.getPrev() == null){\n\t\thead = node.getNext();\n\t}else{\n\t\tnode.getPrev().setNext(node.getNext());\n\t}\n\tif(node.getNext() == null){\n\t\tlast = node.getPrev();\n\t}else{\n\t\tnode.getNext().setPrev(node.getPrev());\n\t}\n\tnode.setNext(null);\n\tnode.setPrev(null);\n\tsize--;\n\texpectedModCount++;\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "636767631a6d9265ec018171", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_unlink.java"}
{"generate_results": [{"generate_code": "public static final <V>void reverse(V[] arr,int from,int to){\n\tif(arr==null||arr.length==0||from<0||to<0||from>to||from>=arr.length||to>=arr.length){\n\t\treturn;\n\t}\n\tfor(int i=from,j=to;i<j;i++,j--){\n\t\tswap(arr,i,j);\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reverses the order of the elements in the specified range within the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param from the index of the first element (inclusive) inside the range to reverse\n * @param to the index of the last element (inclusive) inside the range to reverse\n */\n", "method_name": "reverse", "codes": ["public static final <V>void reverse(V[] arr,int from,int to){\n\tif(arr==null||arr.length==0||from<0||to<0||from>to||from>=arr.length||to>=arr.length){\n\t\treturn;\n\t}\n\tfor(int i=from,j=to;i<j;i++,j--){\n\t\tswap(arr,i,j);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767491a6d9265ec017d90", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/ArrayUtil_reverse.class"}
{"generate_results": [{"generate_code": "private void moveAllListNodes(DoublyLinkedList<E> list){\n    if(list.isEmpty()){\n        return;\n    }\n\tListNodeImpl<E> node = list.getFirstNode();\n\twhile(node!= null){\n\t\taddListNode(node);\n\t\tnode = node.getNext();\n\t}\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:141: error: incompatible types: ListNode<E> cannot be converted to ListNodeImpl<E>\n\tListNodeImpl<E> node = list.getFirstNode();\n\t                                        ^\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\n1 error\n", "is_pass": false}], "docstring": "/** \n * Atomically moves all  {@link ListNode ListNodes} from {@code list} to this list as if eachnode was removed with  {@link #removeListNode(ListNodeImpl)} from {@code list} andsubsequently added to this list by  {@link #addListNode(ListNodeImpl)}.\n */\n", "method_name": "moveAllListNodes", "codes": ["private void moveAllListNodes(DoublyLinkedList<E> list){\n    if(list.isEmpty()){\n        return;\n    }\n\tListNodeImpl<E> node = list.getFirstNode();\n\twhile(node!= null){\n\t\taddListNode(node);\n\t\tnode = node.getNext();\n\t}\n}"], "code_level": "class_runnable", "_id": "6367674a1a6d9265ec017da9", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_moveAllListNodes.java"}
{"generate_results": [{"generate_code": "public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    if(graph==null)\n\tthrow new NullPointerException(\"graph is null\");\n\treturn new IsomorphicGraphMapping<V,E>(graph,graph);\n}", "errormessage": "compile error", "error_detail_message": "IsomorphicGraphMapping.java:341: error: no suitable constructor found for IsomorphicGraphMapping(Graph<V,E>,Graph<V,E>)\n\treturn new IsomorphicGraphMapping<V,E>(graph,graph);\n\t       ^\n    constructor IsomorphicGraphMapping.IsomorphicGraphMapping(GraphOrdering<V,E>,GraphOrdering<V,E>,int[],int[]) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor IsomorphicGraphMapping.IsomorphicGraphMapping(Map<V,V>,Map<V,V>,Graph<V,E>,Graph<V,E>) is not applicable\n      (actual and formal argument lists differ in length)\n  where V,E are type-variables:\n    V extends Object declared in method <V,E>identity(Graph<V,E>)\n    E extends Object declared in method <V,E>identity(Graph<V,E>)\n1 error\n", "is_pass": false}], "docstring": "/** \n * Computes an identity automorphism (i.e. a self-mapping of a graph in which each vertex also maps to itself).\n * @param graph the input graph\n * @param < V > the graph vertex type\n * @param < E > the graph edge type\n * @return a mapping from graph to graph\n */\n", "method_name": "identity", "codes": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    if(graph==null)\n\tthrow new NullPointerException(\"graph is null\");\n\treturn new IsomorphicGraphMapping<V,E>(graph,graph);\n}"], "code_level": "project_runnable", "_id": "6367675f1a6d9265ec0180d3", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping_identity.java"}
{"generate_results": [{"generate_code": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n if (partitionA == null || partitionB == null) {\n throw new IllegalArgumentException(\"partitionA and partitionB must not be null\");\n }\n if (partitionA.size() == 0 || partitionB.size() == 0) {\n throw new IllegalArgumentException(\"partitionA and partitionB must not be empty\");\n }\n if (partitionA.size() > partitionB.size()) {\n throw new IllegalArgumentException(\"partitionA must not be larger than partitionB\");\n }\n if (partitionA.size() == partitionB.size()) {\n throw new IllegalArgumentException(\"partitionA and partitionB must not be equal\");\n }\n if (partitionA.size() == 1) {\n throw new IllegalArgumentException(\"partitionA must not be a singleton\");\n }\n if (partitionB.size() == 1) {\n throw new IllegalArgumentException(\"partitionB must not be a singleton\");\n }\n if (partitionA.size() == 2) {\n throw new IllegalArgumentException(\"partitionA must not be a pair\");\n }\n if (partitionB.size() == 2) {\n throw new IllegalArgumentException(\"partitionB must not be a pair\");\n }\n if (partitionA.size() == 3) {\n throw new IllegalArgumentException(\"partitionA must not be a triple\");\n }\n if (partitionB.size() == 3) {\n throw new IllegalArgumentException(\"partitionB must not be a triple\");\n }\n if (partitionA.size() == 4) {\n throw new IllegalArgumentException(\"partitionA must not be a quadruple\");\n }\n if (partitionB.size() == 4) {\n throw new IllegalArgumentException(\"partitionB must not be a quadruple\");\n }\n if (partitionA.size() == 5) {\n throw new IllegalArgumentException(\"partitionA must not be a quintuple\");\n }\n if (partitionB.size() == 5) {\n throw new IllegalArgumentException(\"partitionB must not be a quintuple\");\n }\n if (partitionA.size() == 6) {\n throw new IllegalArgumentException(\"partitionA must not be a sextuple\");\n }\n if (partitionB.size() == 6) {\n throw new IllegalArgumentException(\"partitionB must not be a sextuple\");\n }\n if (partitionA.size() == 7) {\n throw new IllegalArgumentException(\"partitionA must not be a septuple\");\n }\n if (partitionB.size() == 7) {\n throw new IllegalArgumentException(\"partitionB must not be a septuple\");\n }\n if (partitionA.size() == 8) {\n throw new IllegalArgumentException(\"partitionA must not be an octuple\");\n }\n if (partitionB.size() == 8) {\n throw new IllegalArgumentException(\"partitionB must not be an octuple\");\n }\n if (partitionA.size() == 9) {\n throw new IllegalArgumentException(\"partitionA must not be a nonuple\");\n }\n if (partitionB.size() == 9) {\n throw new IllegalArgumentException(\"partitionB must not be a nonuple\");\n }\n if (partitionA.size() == 10) {\n throw new IllegalArgumentException(\"partitionA must not be a decuple\");\n }\n if (partitionB.size() == 10) {\n throw new IllegalArgumentException(\"partitionB must not be a decuple\");\n }\n if (partitionA.size() == 11) {\n throw new IllegalArgumentException(\"partitionA must not be a undecuple\");\n }\n if (partitionB.size() == 11) {\n throw new IllegalArgumentException(\"partitionB must not be a undecuple\");\n }\n if (partitionA.size() == 12) {\n throw new IllegalArgumentException(\"partitionA must not be a duodecuple\");\n }\n if (partitionB.size() == 12) {\n throw new IllegalArgumentException(\"partitionB must not be a duodecuple\");\n }\n if (partitionA.size() == 13) {\n throw new IllegalArgumentException(\"partitionA must not be a tredecuple\");\n }\n if (partitionB.size() == 13) {\n throw new IllegalArgumentException(\"partitionB must not be a tredecuple\");\n }\n if (partitionA.size() == 14) {\n throw new IllegalArgumentException(\"partitionA must not be a quattuordecuple\");\n }\n if (partitionB.size() == 14) {\n throw new IllegalArgumentException(\"partitionB must not be a quattuordecuple\");\n }\n if (partitionA.size() == 15) {\n throw new IllegalArgumentException(\"partitionA must not be a quindecuple\");\n }\n if (partitionB.size() == 15) {\n throw new IllegalArgumentException(\"partitionB", "errormessage": "compile error", "error_detail_message": "CompleteBipartiteGraphGenerator.java:181: error: unclosed string literal\n throw new IllegalArgumentException(\"partitionB}\n                                    ^\nCompleteBipartiteGraphGenerator.java:181: error: reached end of file while parsing\n throw new IllegalArgumentException(\"partitionB}\n                                                ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Construct a complete bipartite graph\n */\n", "method_name": "generateGraph", "codes": ["@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n if (partitionA == null || partitionB == null) {\n throw new IllegalArgumentException(\"partitionA and partitionB must not be null\");\n }\n if (partitionA.size() == 0 || partitionB.size() == 0) {\n throw new IllegalArgumentException(\"partitionA and partitionB must not be empty\");\n }\n if (partitionA.size() > partitionB.size()) {\n throw new IllegalArgumentException(\"partitionA must not be larger than partitionB\");\n }\n if (partitionA.size() == partitionB.size()) {\n throw new IllegalArgumentException(\"partitionA and partitionB must not be equal\");\n }\n if (partitionA.size() == 1) {\n throw new IllegalArgumentException(\"partitionA must not be a singleton\");\n }\n if (partitionB.size() == 1) {\n throw new IllegalArgumentException(\"partitionB must not be a singleton\");\n }\n if (partitionA.size() == 2) {\n throw new IllegalArgumentException(\"partitionA must not be a pair\");\n }\n if (partitionB.size() == 2) {\n throw new IllegalArgumentException(\"partitionB must not be a pair\");\n }\n if (partitionA.size() == 3) {\n throw new IllegalArgumentException(\"partitionA must not be a triple\");\n }\n if (partitionB.size() == 3) {\n throw new IllegalArgumentException(\"partitionB must not be a triple\");\n }\n if (partitionA.size() == 4) {\n throw new IllegalArgumentException(\"partitionA must not be a quadruple\");\n }\n if (partitionB.size() == 4) {\n throw new IllegalArgumentException(\"partitionB must not be a quadruple\");\n }\n if (partitionA.size() == 5) {\n throw new IllegalArgumentException(\"partitionA must not be a quintuple\");\n }\n if (partitionB.size() == 5) {\n throw new IllegalArgumentException(\"partitionB must not be a quintuple\");\n }\n if (partitionA.size() == 6) {\n throw new IllegalArgumentException(\"partitionA must not be a sextuple\");\n }\n if (partitionB.size() == 6) {\n throw new IllegalArgumentException(\"partitionB must not be a sextuple\");\n }\n if (partitionA.size() == 7) {\n throw new IllegalArgumentException(\"partitionA must not be a septuple\");\n }\n if (partitionB.size() == 7) {\n throw new IllegalArgumentException(\"partitionB must not be a septuple\");\n }\n if (partitionA.size() == 8) {\n throw new IllegalArgumentException(\"partitionA must not be an octuple\");\n }\n if (partitionB.size() == 8) {\n throw new IllegalArgumentException(\"partitionB must not be an octuple\");\n }\n if (partitionA.size() == 9) {\n throw new IllegalArgumentException(\"partitionA must not be a nonuple\");\n }\n if (partitionB.size() == 9) {\n throw new IllegalArgumentException(\"partitionB must not be a nonuple\");\n }\n if (partitionA.size() == 10) {\n throw new IllegalArgumentException(\"partitionA must not be a decuple\");\n }\n if (partitionB.size() == 10) {\n throw new IllegalArgumentException(\"partitionB must not be a decuple\");\n }\n if (partitionA.size() == 11) {\n throw new IllegalArgumentException(\"partitionA must not be a undecuple\");\n }\n if (partitionB.size() == 11) {\n throw new IllegalArgumentException(\"partitionB must not be a undecuple\");\n }\n if (partitionA.size() == 12) {\n throw new IllegalArgumentException(\"partitionA must not be a duodecuple\");\n }\n if (partitionB.size() == 12) {\n throw new IllegalArgumentException(\"partitionB must not be a duodecuple\");\n }\n if (partitionA.size() == 13) {\n throw new IllegalArgumentException(\"partitionA must not be a tredecuple\");\n }\n if (partitionB.size() == 13) {\n throw new IllegalArgumentException(\"partitionB must not be a tredecuple\");\n }\n if (partitionA.size() == 14) {\n throw new IllegalArgumentException(\"partitionA must not be a quattuordecuple\");\n }\n if (partitionB.size() == 14) {\n throw new IllegalArgumentException(\"partitionB must not be a quattuordecuple\");\n }\n if (partitionA.size() == 15) {\n throw new IllegalArgumentException(\"partitionA must not be a quindecuple\");\n }\n if (partitionB.size() == 15) {\n throw new IllegalArgumentException(\"partitionB"], "code_level": "class_runnable", "_id": "636767641a6d9265ec01817d", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator_generateGraph.java"}
{"generate_results": [{"generate_code": "void insertBefore(Bucket bucket){\n\tif(bucket==null){\n\t\tthrow new NullPointerException(\"bucket\");\n\t}\n\tif(bucket.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.prev\");\n\t}\n\tif(bucket.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.next\");\n\t}\n\tif(bucket.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.bucketList\");\n\t}\n\tif(bucket.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.vertices\");\n\t}\n\tif(bucket.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head\");\n\t}\n\tif(bucket.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.bucketList\");\n\t}\n\tif(bucket.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.prev\");\n\t}\n\tif(bucket.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.next\");\n\t}\n\tif(bucket.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.vertices\");\n\t}\n\tif(bucket.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head\");\n\t}\n\tif(bucket.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.prev\");\n\t}\n\tif(bucket.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.next\");\n\t}\n\tif(bucket.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head\");\n\t}\n\tif(bucket.head.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.prev\");\n\t}\n\tif(bucket.head.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.next\");\n\t}\n\tif(bucket.head.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head\");\n\t}\n\tif(bucket.head.head.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.prev\");\n\t}\n\tif(bucket.head.head.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.next\");\n\t}\n\tif(bucket.head.head.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head\");\n\t}\n\tif(bucket.head.head.head.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.head.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.prev\");\n\t}\n\tif(bucket.head.head.head.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.next\");\n\t}\n\tif(bucket.head.head.head.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.head\");\n\t}\n\tif(", "errormessage": "compile error", "error_detail_message": "LexBreadthFirstIterator.java:458: error: illegal start of expression\n            void addVertex(V vertex)\n            ^\nLexBreadthFirstIterator.java:458: error: ')' expected\n            void addVertex(V vertex)\n                ^\nLexBreadthFirstIterator.java:458: error: ')' expected\n            void addVertex(V vertex)\n                            ^\nLexBreadthFirstIterator.java:458: error: not a statement\n            void addVertex(V vertex)\n                             ^\nLexBreadthFirstIterator.java:458: error: ';' expected\n            void addVertex(V vertex)\n                                   ^\nLexBreadthFirstIterator.java:468: error: ';' expected\n            V poll()\n                  ^\nLexBreadthFirstIterator.java:484: error: ';' expected\n            boolean isEmpty()\n                           ^\nLexBreadthFirstIterator.java:490: error: reached end of file while parsing\n}\n ^\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Inserts this bucket in the data structure before the  {@code bucket}.\n * @param bucket the bucket, that will be the next to this bucket.\n */\n", "method_name": "insertBefore", "codes": ["void insertBefore(Bucket bucket){\n\tif(bucket==null){\n\t\tthrow new NullPointerException(\"bucket\");\n\t}\n\tif(bucket.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.prev\");\n\t}\n\tif(bucket.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.next\");\n\t}\n\tif(bucket.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.bucketList\");\n\t}\n\tif(bucket.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.vertices\");\n\t}\n\tif(bucket.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head\");\n\t}\n\tif(bucket.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.bucketList\");\n\t}\n\tif(bucket.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.prev\");\n\t}\n\tif(bucket.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.next\");\n\t}\n\tif(bucket.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.vertices\");\n\t}\n\tif(bucket.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head\");\n\t}\n\tif(bucket.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.prev\");\n\t}\n\tif(bucket.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.next\");\n\t}\n\tif(bucket.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head\");\n\t}\n\tif(bucket.head.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.prev\");\n\t}\n\tif(bucket.head.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.next\");\n\t}\n\tif(bucket.head.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head\");\n\t}\n\tif(bucket.head.head.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.prev\");\n\t}\n\tif(bucket.head.head.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.next\");\n\t}\n\tif(bucket.head.head.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head\");\n\t}\n\tif(bucket.head.head.head.head.head.bucketList!=this){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.bucketList\");\n\t}\n\tif(bucket.head.head.head.head.head.prev==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.prev\");\n\t}\n\tif(bucket.head.head.head.head.head.next==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.next\");\n\t}\n\tif(bucket.head.head.head.head.head.vertices.isEmpty()){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.vertices\");\n\t}\n\tif(bucket.head.head.head.head.head.head==null){\n\t\tthrow new IllegalArgumentException(\"bucket.head.head.head.head.head.head\");\n\t}\n\tif("], "code_level": "class_runnable", "_id": "636767531a6d9265ec017efb", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator_insertBefore.java"}
{"generate_results": [{"generate_code": "@Override public boolean hasNext(){\n\tif (current == null) {\n\t\treturn false;\n\t}\n\tif (next!= null) {\n\t\treturn true;\n\t}\n\tif (bucketList.isEmpty()) {\n\t\treturn false;\n\t}\n\tif (current == null) {\n\t\tcurrent = bucketList.poll();\n\t\thead = current;\n\t\tnext = current;\n\t\tprev = current;\n\t}\n\twhile (next == null) {\n\t\tif (bucketList.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tcurrent = bucketList.poll();\n\t\tnext = current;\n\t\tprev = current;\n\t}\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "LexBreadthFirstIterator.java:91: error: cannot find symbol\n\tif (next!= null) {\n\t    ^\n  symbol:   variable next\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:94: error: cannot find symbol\n\tif (bucketList.isEmpty()) {\n\t              ^\n  symbol:   method isEmpty()\n  location: variable bucketList of type LexBreadthFirstIterator<V,E>.BucketList\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:99: error: cannot find symbol\n\t\thead = current;\n\t\t^\n  symbol:   variable head\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:100: error: cannot find symbol\n\t\tnext = current;\n\t\t^\n  symbol:   variable next\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:101: error: cannot find symbol\n\t\tprev = current;\n\t\t^\n  symbol:   variable prev\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:103: error: cannot find symbol\n\twhile (next == null) {\n\t       ^\n  symbol:   variable next\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:104: error: cannot find symbol\n\t\tif (bucketList.isEmpty()) {\n\t\t              ^\n  symbol:   method isEmpty()\n  location: variable bucketList of type LexBreadthFirstIterator<V,E>.BucketList\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:108: error: cannot find symbol\n\t\tnext = current;\n\t\t^\n  symbol:   variable next\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:109: error: cannot find symbol\n\t\tprev = current;\n\t\t^\n  symbol:   variable prev\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\n9 errors\n", "is_pass": false}], "docstring": "/** \n * Checks whether there exist unvisited vertices.\n * @return true if there exist unvisited vertices.\n */\n", "method_name": "hasNext", "codes": ["@Override public boolean hasNext(){\n\tif (current == null) {\n\t\treturn false;\n\t}\n\tif (next!= null) {\n\t\treturn true;\n\t}\n\tif (bucketList.isEmpty()) {\n\t\treturn false;\n\t}\n\tif (current == null) {\n\t\tcurrent = bucketList.poll();\n\t\thead = current;\n\t\tnext = current;\n\t\tprev = current;\n\t}\n\twhile (next == null) {\n\t\tif (bucketList.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tcurrent = bucketList.poll();\n\t\tnext = current;\n\t\tprev = current;\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f63", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator_hasNext.java"}
{"generate_results": [{"generate_code": "void removeSelf(){\n\tif(prev!=null){\n\t\tprev.next=next;\n\t}\n\tif(next!=null){\n\t\tnext.prev=prev;\n\t}\n\tprev=null;\n\tnext=null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Removes this bucket from the data structure.\n */\n", "method_name": "removeSelf", "codes": ["void removeSelf(){\n\tif(prev!=null){\n\t\tprev.next=next;\n\t}\n\tif(next!=null){\n\t\tnext.prev=prev;\n\t}\n\tprev=null;\n\tnext=null;\n}"], "code_level": "class_runnable", "_id": "6367675a1a6d9265ec018010", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/traverse/LexBreadthFirstIterator_removeSelf.class"}
{"generate_results": [{"generate_code": "private Set<V> initVisibleVertices(){\n    if(visibleVertices==null){\nvisibleVertices=initVisibleVertices();\n}\nSet<V> visibleVertices=new HashSet<V>();\nfor(E e:graph.edgeSet()){\nvisibleVertices.add(graph.getEdgeSource(e));\nvisibleVertices.add(graph.getEdgeTarget(e));\n}\nreturn visibleVertices;\n}", "errormessage": "compile error", "error_detail_message": "PathGrowingWeightedMatching.java:139: error: cannot find symbol\n    if(visibleVertices==null){\n       ^\n  symbol:   variable visibleVertices\n  location: class PathGrowingWeightedMatching<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class PathGrowingWeightedMatching\n    E extends Object declared in class PathGrowingWeightedMatching\nPathGrowingWeightedMatching.java:140: error: cannot find symbol\nvisibleVertices=initVisibleVertices();\n^\n  symbol:   variable visibleVertices\n  location: class PathGrowingWeightedMatching<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class PathGrowingWeightedMatching\n    E extends Object declared in class PathGrowingWeightedMatching\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n", "method_name": "initVisibleVertices", "codes": ["private Set<V> initVisibleVertices(){\n    if(visibleVertices==null){\nvisibleVertices=initVisibleVertices();\n}\nSet<V> visibleVertices=new HashSet<V>();\nfor(E e:graph.edgeSet()){\nvisibleVertices.add(graph.getEdgeSource(e));\nvisibleVertices.add(graph.getEdgeTarget(e));\n}\nreturn visibleVertices;\n}"], "code_level": "class_runnable", "_id": "6367674b1a6d9265ec017dc0", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/matching/PathGrowingWeightedMatching_initVisibleVertices.java"}
{"generate_results": [{"generate_code": "public void removeFromTreeEdgeList(){\n\tif(prev!=null){\n\t\tprev.next=next;\n\t\tnext.prev=prev;\n\t\tprev=null;\n\t\tnext=null;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "BlossomVTreeEdge.java:102: error: cannot find symbol\n\t\tprev.next=next;\n\t\t    ^\n  symbol:   variable next\n  location: variable prev of type BlossomVTreeEdge[]\nBlossomVTreeEdge.java:103: error: cannot find symbol\n\t\tnext.prev=prev;\n\t\t    ^\n  symbol:   variable prev\n  location: variable next of type BlossomVTreeEdge[]\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Removes this edge from both doubly linked lists of tree edges.\n */\n", "method_name": "removeFromTreeEdgeList", "codes": ["public void removeFromTreeEdgeList(){\n\tif(prev!=null){\n\t\tprev.next=next;\n\t\tnext.prev=prev;\n\t\tprev=null;\n\t\tnext=null;\n\t}\n}"], "code_level": "class_runnable", "_id": "6367675c1a6d9265ec01805b", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVTreeEdge_removeFromTreeEdgeList.java"}
{"generate_results": [{"generate_code": "protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    if(touchingVerticesToEdgeMap==null){\n\t\ttouchingVerticesToEdgeMap=new HashMap<>();\n\t}\n\tSet<E> edges=touchingVerticesToEdgeMap.get(Pair.of(sourceVertex,targetVertex));\n\tif(edges==null){\n\t\tedges=new HashSet<>();\n\t\ttouchingVerticesToEdgeMap.put(Pair.of(sourceVertex,targetVertex),edges);\n\t}\n\tedges.add(e);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n", "method_name": "addToIndex", "codes": ["protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    if(touchingVerticesToEdgeMap==null){\n\t\ttouchingVerticesToEdgeMap=new HashMap<>();\n\t}\n\tSet<E> edges=touchingVerticesToEdgeMap.get(Pair.of(sourceVertex,targetVertex));\n\tif(edges==null){\n\t\tedges=new HashSet<>();\n\t\ttouchingVerticesToEdgeMap.put(Pair.of(sourceVertex,targetVertex),edges);\n\t}\n\tedges.add(e);\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180fd", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics_addToIndex.class"}
{"generate_results": [{"generate_code": "public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    if(box.getWidth()<=0)\n\treturn null;\n\tdouble x = box.getCenterX();\n\tdouble y = box.getCenterY();\n\tdouble w = box.getWidth();\n\tdouble h = box.getHeight();\n\tBox2D left = new Box2D(x-w/2,y-h/2,w/2,h);\n\tBox2D right = new Box2D(x+w/2,y-h/2,w/2,h);\n\treturn new Pair<Box2D,Box2D>(left,right);\n}", "errormessage": "compile error", "error_detail_message": "Boxes.java:60: error: cannot find symbol\n\tdouble x = box.getCenterX();\n\t              ^\n  symbol:   method getCenterX()\n  location: variable box of type Box2D\nBoxes.java:61: error: cannot find symbol\n\tdouble y = box.getCenterY();\n\t              ^\n  symbol:   method getCenterY()\n  location: variable box of type Box2D\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Split a box along the x axis into two equal boxes.\n * @param box the box to split\n * @return a pair with the two resulting boxes\n */\n", "method_name": "splitAlongXAxis", "codes": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    if(box.getWidth()<=0)\n\treturn null;\n\tdouble x = box.getCenterX();\n\tdouble y = box.getCenterY();\n\tdouble w = box.getWidth();\n\tdouble h = box.getHeight();\n\tBox2D left = new Box2D(x-w/2,y-h/2,w/2,h);\n\tBox2D right = new Box2D(x+w/2,y-h/2,w/2,h);\n\treturn new Pair<Box2D,Box2D>(left,right);\n}"], "code_level": "project_runnable", "_id": "636767521a6d9265ec017ecc", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/drawing/model/Boxes_splitAlongXAxis.java"}
{"generate_results": [{"generate_code": "public static boolean equals(Point2D p1,Point2D p2){\n    if(p1==null||p2==null)return false;\n\treturn TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getX(),p2.getX())==0&&TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getY(),p2.getY())==0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compare two points for equality using tolerance 1e-9.\n * @param p1 the first point\n * @param p2 the second point\n * @return whether the two points are equal or not\n */\n", "method_name": "equals", "codes": ["public static boolean equals(Point2D p1,Point2D p2){\n    if(p1==null||p2==null)return false;\n\treturn TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getX(),p2.getX())==0&&TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getY(),p2.getY())==0;\n}"], "code_level": "project_runnable", "_id": "636767531a6d9265ec017ef1", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/drawing/model/Points_equals.class"}
{"generate_results": [{"generate_code": "@Override public int compare(Double o1,Double o2){\n if (o1 == o2) return 0;\n if (o1 == null) return -1;\n if (o2 == null) return 1;\n double diff = o1 - o2;\n if (diff < -epsilon) return -1;\n if (diff > epsilon) return 1;\n return 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares two floating point values. Returns 0 if they are equal, -1 if  {@literal o1 < o2}, 1 otherwise\n * @param o1 the first value\n * @param o2 the second value\n * @return 0 if they are equal, -1 if {@literal o1 < o2}, 1 otherwise\n */\n", "method_name": "compare", "codes": ["@Override public int compare(Double o1,Double o2){\n if (o1 == o2) return 0;\n if (o1 == null) return -1;\n if (o2 == null) return 1;\n double diff = o1 - o2;\n if (diff < -epsilon) return -1;\n if (diff > epsilon) return 1;\n return 0;\n}"], "code_level": "slib_runnable", "_id": "6367674a1a6d9265ec017dab", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/util/ToleranceDoubleComparator_compare.class"}
{"generate_results": [{"generate_code": "public String toString(){\n    if(isEmpty()) return \"[]\";\n\tString s = \"\";\n\tfor(int i = 0; i < vs.length; i++){\n\t\ts += vs[i] + \" \";\n\t}\n\treturn s;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a textual representation of the queue.\n * @return a textual representation of the queue.\n */\n", "method_name": "toString", "codes": ["public String toString(){\n    if(isEmpty()) return \"[]\";\n\tString s = \"\";\n\tfor(int i = 0; i < vs.length; i++){\n\t\ts += vs[i] + \" \";\n\t}\n\treturn s;\n}"], "code_level": "class_runnable", "_id": "6367674f1a6d9265ec017e74", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/util/FixedSizeIntegerQueue_toString.class"}
{"generate_results": [{"generate_code": "private int computeBinaryLog(int n){\n    if(n<=0)return -1;\n\tint log=0;\n\twhile(n>1){\n\t\tn>>>==1;\n\t\tlog++;\n\t}\n\treturn log;\n}", "errormessage": "compile error", "error_detail_message": "TransitiveClosure.java:101: error: illegal start of expression\n\t\tn>>>==1;\n\t\t     ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n", "method_name": "computeBinaryLog", "codes": ["private int computeBinaryLog(int n){\n    if(n<=0)return -1;\n\tint log=0;\n\twhile(n>1){\n\t\tn>>>==1;\n\t\tlog++;\n\t}\n\treturn log;\n}"], "code_level": "self_contained", "_id": "636767431a6d9265ec017c8d", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/TransitiveClosure_computeBinaryLog.java"}
{"generate_results": [{"generate_code": "public double vertexWeight(Set<V> v){\n    if(v==null) return 0;\n\tdouble weight=0;\n\tfor(DefaultWeightedEdge e:graph.incomingEdgesOf(v)){\n\t\tweight+=graph.getEdgeWeight(e);\n\t}\n\treturn weight;\n}", "errormessage": "compile error", "error_detail_message": "StoerWagnerMinimumCut.java:227: error: cannot find symbol\n\tfor(DefaultWeightedEdge e:graph.incomingEdgesOf(v)){\n\t                          ^\n  symbol:   variable graph\n  location: class StoerWagnerMinimumCut<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class StoerWagnerMinimumCut\n    E extends Object declared in class StoerWagnerMinimumCut\nStoerWagnerMinimumCut.java:228: error: cannot find symbol\n\t\tweight+=graph.getEdgeWeight(e);\n\t\t        ^\n  symbol:   variable graph\n  location: class StoerWagnerMinimumCut<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class StoerWagnerMinimumCut\n    E extends Object declared in class StoerWagnerMinimumCut\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Compute the sum of the weights entering a vertex\n * @param v the vertex\n * @return the sum of the weights entering a vertex\n */\n", "method_name": "vertexWeight", "codes": ["public double vertexWeight(Set<V> v){\n    if(v==null) return 0;\n\tdouble weight=0;\n\tfor(DefaultWeightedEdge e:graph.incomingEdgesOf(v)){\n\t\tweight+=graph.getEdgeWeight(e);\n\t}\n\treturn weight;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018106", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut_vertexWeight.java"}
{"generate_results": [{"generate_code": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n    if(set1.size() > set2.size()){\n\t\treturn intersection(set2,set1);\n\t}\n\tSet<V> intersection = new HashSet<V>();\n\tfor(V vertex : set1){\n\t\tif(set2.contains(vertex)){\n\t\t\tintersection.add(vertex);\n\t\t}\n\t}\n\treturn intersection;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Efficient way to compute the intersection between two sets\n * @param set1 set $1$\n * @param set2 set $2$\n * @return intersection of set $1$ and $2$\n */\n", "method_name": "intersection", "codes": ["private Set<V> intersection(Set<V> set1,Set<V> set2){\n    if(set1.size() > set2.size()){\n\t\treturn intersection(set2,set1);\n\t}\n\tSet<V> intersection = new HashSet<V>();\n\tfor(V vertex : set1){\n\t\tif(set2.contains(vertex)){\n\t\t\tintersection.add(vertex);\n\t\t}\n\t}\n\treturn intersection;\n}"], "code_level": "slib_runnable", "_id": "636767611a6d9265ec018116", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/flow/PadbergRaoOddMinimumCutset_intersection.class"}
{"generate_results": [{"generate_code": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n\tif(DEBUG) System.out.println(\"selectOnOuterFace(\"+start+\",\"+stop+\",\"+dir+\")\");\n\tif(start==stop) return new OuterFaceCirculator(start,null);\n\tNode v=start;\n\tNode prev=null;\n\twhile(true){\n\t\tif(DEBUG) System.out.println(\"selectOnOuterFace: \"+v);\n\t\tif(predicate.test(v)){\n\t\t\treturn new OuterFaceCirculator(v,prev);\n\t\t}\n\t\tprev=v;\n\t\tv=v.nextOnOuterFace(dir);\n\t\tif(v==start) return null;\n\t}\n}", "errormessage": "compile error", "error_detail_message": "BoyerMyrvoldPlanarityInspector.java:679: error: incompatible types: int cannot be converted to BoyerMyrvoldPlanarityInspector<V,E>.Node\n\t\tv=v.nextOnOuterFace(dir);\n\t\t                    ^\n  where V,E are type-variables:\n    V extends Object declared in class BoyerMyrvoldPlanarityInspector\n    E extends Object declared in class BoyerMyrvoldPlanarityInspector\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate} or returns a circulator to the {@code stop} node.\n * @param predicate the condition the desired node should satisfy\n * @param start the node to start the search from\n * @param stop the node to end the search with\n * @param dir the direction to start the traversal in\n * @return a circulator to the node satisfying the {@code predicate} or to the {@code stop} node\n */\n", "method_name": "selectOnOuterFace", "codes": ["private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n\tif(DEBUG) System.out.println(\"selectOnOuterFace(\"+start+\",\"+stop+\",\"+dir+\")\");\n\tif(start==stop) return new OuterFaceCirculator(start,null);\n\tNode v=start;\n\tNode prev=null;\n\twhile(true){\n\t\tif(DEBUG) System.out.println(\"selectOnOuterFace: \"+v);\n\t\tif(predicate.test(v)){\n\t\t\treturn new OuterFaceCirculator(v,prev);\n\t\t}\n\t\tprev=v;\n\t\tv=v.nextOnOuterFace(dir);\n\t\tif(v==start) return null;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb6", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/planar/BoyerMyrvoldPlanarityInspector_selectOnOuterFace.java"}
{"generate_results": [{"generate_code": "Edge edgeToNext(){\n    if(current==null) return null;\n\treturn parentEdge;\n}", "errormessage": "compile error", "error_detail_message": "BoyerMyrvoldPlanarityInspector.java:1729: error: cannot find symbol\n\treturn parentEdge;\n\t       ^\n  symbol:   variable parentEdge\n  location: class BoyerMyrvoldPlanarityInspector<V,E>.OuterFaceCirculator\n  where V,E are type-variables:\n    V extends Object declared in class BoyerMyrvoldPlanarityInspector\n    E extends Object declared in class BoyerMyrvoldPlanarityInspector\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n", "method_name": "edgeToNext", "codes": ["Edge edgeToNext(){\n    if(current==null) return null;\n\treturn parentEdge;\n}"], "code_level": "class_runnable", "_id": "6367675d1a6d9265ec018082", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/planar/BoyerMyrvoldPlanarityInspector_edgeToNext.java"}
{"generate_results": [{"generate_code": "protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    if(tour==null){\n\tthrow new IllegalArgumentException(\"tour is null\");\n    }\n\tGraphPath<V,E> path=new GraphPath<V,E>(graph);\n\tfor(E edge:tour){\n\t\tpath.addEdge(edge);\n\t}\n\treturn path;\n}", "errormessage": "compile error", "error_detail_message": "HamiltonianCycleAlgorithmBase.java:86: error: GraphPath is abstract; cannot be instantiated\n\tGraphPath<V,E> path=new GraphPath<V,E>(graph);\n\t                    ^\nHamiltonianCycleAlgorithmBase.java:88: error: cannot find symbol\n\t\tpath.addEdge(edge);\n\t\t    ^\n  symbol:   method addEdge(E)\n  location: variable path of type GraphPath<V,E>\n  where E,V are type-variables:\n    E extends Object declared in class HamiltonianCycleAlgorithmBase\n    V extends Object declared in class HamiltonianCycleAlgorithmBase\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n", "method_name": "edgeSetToTour", "codes": ["protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    if(tour==null){\n\tthrow new IllegalArgumentException(\"tour is null\");\n    }\n\tGraphPath<V,E> path=new GraphPath<V,E>(graph);\n\tfor(E edge:tour){\n\t\tpath.addEdge(edge);\n\t}\n\treturn path;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f7c", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/tour/HamiltonianCycleAlgorithmBase_edgeSetToTour.java"}
{"generate_results": [{"generate_code": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    if(minLabel==labels.size()-1) return;\n\tfor(int i=0;i<minLabel;i++){\n\t\tbucketsByLabel.get(i).addAll(bucketsByLabel.get(minLabel));\n\t\tbucketsByLabel.set(minLabel,new HashSet<Integer>());\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Moves all vertices from the bucket with label  {@code minLabel} to the bucket with label 0.Clears the bucket with label  {@code minLabel}. Updates the labeling accordingly.\n * @param bucketsByLabel the buckets vertices are stored in\n * @param labels the labels of the vertices\n * @param minLabel the minimum value of the non-empty bucket\n */\n", "method_name": "reload", "codes": ["private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    if(minLabel==labels.size()-1) return;\n\tfor(int i=0;i<minLabel;i++){\n\t\tbucketsByLabel.get(i).addAll(bucketsByLabel.get(minLabel));\n\t\tbucketsByLabel.set(minLabel,new HashSet<Integer>());\n\t}\n}"], "code_level": "self_contained", "_id": "636767641a6d9265ec018190", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/cycle/WeakChordalityInspector_reload.class"}
{"generate_results": [{"generate_code": "@Override protected V provideNextVertex(){\n    if(this.path.size()==0)\n\treturn null;\n    else\ne.get(i);\n\treturn this.path.get(this.path.size()-1);\n}", "errormessage": "compile error", "error_detail_message": "CycleDetector.java:223: error: cannot find symbol\ne.get(i);\n      ^\n  symbol:   variable i\n  location: class ProbeIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class ProbeIterator\n    E extends Object declared in class ProbeIterator\nCycleDetector.java:223: error: cannot find symbol\ne.get(i);\n^\n  symbol:   variable e\n  location: class ProbeIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class ProbeIterator\n    E extends Object declared in class ProbeIterator\n2 errors\n", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "provideNextVertex", "codes": ["@Override protected V provideNextVertex(){\n    if(this.path.size()==0)\n\treturn null;\n    else\ne.get(i);\n\treturn this.path.get(this.path.size()-1);\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018112", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/cycle/CycleDetector_provideNextVertex.java"}
{"generate_results": [{"generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    if(globalSeparatorList!= null) return globalSeparatorList;\n\tList<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList = new ArrayList<Pair<List<Pair<Integer,Integer>>,E>>();\n\tfor(E edge : graph.edgeSet()){\n\t\tList<Pair<Integer,Integer>> separatorList = findSeparators(graph,edge);\n\t\tPair<List<Pair<Integer,Integer>>,E> pair = new Pair<List<Pair<Integer,Integer>>,E>(separatorList,edge);\n\t\tglobalSeparatorList.add(pair);\n\t}\n\treturn globalSeparatorList;\n}", "errormessage": "compile error", "error_detail_message": "WeakChordalityInspector.java:223: error: cannot find symbol\n    if(globalSeparatorList!= null) return globalSeparatorList;\n       ^\n  symbol:   variable globalSeparatorList\n  location: class WeakChordalityInspector<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class WeakChordalityInspector\n    E extends Object declared in class WeakChordalityInspector\nWeakChordalityInspector.java:223: error: cannot find symbol\n    if(globalSeparatorList!= null) return globalSeparatorList;\n                                          ^\n  symbol:   variable globalSeparatorList\n  location: class WeakChordalityInspector<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class WeakChordalityInspector\n    E extends Object declared in class WeakChordalityInspector\nWeakChordalityInspector.java:226: error: incompatible types: List<Set<V>> cannot be converted to List<Pair<Integer,Integer>>\n\t\tList<Pair<Integer,Integer>> separatorList = findSeparators(graph,edge);\n\t\t                                                          ^\n  where V is a type-variable:\n    V extends Object declared in class WeakChordalityInspector\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Computes the global separator list of the  {@code graph}. More precisely, for every edge $e$ in the $G = (V, E)$ computes list of minimal separators $S_e$ in the neighborhood of $e$ and then concatenates these lists. Note: the result may contain duplicates\n * @return the list of minimal separators of every edge $e$ in the inspected graph\n */\n", "method_name": "computeGlobalSeparatorList", "codes": ["private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    if(globalSeparatorList!= null) return globalSeparatorList;\n\tList<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList = new ArrayList<Pair<List<Pair<Integer,Integer>>,E>>();\n\tfor(E edge : graph.edgeSet()){\n\t\tList<Pair<Integer,Integer>> separatorList = findSeparators(graph,edge);\n\t\tPair<List<Pair<Integer,Integer>>,E> pair = new Pair<List<Pair<Integer,Integer>>,E>(separatorList,edge);\n\t\tglobalSeparatorList.add(pair);\n\t}\n\treturn globalSeparatorList;\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180e2", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector_computeGlobalSeparatorList.java"}
{"generate_results": [{"generate_code": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    if(bounds.size() == 0) return new Pair<List<Integer>,Long>(new ArrayList<Integer>(),0);\n\tList<Integer> suffixSum = new ArrayList<Integer>();\n\tlong sum = 0;\n\tfor(int i = 0; i < bounds.size(); i++){\n\t\tsum += bounds.get(i);\n\t\tsuffixSum.add(sum);\n\t}\n\treturn new Pair<List<Integer>,Long>(suffixSum,sum);\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:143: error: incompatible types: int cannot be converted to Long\n    if(bounds.size() == 0) return new Pair<List<Integer>,Long>(new ArrayList<Integer>(),0);\n                                                                                        ^\nDistributor.java:148: error: incompatible types: long cannot be converted to Integer\n\t\tsuffixSum.add(sum);\n\t\t              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Computes a suffix sum of the  {@code bounds}. Returns computed suffix sum and the sum of all elements in the  {@code bounds list}.\n * @param bounds list of integers.\n * @return computed pair of suffix sum list and a sum of all elements.\n */\n", "method_name": "computeSuffixSum", "codes": ["private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    if(bounds.size() == 0) return new Pair<List<Integer>,Long>(new ArrayList<Integer>(),0);\n\tList<Integer> suffixSum = new ArrayList<Integer>();\n\tlong sum = 0;\n\tfor(int i = 0; i < bounds.size(); i++){\n\t\tsum += bounds.get(i);\n\t\tsuffixSum.add(sum);\n\t}\n\treturn new Pair<List<Integer>,Long>(suffixSum,sum);\n}"], "code_level": "project_runnable", "_id": "636767461a6d9265ec017d0e", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeSuffixSum.java"}
{"generate_results": [{"generate_code": "private List<Integer> computeLowerBounds(List<K> keys){\n    if(lowerBoundsFunction.isEmpty())\n\t\tthrow new IllegalArgumentException(\"No lower bound function has been added\");\n\tList<Integer> lowerBounds = new ArrayList<Integer>();\n\tfor(K key:keys){\n\t\tint lowerBound = 0;\n\t\tfor(Function<K,Integer> lowerBoundFunction:lowerBoundsFunction){\n\t\t\tlowerBound = Math.max(lowerBound,lowerBoundFunction.apply(key));\n\t\t}\n\t\tlowerBounds.add(lowerBound);\n\t}\n\treturn lowerBounds;\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:103: error: cannot find symbol\n    if(lowerBoundsFunction.isEmpty())\n       ^\n  symbol:   variable lowerBoundsFunction\n  location: class Distributor<K>\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nDistributor.java:108: error: cannot find symbol\n\t\tfor(Function<K,Integer> lowerBoundFunction:lowerBoundsFunction){\n\t\t                                           ^\n  symbol:   variable lowerBoundsFunction\n  location: class Distributor<K>\n  where K is a type-variable:\n    K extends Object declared in class Distributor\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n", "method_name": "computeLowerBounds", "codes": ["private List<Integer> computeLowerBounds(List<K> keys){\n    if(lowerBoundsFunction.isEmpty())\n\t\tthrow new IllegalArgumentException(\"No lower bound function has been added\");\n\tList<Integer> lowerBounds = new ArrayList<Integer>();\n\tfor(K key:keys){\n\t\tint lowerBound = 0;\n\t\tfor(Function<K,Integer> lowerBoundFunction:lowerBoundsFunction){\n\t\t\tlowerBound = Math.max(lowerBound,lowerBoundFunction.apply(key));\n\t\t}\n\t\tlowerBounds.add(lowerBound);\n\t}\n\treturn lowerBounds;\n}"], "code_level": "class_runnable", "_id": "636767431a6d9265ec017c88", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeLowerBounds.java"}
{"generate_results": [{"generate_code": "private List<Integer> computeUpperBounds(List<K> keys){\n    if(upperBounds==null){\n        upperBounds = new ArrayList<Integer>();\n        for(Function<K,Integer> upperBound:upperBounds){\n            upperBounds.add(upperBound.apply(keys.get(0)));\n        }\n    }\n\tList<Integer> upperBounds = new ArrayList<Integer>();\n\tfor(K key:keys){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(Function<K,Integer> upperBound:upperBounds){\n\t\t\tint value = upperBound.apply(key);\n\t\t\tif(value<min){\n\t\t\t\tmin = value;\n\t\t\t}\n\t\t}\n\t\tupperBounds.add(min);\n\t}\n\treturn upperBounds;\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:124: error: cannot assign a value to final variable upperBounds\n        upperBounds = new ArrayList<Integer>();\n        ^\nDistributor.java:124: error: incompatible types: ArrayList<Integer> cannot be converted to List<Function<K,Integer>>\n        upperBounds = new ArrayList<Integer>();\n                      ^\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nDistributor.java:126: error: incompatible types: Integer cannot be converted to Function<K,Integer>\n            upperBounds.add(upperBound.apply(keys.get(0)));\n                                            ^\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nDistributor.java:132: error: incompatible types: Integer cannot be converted to Function<K,Integer>\n\t\tfor(Function<K,Integer> upperBound:upperBounds){\n\t\t                                   ^\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n", "is_pass": false}], "docstring": "/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n", "method_name": "computeUpperBounds", "codes": ["private List<Integer> computeUpperBounds(List<K> keys){\n    if(upperBounds==null){\n        upperBounds = new ArrayList<Integer>();\n        for(Function<K,Integer> upperBound:upperBounds){\n            upperBounds.add(upperBound.apply(keys.get(0)));\n        }\n    }\n\tList<Integer> upperBounds = new ArrayList<Integer>();\n\tfor(K key:keys){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(Function<K,Integer> upperBound:upperBounds){\n\t\t\tint value = upperBound.apply(key);\n\t\t\tif(value<min){\n\t\t\t\tmin = value;\n\t\t\t}\n\t\t}\n\t\tupperBounds.add(min);\n\t}\n\treturn upperBounds;\n}"], "code_level": "class_runnable", "_id": "636767581a6d9265ec017fb4", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeUpperBounds.java"}
{"generate_results": [{"generate_code": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    if(vertices.size()==1)return true;\n\tfor(V v:vertices){\n\t\tfor(V u:vertices){\n\t\t\tif(v.equals(u))continue;\n\t\t\tif(!graph.containsEdge(v,u)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n", "method_name": "isClique", "codes": ["private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    if(vertices.size()==1)return true;\n\tfor(V v:vertices){\n\t\tfor(V u:vertices){\n\t\t\tif(v.equals(u))continue;\n\t\t\tif(!graph.containsEdge(v,u)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "6367675f1a6d9265ec0180cf", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/clique/CliqueMinimalSeparatorDecomposition_isClique.class"}
{"generate_results": [{"generate_code": "public int nonZeros(int row){\n    if(row<0||row>=rowOffsets.length)\n        throw new IndexOutOfBoundsException();\nreturn rowOffsets[row+1]-rowOffsets[row];\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Get the number of non-zero entries of a row.\n * @param row the row\n * @return the number of non-zero entries of a row\n */\n", "method_name": "nonZeros", "codes": ["public int nonZeros(int row){\n    if(row<0||row>=rowOffsets.length)\n        throw new IndexOutOfBoundsException();\nreturn rowOffsets[row+1]-rowOffsets[row];\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb0", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-opt/target/classes/org/jgrapht/opt/graph/sparse/specifics/CSRBooleanMatrix_nonZeros.class"}
{"generate_results": [{"generate_code": "private String unescapeId(String input){\n    if(input==null) return null;\n\treturn unescapeId.translate(input);\n}", "errormessage": "compile error", "error_detail_message": "DOTEventDrivenImporter.java:781: error: cannot find symbol\n\treturn unescapeId.translate(input);\n\t       ^\n  symbol:   variable unescapeId\n  location: class DOTEventDrivenImporter\n1 error\n", "is_pass": false}], "docstring": "/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n", "method_name": "unescapeId", "codes": ["private String unescapeId(String input){\n    if(input==null) return null;\n\treturn unescapeId.translate(input);\n}"], "code_level": "class_runnable", "_id": "636767461a6d9265ec017d17", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/DOTEventDrivenImporter_unescapeId.java"}
{"generate_results": [{"generate_code": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    if(bb.remaining()<1){\n     return i;\n    }\n int n=bb.remaining();\n for(int j=i;j<n;j++){\n  int b=bb.get(j);\n  if(b<0){\n   if(b==-1){\n    sb.append((char)0xFFFD);\n   }else {\n    sb.append((char)b);\n   }\n   return j+1;\n  }\n  sb.append((char)b);\n }\n return n;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n", "method_name": "decodeOctets", "codes": ["private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    if(bb.remaining()<1){\n     return i;\n    }\n int n=bb.remaining();\n for(int j=i;j<n;j++){\n  int b=bb.get(j);\n  if(b<0){\n   if(b==-1){\n    sb.append((char)0xFFFD);\n   }else {\n    sb.append((char)b);\n   }\n   return j+1;\n  }\n  sb.append((char)b);\n }\n return n;\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017457", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_decodeOctets.class"}
{"generate_results": [{"generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    if(u == null)\n        return Collections.emptyList();\n return decodePath(u.getRawPath(),decode);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Decode the path component of a URI as path segments.\n * @param u the URI. If the path component is an absolute path componentthen the leading '/' is ignored and is not considered a delimiator of a path segment.\n * @param decode true if the path segments of the path componentshould be in decoded form.\n * @return the list of path segments.\n */\n", "method_name": "decodePath", "codes": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    if(u == null)\n        return Collections.emptyList();\n return decodePath(u.getRawPath(),decode);\n}"], "code_level": "slib_runnable", "_id": "6367667f1a6d9265ec01745d", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_decodePath.class"}
{"generate_results": [{"generate_code": "public final MatchResult match(CharSequence uri){\n    if(Objects.equals(uri,EMPTY_STRING_MATCH_RESULT.input))\n\treturn EMPTY_STRING_MATCH_RESULT;\n\treturn match(uri,null,null);\n}", "errormessage": "compile error", "error_detail_message": "UriPattern.java:259: error: cannot find symbol\n    if(Objects.equals(uri,EMPTY_STRING_MATCH_RESULT.input))\n                                                   ^\n  symbol:   variable input\n  location: variable EMPTY_STRING_MATCH_RESULT of type EmptyStringMatchResult\nUriPattern.java:261: error: incompatible types: boolean cannot be converted to MatchResult\n\treturn match(uri,null,null);\n\t            ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Match a URI against the pattern.\n * @param uri the uri to match against the template.\n * @return the match result, otherwise null if no match occurs.\n */\n", "method_name": "match", "codes": ["public final MatchResult match(CharSequence uri){\n    if(Objects.equals(uri,EMPTY_STRING_MATCH_RESULT.input))\n\treturn EMPTY_STRING_MATCH_RESULT;\n\treturn match(uri,null,null);\n}"], "code_level": "project_runnable", "_id": "636766861a6d9265ec01755a", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriPattern_match.java"}
{"generate_results": [{"generate_code": "public final boolean isTemplateVariablePresent(String name){\n    if(templateVariables == null) return false;\n\treturn templateVariables.contains(name);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Ascertain if a template variable is a member of this template.\n * @param name name The template variable.\n * @return true if the template variable is a member of the template, otherwisefalse.\n */\n", "method_name": "isTemplateVariablePresent", "codes": ["public final boolean isTemplateVariablePresent(String name){\n    if(templateVariables == null) return false;\n\treturn templateVariables.contains(name);\n}"], "code_level": "class_runnable", "_id": "636766861a6d9265ec017553", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriTemplate_isTemplateVariablePresent.class"}
{"generate_results": [{"generate_code": "public static String encodeTemplateNames(String s){\n if (s == null) {\n return null;\n }\n int len=s.length();\n StringBuilder sb=new StringBuilder(len);\n for (int i=0; i < len; i++) {\n char c=s.charAt(i);\n if (c == '{') {\n sb.append('%');\n sb.append('7');\n sb.append('B');\n }\n else if (c == '}') {\n sb.append('%');\n sb.append('7');\n sb.append('D');\n }\n else {\n sb.append(c);\n }\n }\n return sb.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.\n * @param s the string with zero or more template parameters names\n * @return the string with encoded template parameters names.\n */\n", "method_name": "encodeTemplateNames", "codes": ["public static String encodeTemplateNames(String s){\n if (s == null) {\n return null;\n }\n int len=s.length();\n StringBuilder sb=new StringBuilder(len);\n for (int i=0; i < len; i++) {\n char c=s.charAt(i);\n if (c == '{') {\n sb.append('%');\n sb.append('7');\n sb.append('B');\n }\n else if (c == '}') {\n sb.append('%');\n sb.append('7');\n sb.append('D');\n }\n else {\n sb.append(c);\n }\n }\n return sb.toString();\n}"], "code_level": "self_contained", "_id": "636766801a6d9265ec017487", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_encodeTemplateNames.class"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    if(dir==null) return;\n\tFile f=new File(dir);\n\tif(f.exists() && f.isDirectory()){\n\t\tFile[] files=f.listFiles(new FilenameFilter(){\n\t\t\tpublic boolean accept(File dir,String name){\n\t\t\t\treturn name.endsWith(\".jar\");\n\t\t\t}\n\t\t});\n\t\tfor(File file:files){\n\t\t\ttry{\n\t\t\t\tcpV.add(file.toURI().toURL());\n\t\t\t}\n\t\t\tcatch(MalformedURLException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nException in thread \"main\" java.lang.NoSuchMethodError: org.atmosphere.util.IntrospectionUtils$1: method 'void <init>()' not found\n\tat org.atmosphere.util.IntrospectionUtils.addToClassPath(IntrospectionUtils.java:401)\n\tat org.atmosphere.util.IntrospectionUtils_addToClassPath.main(IntrospectionUtils_addToClassPath.java:15)\n", "is_pass": false}], "docstring": "/** \n * Add all the jar files in a dir to the classpath, represented as a Vector of URLs.\n */\n", "method_name": "addToClassPath", "codes": ["@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    if(dir==null) return;\n\tFile f=new File(dir);\n\tif(f.exists() && f.isDirectory()){\n\t\tFile[] files=f.listFiles(new FilenameFilter(){\n\t\t\tpublic boolean accept(File dir,String name){\n\t\t\t\treturn name.endsWith(\".jar\");\n\t\t\t}\n\t\t});\n\t\tfor(File file:files){\n\t\t\ttry{\n\t\t\t\tcpV.add(file.toURI().toURL());\n\t\t\t}\n\t\t\tcatch(MalformedURLException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec01745c", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/IntrospectionUtils_addToClassPath.class"}
{"generate_results": [{"generate_code": "public static String capitalize(String name){\n\tif (name==null) return null;\n\tchar[] chars=name.toCharArray();\n\tif (chars.length==0) return name;\n\tchars[0]=Character.toUpperCase(chars[0]);\n\treturn new String(chars);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reverse of Introspector.decapitalize\n */\n", "method_name": "capitalize", "codes": ["public static String capitalize(String name){\n\tif (name==null) return null;\n\tchar[] chars=name.toCharArray();\n\tif (chars.length==0) return name;\n\tchars[0]=Character.toUpperCase(chars[0]);\n\treturn new String(chars);\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174bf", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/IntrospectionUtils_capitalize.class"}
{"generate_results": [{"generate_code": "public static String unescapeJava(String str) throws Exception {\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tif (len == 0) {\n\t\treturn str;\n\t}\n\tStringBuffer out = new StringBuffer(len);\n\tfor (int x = 0; x < len; x++) {\n\t\tchar ch = str.charAt(x);\n\t\tif (ch == '\\\\') {\n\t\t\tif (x == len - 1) {\n\t\t\t\tthrow new Exception(\"Unterminated escape sequence in string literal\");\n\t\t\t}\n\t\t\tchar ch2 = str.charAt(x + 1);\n\t\t\tif (ch2 == 'u') {\n\t\t\t\tif (x == len - 4) {\n\t\t\t\t\tthrow new Exception(\"Unterminated escape sequence in string literal\");\n\t\t\t\t}\n\t\t\t\tString hex = str.substring(x + 2, x + 6);\n\t\t\t\tout.append((char) Integer.parseInt(hex, 16));\n\t\t\t\tx += 5;\n\t\t\t} else if (ch2 == 't') {\n\t\t\t\tout.append('\\t');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'r') {\n\t\t\t\tout.append('\\r');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'n') {\n\t\t\t\tout.append('\\n');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'f') {\n\t\t\t\tout.append('\\f');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'b') {\n\t\t\t\tout.append('\\b');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == '0') {\n\t\t\t\tout.append('\\0');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'x') {\n\t\t\t\tif (x == len - 2) {\n\t\t\t\t\tthrow new Exception(\"Unterminated escape sequence in string literal\");\n\t\t\t\t}\n\t\t\t\tString hex = str.substring(x + 2, x + 4);\n\t\t\t\tout.append((char) Integer.parseInt(hex, 16));\n\t\t\t\tx += 3;\n\t\t\t} else {\n\t\t\t\tout.append(ch2);\n\t\t\t}\n\t\t} else {\n\t\t\tout.append(ch);\n\t\t}\n\t}\n\treturn out.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>\n * @param str the <code>String</code> to unescape, may be null\n * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n */\n", "method_name": "unescapeJava", "codes": ["public static String unescapeJava(String str) throws Exception {\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tif (len == 0) {\n\t\treturn str;\n\t}\n\tStringBuffer out = new StringBuffer(len);\n\tfor (int x = 0; x < len; x++) {\n\t\tchar ch = str.charAt(x);\n\t\tif (ch == '\\\\') {\n\t\t\tif (x == len - 1) {\n\t\t\t\tthrow new Exception(\"Unterminated escape sequence in string literal\");\n\t\t\t}\n\t\t\tchar ch2 = str.charAt(x + 1);\n\t\t\tif (ch2 == 'u') {\n\t\t\t\tif (x == len - 4) {\n\t\t\t\t\tthrow new Exception(\"Unterminated escape sequence in string literal\");\n\t\t\t\t}\n\t\t\t\tString hex = str.substring(x + 2, x + 6);\n\t\t\t\tout.append((char) Integer.parseInt(hex, 16));\n\t\t\t\tx += 5;\n\t\t\t} else if (ch2 == 't') {\n\t\t\t\tout.append('\\t');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'r') {\n\t\t\t\tout.append('\\r');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'n') {\n\t\t\t\tout.append('\\n');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'f') {\n\t\t\t\tout.append('\\f');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'b') {\n\t\t\t\tout.append('\\b');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == '0') {\n\t\t\t\tout.append('\\0');\n\t\t\t\tx++;\n\t\t\t} else if (ch2 == 'x') {\n\t\t\t\tif (x == len - 2) {\n\t\t\t\t\tthrow new Exception(\"Unterminated escape sequence in string literal\");\n\t\t\t\t}\n\t\t\t\tString hex = str.substring(x + 2, x + 4);\n\t\t\t\tout.append((char) Integer.parseInt(hex, 16));\n\t\t\t\tx += 3;\n\t\t\t} else {\n\t\t\t\tout.append(ch2);\n\t\t\t}\n\t\t} else {\n\t\t\tout.append(ch);\n\t\t}\n\t}\n\treturn out.toString();\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec017401", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/StringEscapeUtils_unescapeJava.class"}
{"generate_results": [{"generate_code": "private static char decodeHexNibble(final char c){\nif(c>='0' && c<='9'){\nreturn (char)(c-'0');\n}\nif(c>='a' && c<='f'){\nreturn (char)(c-'a'+10);\n}\nif(c>='A' && c<='F'){\nreturn (char)(c-'A'+10);\n}\nthrow new IllegalArgumentException(\"Invalid hex digit: \"+c);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid hex digit: &\n\tat org.atmosphere.util.QueryStringDecoder.decodeHexNibble(QueryStringDecoder.java:418)\n\tat org.atmosphere.util.QueryStringDecoder_decodeHexNibble.main(QueryStringDecoder_decodeHexNibble.java:8)\n", "is_pass": false}], "docstring": "/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}.\n * @return The hexadecimal value represented in the ASCII charactergiven, or  {@link Character#MAX_VALUE} if the character is invalid.\n */\n", "method_name": "decodeHexNibble", "codes": ["private static char decodeHexNibble(final char c){\nif(c>='0' && c<='9'){\nreturn (char)(c-'0');\n}\nif(c>='a' && c<='f'){\nreturn (char)(c-'a'+10);\n}\nif(c>='A' && c<='F'){\nreturn (char)(c-'A'+10);\n}\nthrow new IllegalArgumentException(\"Invalid hex digit: \"+c);\n}"], "code_level": "slib_runnable", "_id": "636766851a6d9265ec01751b", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/QueryStringDecoder_decodeHexNibble.class"}
{"generate_results": [{"generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n if (genericType instanceof Class) {\n return resolveArguments((Class) genericType, targetType);\n }\n if (genericType instanceof ParameterizedType) {\n return resolveArguments((ParameterizedType) genericType, targetType);\n }\n return null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n\tat org.atmosphere.config.managed.TypeResolver.resolveArguments(TypeResolver.java:143)\n", "is_pass": false}], "docstring": "/** \n * Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.\n */\n", "method_name": "resolveArguments", "codes": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n if (genericType instanceof Class) {\n return resolveArguments((Class) genericType, targetType);\n }\n if (genericType instanceof ParameterizedType) {\n return resolveArguments((ParameterizedType) genericType, targetType);\n }\n return null;\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174b6", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/config/managed/TypeResolver_resolveArguments.class"}
{"generate_results": [{"generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n\tif(typeVariable == null){\n\t\treturn null;\n\t}\n\tType[] bounds = typeVariable.getBounds();\n\tif(bounds.length == 0){\n\t\treturn null;\n\t}\n\treturn resolveBound(bounds[0]);\n}", "errormessage": "compile error", "error_detail_message": "TypeResolver.java:308: error: incompatible types: Type cannot be converted to TypeVariable<?>\n\treturn resolveBound(bounds[0]);\n\t                          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.\n */\n", "method_name": "resolveBound", "codes": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n\tif(typeVariable == null){\n\t\treturn null;\n\t}\n\tType[] bounds = typeVariable.getBounds();\n\tif(bounds.length == 0){\n\t\treturn null;\n\t}\n\treturn resolveBound(bounds[0]);\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec01741d", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver_resolveBound.java"}
{"generate_results": [{"generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n    if(request == null) {\n        return null;\n    }\n\treturn new AtmosphereRequestImpl(Builder.wrap(request));\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereRequestImpl.java:1407: error: cannot find symbol\n\treturn new AtmosphereRequestImpl(Builder.wrap(request));\n\t                                        ^\n  symbol:   method wrap(HttpServletRequest)\n  location: class Builder\nNote: AtmosphereRequestImpl.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: AtmosphereRequestImpl.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Wrap an  {@link HttpServletRequest}.\n * @param request {@link HttpServletRequest}\n * @return an {@link AtmosphereRequest}\n */\n", "method_name": "wrap", "codes": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n    if(request == null) {\n        return null;\n    }\n\treturn new AtmosphereRequestImpl(Builder.wrap(request));\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174d2", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl_wrap.java"}
{"generate_results": [{"generate_code": "public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    if(mapping == null){\n        return null;\n    }\n\treturn null;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * Remove an  {@link AtmosphereHandler}.\n * @param mapping the mapping used when invoking {@link #addAtmosphereHandler(String,AtmosphereHandler)};\n * @return true if removed\n */\n", "method_name": "removeAtmosphereHandler", "codes": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    if(mapping == null){\n        return null;\n    }\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017458", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereFramework_removeAtmosphereHandler.class"}
{"generate_results": [{"generate_code": "protected Object filter(Object msg){\n    if(msg instanceof AtmosphereResource){\n        AtmosphereResource r = (AtmosphereResource) msg;\n        if(r.isResumed()){\n            return msg;\n        }\n        if(r.isSuspended()){\n            return null;\n        }\n        if(r.isClosed()){\n            return null;\n        }\n        if(r.isDestroyed()){\n            return null;\n        }\n        if(r.isAsyncWrite()){\n            return null;\n        }\n        if(r.isAsyncWriteSupported()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(\nreturn msg;\n}", "errormessage": "compile error", "error_detail_message": "DefaultBroadcaster.java:1425: error: illegal start of expression\nreturn msg;\n^\nDefaultBroadcaster.java:1428: error: ';' expected\n    public Future<Object> broadcast(Object msg, AtmosphereResource r) {\n                                   ^\nDefaultBroadcaster.java:1428: error: ';' expected\n    public Future<Object> broadcast(Object msg, AtmosphereResource r) {\n                                                                  ^\nDefaultBroadcaster.java:1428: error: not a statement\n    public Future<Object> broadcast(Object msg, AtmosphereResource r) {\n                                                                   ^\nDefaultBroadcaster.java:1428: error: ';' expected\n    public Future<Object> broadcast(Object msg, AtmosphereResource r) {\n                                                                    ^\nDefaultBroadcaster.java:1445: error: ';' expected\n    public Future<Object> broadcastOnResume(Object msg) {\n                                           ^\nDefaultBroadcaster.java:1445: error: ';' expected\n    public Future<Object> broadcastOnResume(Object msg) {\n                                                      ^\nDefaultBroadcaster.java:1461: error: illegal start of expression\n    protected void broadcastOnResume(AtmosphereResource r) {\n    ^\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Invoke the  {@link BroadcastFilter}\n * @param msg\n * @return\n */\n", "method_name": "filter", "codes": ["protected Object filter(Object msg){\n    if(msg instanceof AtmosphereResource){\n        AtmosphereResource r = (AtmosphereResource) msg;\n        if(r.isResumed()){\n            return msg;\n        }\n        if(r.isSuspended()){\n            return null;\n        }\n        if(r.isClosed()){\n            return null;\n        }\n        if(r.isDestroyed()){\n            return null;\n        }\n        if(r.isAsyncWrite()){\n            return null;\n        }\n        if(r.isAsyncWriteSupported()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(r.isAsyncWriteEnabled()){\n            return null;\n        }\n        if(\nreturn msg;\n}"], "code_level": "project_runnable", "_id": "636766821a6d9265ec0174b3", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster_filter.java"}
{"generate_results": [{"generate_code": "private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    if (interceptorList == null) {\n\t\treturn false;\n\t}\n\tfor (final AtmosphereInterceptor atmosphereInterceptor : interceptorList) {\n\t\tif (c.isAssignableFrom(atmosphereInterceptor.getClass())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>\n * @param interceptorList the interceptors\n * @param c               the interceptor class\n * @return {@code false} if an instance of the class already exists in the list, {@code true} otherwise\n */\n", "method_name": "checkDuplicate", "codes": ["private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    if (interceptorList == null) {\n\t\treturn false;\n\t}\n\tfor (final AtmosphereInterceptor atmosphereInterceptor : interceptorList) {\n\t\tif (c.isAssignableFrom(atmosphereInterceptor.getClass())) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}"], "code_level": "project_runnable", "_id": "636766811a6d9265ec017499", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereFramework_checkDuplicate.class"}
{"generate_results": [{"generate_code": "public boolean hasBytes(){\n    if(dataBytes==null) return false;\n\treturn dataBytes!=null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * True is the body is a byte array\n * @return True is the body is a byte array\n */\n", "method_name": "hasBytes", "codes": ["public boolean hasBytes(){\n    if(dataBytes==null) return false;\n\treturn dataBytes!=null;\n}"], "code_level": "class_runnable", "_id": "6367667c1a6d9265ec0173f7", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereRequestImpl_hasBytes.class"}
{"generate_results": [{"generate_code": "public static Meteor lookup(HttpServletRequest r){\n    if(r==null) return null;\n\treturn lookup(r,null);\n}", "errormessage": "compile error", "error_detail_message": "Meteor.java:67: error: method lookup in class Meteor cannot be applied to given types;\n\treturn lookup(r,null);\n\t       ^\n  required: HttpServletRequest\n  found:    HttpServletRequest,<null>\n  reason: actual and formal argument lists differ in length\n1 error\n", "is_pass": false}], "docstring": "/** \n * Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.\n * @param r {@link HttpServletRequest}\n * @return a {@link Meteor} or null if not found\n */\n", "method_name": "lookup", "codes": ["public static Meteor lookup(HttpServletRequest r){\n    if(r==null) return null;\n\treturn lookup(r,null);\n}"], "code_level": "class_runnable", "_id": "6367667d1a6d9265ec0173ff", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/Meteor_lookup.java"}
{"generate_results": [{"generate_code": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    if (listeners == null) {\n\t\tlisteners = new ConcurrentLinkedQueue<AtmosphereResourceEventListener>();\n\t}\n\tlisteners.add(e);\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereResourceImpl.java:601: error: cannot assign a value to final variable listeners\n\t\tlisteners = new ConcurrentLinkedQueue<AtmosphereResourceEventListener>();\n\t\t^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java:2066: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    public AsyncSupport getCometSupport() {\n                        ^\nNote: Some input files use or override a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n1 warning\n", "is_pass": false}], "docstring": "/** \n * Add a  {@link AtmosphereResourceEventListener}.\n * @param e an instance of AtmosphereResourceEventListener\n */\n", "method_name": "addEventListener", "codes": ["@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    if (listeners == null) {\n\t\tlisteners = new ConcurrentLinkedQueue<AtmosphereResourceEventListener>();\n\t}\n\tlisteners.add(e);\n\treturn this;\n}"], "code_level": "project_runnable", "_id": "6367667c1a6d9265ec0173fb", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl_addEventListener.java"}
{"generate_results": [{"generate_code": "public InputStream next() throws IOException {\n\tif (stack.isEmpty()) {\n\t\treturn null;\n\t}\n\tcurrent = stack.pop();\n\treturn current;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.\n */\n", "method_name": "next", "codes": ["public InputStream next() throws IOException {\n\tif (stack.isEmpty()) {\n\t\treturn null;\n\t}\n\tcurrent = stack.pop();\n\treturn current;\n}"], "code_level": "class_runnable", "_id": "636766811a6d9265ec017496", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/InputStreamIterator_next.class"}
{"generate_results": [{"generate_code": "private static File[] classPath(){\n    if(classPath!=null){\n\treturn classPath;\n    }\n\tString classPath = System.getProperty(\"java.class.path\");\n\tString[] classPathArray = classPath.split(File.pathSeparator);\n\tFile[] files = new File[classPathArray.length];\n\tfor(int i=0;i<classPathArray.length;i++){\n\t\tfiles[i] = new File(classPathArray[i]);\n\t}\n\treturn files;\n}", "errormessage": "compile error", "error_detail_message": "ClassFileIterator.java:195: error: cannot find symbol\n    if(classPath!=null){\n       ^\n  symbol:   variable classPath\n  location: class ClassFileIterator\nClassFileIterator.java:196: error: cannot find symbol\n\treturn classPath;\n\t       ^\n  symbol:   variable classPath\n  location: class ClassFileIterator\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Returns the class path of the current JVM instance as an array of  {@link File} objects.\n */\n", "method_name": "classPath", "codes": ["private static File[] classPath(){\n    if(classPath!=null){\n\treturn classPath;\n    }\n\tString classPath = System.getProperty(\"java.class.path\");\n\tString[] classPathArray = classPath.split(File.pathSeparator);\n\tFile[] files = new File[classPathArray.length];\n\tfor(int i=0;i<classPathArray.length;i++){\n\t\tfiles[i] = new File(classPathArray[i]);\n\t}\n\treturn files;\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174c9", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator_classPath.java"}
{"generate_results": [{"generate_code": "public void readFrom(final InputStream in) throws IOException {\n    if (in == null) {\n        throw new NullPointerException();\n    }\n\tint len = in.read(buffer, pointer, buffer.length - pointer);\n\tif (len == -1) {\n\t\tthrow new EOFException();\n\t}\n\tpointer += len;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.\n */\n", "method_name": "readFrom", "codes": ["public void readFrom(final InputStream in) throws IOException {\n    if (in == null) {\n        throw new NullPointerException();\n    }\n\tint len = in.read(buffer, pointer, buffer.length - pointer);\n\tif (len == -1) {\n\t\tthrow new EOFException();\n\t}\n\tpointer += len;\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017482", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/ClassFileBuffer_readFrom.class"}
{"generate_results": [{"generate_code": "private void addReverse(final InputStream[] files){\n    if(files==null)return;\n\tfor(int i=files.length-1;i>=0;i--){\n\t\tstack.addFirst(files[i]);\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final InputStream[] files){\n    if(files==null)return;\n\tfor(int i=files.length-1;i>=0;i--){\n\t\tstack.addFirst(files[i]);\n\t}\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017477", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/InputStreamIterator_addReverse.class"}
{"generate_results": [{"generate_code": "private void addReverse(final File[] files){\n    if(files==null)return;\n\tfor(int i=files.length-1;i>=0;i--){\n\t\tstack.push(files[i]);\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final File[] files){\n    if(files==null)return;\n\tfor(int i=files.length-1;i>=0;i--){\n\t\tstack.push(files[i]);\n\t}\n}"], "code_level": "class_runnable", "_id": "636766831a6d9265ec0174eb", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/FileIterator_addReverse.class"}
{"generate_results": [{"generate_code": "public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == 0){\n        lastWrite = System.currentTimeMillis();\n    }\n\treturn lastWrite;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * The last time, in milliseconds, a write operation occurred.\n * @return this\n */\n", "method_name": "lastWriteTimeStampInMilliseconds", "codes": ["public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == 0){\n        lastWrite = System.currentTimeMillis();\n    }\n\treturn lastWrite;\n}"], "code_level": "class_runnable", "_id": "6367667e1a6d9265ec01743a", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/websocket/WebSocket_lastWriteTimeStampInMilliseconds.class"}
{"generate_results": [{"generate_code": "@Override public Action inspect(AtmosphereResource r){\nif (r.transport() == UNDEFINED) {\nreturn Action.CONTINUE;\n}\nif (r.transport() == AtmosphereResource.TRANSPORT.LONG_POLLING) {\nif (timeoutInSeconds!= null) {\ntimeoutInMilli = TimeUnit.SECONDS.toMillis(timeoutInSeconds);\n}\nif (timeoutInMilli > 0) {\nr.suspend(timeoutInMilli);\n}\n}\nreturn Action.CONTINUE;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.\n * @param r a {@link AtmosphereResource}\n * @return {@link Action#CONTINUE}\n */\n", "method_name": "inspect", "codes": ["@Override public Action inspect(AtmosphereResource r){\nif (r.transport() == UNDEFINED) {\nreturn Action.CONTINUE;\n}\nif (r.transport() == AtmosphereResource.TRANSPORT.LONG_POLLING) {\nif (timeoutInSeconds!= null) {\ntimeoutInMilli = TimeUnit.SECONDS.toMillis(timeoutInSeconds);\n}\nif (timeoutInMilli > 0) {\nr.suspend(timeoutInMilli);\n}\n}\nreturn Action.CONTINUE;\n}"], "code_level": "project_runnable", "_id": "636766851a6d9265ec017515", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor_inspect.class"}
{"generate_results": [{"generate_code": "public static String[] trimArrayElements(String[] array){\n\tif (ObjectUtils.isEmpty(array)) {\n\t\treturn array;\n\t}\n\tfor (int i = 0; i < array.length; i++) {\n\t\tarray[i] = trimWhitespace(array[i]);\n\t}\n\treturn array;\n}", "errormessage": "compile error", "error_detail_message": "Strings.java:827: error: cannot find symbol\n\tif (ObjectUtils.isEmpty(array)) {\n\t    ^\n  symbol:   variable ObjectUtils\n  location: class Strings\nNote: /home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Objects.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Trim the elements of the given String array, calling <code>String.trim()</code> on each of them.\n * @param array the original String array\n * @return the resulting array (of the same size) with trimmed elements\n */\n", "method_name": "trimArrayElements", "codes": ["public static String[] trimArrayElements(String[] array){\n\tif (ObjectUtils.isEmpty(array)) {\n\t\treturn array;\n\t}\n\tfor (int i = 0; i < array.length; i++) {\n\t\tarray[i] = trimWhitespace(array[i]);\n\t}\n\treturn array;\n}"], "code_level": "self_contained", "_id": "6367676d1a6d9265ec018229", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Strings_trimArrayElements.java"}
{"generate_results": [{"generate_code": "public static int nullSafeHashCode(long[] array){\n\tif (array == null) {\n\t\treturn 0;\n\t}\n\tint hashCode = INITIAL_HASH;\n\tfor (int i = 0; i < array.length; i++) {\n\t\thashCode = MULTIPLIER * hashCode + nullSafeHashCode(array[i]);\n\t}\n\treturn hashCode;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0.\n * @param array the long array to obtain a hashcode\n * @return the long array's hashcode, which could be 0 if the array is null.\n */\n", "method_name": "nullSafeHashCode", "codes": ["public static int nullSafeHashCode(long[] array){\n\tif (array == null) {\n\t\treturn 0;\n\t}\n\tint hashCode = INITIAL_HASH;\n\tfor (int i = 0; i < array.length; i++) {\n\t\thashCode = MULTIPLIER * hashCode + nullSafeHashCode(array[i]);\n\t}\n\treturn hashCode;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181aa", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Objects_nullSafeHashCode.class"}
{"generate_results": [{"generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n    if(str == null || prefix == null){\n        return false;\n    }\n\treturn str.startsWith(prefix);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns  {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @param str the String to check\n * @param prefix the prefix to look for\n * @return {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @see java.lang.String#startsWith\n */\n", "method_name": "startsWithIgnoreCase", "codes": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n    if(str == null || prefix == null){\n        return false;\n    }\n\treturn str.startsWith(prefix);\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181df", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_startsWithIgnoreCase.class"}
{"generate_results": [{"generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n\tif(source==null||candidates==null||candidates.isEmpty())return null;\n\tfor(Object candidate:candidates){\n\t\tif(source.contains(candidate))return candidate;\n\t}\n\treturn null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return the first element in '<code>candidates</code>' that is contained in '<code>source</code>'. If no element in '<code>candidates</code>' is present in '<code>source</code>' returns <code>null</code>. Iteration order is {@link Collection} implementation specific.\n * @param source the source Collection\n * @param candidates the candidates to search for\n * @return the first present object, or <code>null</code> if not found\n */\n", "method_name": "findFirstMatch", "codes": ["public static Object findFirstMatch(Collection source,Collection candidates){\n\tif(source==null||candidates==null||candidates.isEmpty())return null;\n\tfor(Object candidate:candidates){\n\t\tif(source.contains(candidate))return candidate;\n\t}\n\treturn null;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181e2", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Collections_findFirstMatch.class"}
{"generate_results": [{"generate_code": "public static String trimTrailingWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\treturn (st > 0)? str.substring(st) : str;\n}\n/**Trim the start space of the str.**/\npublic static String trimLeadingWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\treturn (st > 0)? str.substring(st) : str;\n}\n/**Trim the start and end space of the str.**/\npublic static String trimWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\tint end = len - 1;\n\twhile ((end >= 0) && (str.charAt(end) <='')) {\n\t\tend--;\n\t}\n\treturn ((st > 0) || (end < (len - 1)))? str.substring(st,end + 1) : str;\n}\n/**Trim the start and end space of the str.**/\npublic static String trimWhitespace(CharSequence str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\tint end = len - 1;\n\twhile ((end >= 0) && (str.charAt(end) <='')) {\n\t\tend--;\n\t}\n\treturn ((st > 0) || (end < (len - 1)))? str.subSequence(st,end + 1) : str;\n}\n/**Trim the start and end space of the str.**/\npublic static String trimLeadingCharacter(String str,char leadingCharacter){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) == leadingCharacter)) {\n\t\tst++;\n\t}\n\treturn (st > 0)? str.substring(st) : str;\n}", "errormessage": "compile error", "error_detail_message": "Strings.java:244: error: empty character literal\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t                                       ^\nStrings.java:256: error: empty character literal\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t                                       ^\nStrings.java:268: error: empty character literal\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t                                       ^\nStrings.java:272: error: empty character literal\n\twhile ((end >= 0) && (str.charAt(end) <='')) {\n\t                                        ^\nStrings.java:284: error: empty character literal\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t                                       ^\nStrings.java:288: error: empty character literal\n\twhile ((end >= 0) && (str.charAt(end) <='')) {\n\t                                        ^\n6 errors\n", "is_pass": false}], "docstring": "/** \n * Trim trailing whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimTrailingWhitespace", "codes": ["public static String trimTrailingWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\treturn (st > 0)? str.substring(st) : str;\n}\n/**Trim the start space of the str.**/\npublic static String trimLeadingWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\treturn (st > 0)? str.substring(st) : str;\n}\n/**Trim the start and end space of the str.**/\npublic static String trimWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\tint end = len - 1;\n\twhile ((end >= 0) && (str.charAt(end) <='')) {\n\t\tend--;\n\t}\n\treturn ((st > 0) || (end < (len - 1)))? str.substring(st,end + 1) : str;\n}\n/**Trim the start and end space of the str.**/\npublic static String trimWhitespace(CharSequence str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) <='')) {\n\t\tst++;\n\t}\n\tint end = len - 1;\n\twhile ((end >= 0) && (str.charAt(end) <='')) {\n\t\tend--;\n\t}\n\treturn ((st > 0) || (end < (len - 1)))? str.subSequence(st,end + 1) : str;\n}\n/**Trim the start and end space of the str.**/\npublic static String trimLeadingCharacter(String str,char leadingCharacter){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint len = str.length();\n\tint st = 0;\n\twhile ((st < len) && (str.charAt(st) == leadingCharacter)) {\n\t\tst++;\n\t}\n\treturn (st > 0)? str.substring(st) : str;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181ee", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Strings_trimTrailingWhitespace.java"}
{"generate_results": [{"generate_code": "public static Object quoteIfString(Object obj){\n    if(obj == null){\n        return null;\n    }\n\treturn obj instanceof String? quote((String) obj) : obj;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Turn the given Object into a String with single quotes if it is a String; keeping the Object as-is else.\n * @param obj the input Object (e.g. \"myString\")\n * @return the quoted String (e.g. \"'myString'\"),or the input object as-is if not a String\n */\n", "method_name": "quoteIfString", "codes": ["public static Object quoteIfString(Object obj){\n    if(obj == null){\n        return null;\n    }\n\treturn obj instanceof String? quote((String) obj) : obj;\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181bf", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_quoteIfString.class"}
{"generate_results": [{"generate_code": "public static String trimLeadingWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint strLen = str.length();\n\tint start = 0;\n\twhile (start < strLen && Character.isWhitespace(str.charAt(start))) {\n\t\tstart++;\n\t}\n\treturn (start == 0)? str : str.substring(start);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Trim leading whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimLeadingWhitespace", "codes": ["public static String trimLeadingWhitespace(String str){\n\tif (str == null) {\n\t\treturn null;\n\t}\n\tint strLen = str.length();\n\tint start = 0;\n\twhile (start < strLen && Character.isWhitespace(str.charAt(start))) {\n\t\tstart++;\n\t}\n\treturn (start == 0)? str : str.substring(start);\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181cd", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimLeadingWhitespace.class"}
{"generate_results": [{"generate_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n    if(enumeration == null){\n        return null;\n    }\n\treturn enumeration.toArray(new String[enumeration.size()]);\n}", "errormessage": "compile error", "error_detail_message": "Strings.java:815: error: cannot find symbol\n\treturn enumeration.toArray(new String[enumeration.size()]);\n\t                                                 ^\n  symbol:   method size()\n  location: variable enumeration of type Enumeration<String>\nStrings.java:815: error: cannot find symbol\n\treturn enumeration.toArray(new String[enumeration.size()]);\n\t                  ^\n  symbol:   method toArray(String[])\n  location: variable enumeration of type Enumeration<String>\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Copy the given Enumeration into a String array. The Enumeration must contain String elements only.\n * @param enumeration the Enumeration to copy\n * @return the String array (<code>null</code> if the passed-inEnumeration was <code>null</code>)\n */\n", "method_name": "toStringArray", "codes": ["public static String[] toStringArray(Enumeration<String> enumeration){\n    if(enumeration == null){\n        return null;\n    }\n\treturn enumeration.toArray(new String[enumeration.size()]);\n}"], "code_level": "slib_runnable", "_id": "636767691a6d9265ec0181ae", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Strings_toStringArray.java"}
{"generate_results": [{"generate_code": "public static String deleteAny(String inString,String charsToDelete){\n\tif(!hasLength(inString) ||!hasLength(charsToDelete)){\n\t\treturn inString;\n\t}\n\tStringBuilder sb=new StringBuilder();\n\tfor(int i=0;i<inString.length();i++){\n\t\tchar c=inString.charAt(i);\n\t\tif(charsToDelete.indexOf(c)==-1){\n\t\t\tsb.append(c);\n\t\t}\n\t}\n\treturn sb.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Delete any character in a given String.\n * @param inString the original String\n * @param charsToDelete a set of characters to delete.E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n * @return the resulting String\n */\n", "method_name": "deleteAny", "codes": ["public static String deleteAny(String inString,String charsToDelete){\n\tif(!hasLength(inString) ||!hasLength(charsToDelete)){\n\t\treturn inString;\n\t}\n\tStringBuilder sb=new StringBuilder();\n\tfor(int i=0;i<inString.length();i++){\n\t\tchar c=inString.charAt(i);\n\t\tif(charsToDelete.indexOf(c)==-1){\n\t\t\tsb.append(c);\n\t\t}\n\t}\n\treturn sb.toString();\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec01820b", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_deleteAny.class"}
{"generate_results": [{"generate_code": "public static boolean containsInstance(Collection collection,Object element){\n    if(collection==null) return false;\n\treturn collection.contains(element);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the given Collection contains the given element instance. <p>Enforces the given instance to be present, rather than returning <code>true</code> for an equal element as well.\n * @param collection the Collection to check\n * @param element the element to look for\n * @return <code>true</code> if found, <code>false</code> else\n */\n", "method_name": "containsInstance", "codes": ["public static boolean containsInstance(Collection collection,Object element){\n    if(collection==null) return false;\n\treturn collection.contains(element);\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018223", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Collections_containsInstance.class"}
{"generate_results": [{"generate_code": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n\tif(ObjectUtils.isEmpty(array1)){\n\t\treturn array2;\n\t}\n\tif(ObjectUtils.isEmpty(array2)){\n\t\treturn array1;\n\t}\n\tString[] result=new String[array1.length+array2.length];\n\tSystem.arraycopy(array1,0,result,0,array1.length);\n\tSystem.arraycopy(array2,0,result,array1.length,array2.length);\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "Strings.java:737: error: cannot find symbol\n\tif(ObjectUtils.isEmpty(array1)){\n\t   ^\n  symbol:   variable ObjectUtils\n  location: class Strings\nStrings.java:740: error: cannot find symbol\n\tif(ObjectUtils.isEmpty(array2)){\n\t   ^\n  symbol:   variable ObjectUtils\n  location: class Strings\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Concatenate the given String arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.\n * @param array1 the first array (can be <code>null</code>)\n * @param array2 the second array (can be <code>null</code>)\n * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n */\n", "method_name": "concatenateStringArrays", "codes": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n\tif(ObjectUtils.isEmpty(array1)){\n\t\treturn array2;\n\t}\n\tif(ObjectUtils.isEmpty(array2)){\n\t\treturn array1;\n\t}\n\tString[] result=new String[array1.length+array2.length];\n\tSystem.arraycopy(array1,0,result,0,array1.length);\n\tSystem.arraycopy(array2,0,result,array1.length,array2.length);\n\treturn result;\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018204", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/src/main/java/io/jsonwebtoken/lang/Strings_concatenateStringArrays.java"}
{"generate_results": [{"generate_code": "public static String[] addStringToArray(String[] array,String str){\n\tif(array == null){\n\t\treturn new String[]{str};\n\t}\n\tString[] newArr = new String[array.length + 1];\n\tSystem.arraycopy(array,0,newArr,0,array.length);\n\tnewArr[array.length] = str;\n\treturn newArr;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Append the given String to the given String array, returning a new array consisting of the input array contents plus the given String.\n * @param array the array to append to (can be <code>null</code>)\n * @param str the String to append\n * @return the new array (never <code>null</code>)\n */\n", "method_name": "addStringToArray", "codes": ["public static String[] addStringToArray(String[] array,String str){\n\tif(array == null){\n\t\treturn new String[]{str};\n\t}\n\tString[] newArr = new String[array.length + 1];\n\tSystem.arraycopy(array,0,newArr,0,array.length);\n\tnewArr[array.length] = str;\n\treturn newArr;\n}"], "code_level": "slib_runnable", "_id": "6367676a1a6d9265ec0181d4", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_addStringToArray.class"}
{"generate_results": [{"generate_code": "public static int countOccurrencesOf(String str,String sub){\nif (str == null || sub == null) {\nreturn 0;\n}\nint count=0;\nint pos=0;\nint idx;\nwhile ((idx=str.indexOf(sub,pos))!= -1) {\n++count;\npos=idx + sub.length();\n}\nreturn count;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns the number of occurrences the substring  {@code sub} appears in string {@code str}.\n * @param str string to search in. Return 0 if this is null.\n * @param sub string to search for. Return 0 if this is null.\n * @return the number of occurrences the substring {@code sub} appears in string {@code str}.\n */\n", "method_name": "countOccurrencesOf", "codes": ["public static int countOccurrencesOf(String str,String sub){\nif (str == null || sub == null) {\nreturn 0;\n}\nint count=0;\nint pos=0;\nint idx;\nwhile ((idx=str.indexOf(sub,pos))!= -1) {\n++count;\npos=idx + sub.length();\n}\nreturn count;\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181dd", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_countOccurrencesOf.class"}
{"generate_results": [{"generate_code": "public static String stripFilenameExtension(String path){\nif(path == null) {\nreturn null;\n}\nint extensionPos = path.lastIndexOf(EXTENSION_SEPARATOR);\nint lastSeparator = path.lastIndexOf(FOLDER_SEPARATOR);\nif(lastSeparator > extensionPos) {\nreturn path;\n}\nreturn path.substring(0,extensionPos);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 6\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4606)\n\tat java.base/java.lang.String.substring(String.java:2709)\n\tat io.jsonwebtoken.lang.Strings.stripFilenameExtension(Strings.java:559)\n\tat io.jsonwebtoken.lang.Strings_stripFilenameExtension.main(Strings_stripFilenameExtension.java:8)\n", "is_pass": false}], "docstring": "/** \n * Strip the filename extension from the given path, e.g. \"mypath/myfile.txt\" -&gt; \"mypath/myfile\".\n * @param path the file path (may be <code>null</code>)\n * @return the path with stripped filename extension,or <code>null</code> if none\n */\n", "method_name": "stripFilenameExtension", "codes": ["public static String stripFilenameExtension(String path){\nif(path == null) {\nreturn null;\n}\nint extensionPos = path.lastIndexOf(EXTENSION_SEPARATOR);\nint lastSeparator = path.lastIndexOf(FOLDER_SEPARATOR);\nif(lastSeparator > extensionPos) {\nreturn path;\n}\nreturn path.substring(0,extensionPos);\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec018220", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_stripFilenameExtension.class"}
{"generate_results": [{"generate_code": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n\tif(str == null){\n\t\treturn null;\n\t}\n\tint strLen=str.length();\n\tif(strLen == 0){\n\t\treturn str;\n\t}\n\tint start=0;\n\tchar[] chars=str.toCharArray();\n\twhile(start!= strLen && chars[start] == leadingCharacter){\n\t\tstart++;\n\t}\n\treturn (start == 0)? str : str.substring(start);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Trim all occurrences of the supplied leading character from the given String.\n * @param str the String to check\n * @param leadingCharacter the leading character to be trimmed\n * @return the trimmed String\n */\n", "method_name": "trimLeadingCharacter", "codes": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n\tif(str == null){\n\t\treturn null;\n\t}\n\tint strLen=str.length();\n\tif(strLen == 0){\n\t\treturn str;\n\t}\n\tint start=0;\n\tchar[] chars=str.toCharArray();\n\twhile(start!= strLen && chars[start] == leadingCharacter){\n\t\tstart++;\n\t}\n\treturn (start == 0)? str : str.substring(start);\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a7", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimLeadingCharacter.class"}
{"generate_results": [{"generate_code": "public static String[] split(String toSplit,String delimiter){\n    if(toSplit==null){\n        return null;\n    }\n\treturn toSplit.split(delimiter);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0\n\tat io.jsonwebtoken.lang.Strings_split.main(Strings_split.java:6)\n", "is_pass": false}], "docstring": "/** \n * Split a String at the first occurrence of the delimiter. Does not include the delimiter in the result.\n * @param toSplit the string to split\n * @param delimiter to split the string up with\n * @return a two element array with index 0 being before the delimiter, andindex 1 being after the delimiter (neither element includes the delimiter); or <code>null</code> if the delimiter wasn't found in the given input String\n */\n", "method_name": "split", "codes": ["public static String[] split(String toSplit,String delimiter){\n    if(toSplit==null){\n        return null;\n    }\n\treturn toSplit.split(delimiter);\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a6", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_split.class"}
{"generate_results": [{"generate_code": "public static String applyRelativePath(String path,String relativePath){\n    if(path==null){\n\treturn null;\n    }\n\tint separatorIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n\tif(separatorIndex!=(-1)){\n\t\tString newPath=path.substring(0,separatorIndex);\n\t\tif(!relativePath.startsWith(FOLDER_SEPARATOR)){\n\t\t\tnewPath+=FOLDER_SEPARATOR;\n\t\t}\n\t\treturn newPath+relativePath;\n\t}else{\n\t\treturn relativePath;\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Apply the given relative path to the given path, assuming standard Java folder separation (i.e. \"/\" separators).\n * @param path the path to start from (usually a full file path)\n * @param relativePath the relative path to apply(relative to the full file path above)\n * @return the full file path that results from applying the relative path\n */\n", "method_name": "applyRelativePath", "codes": ["public static String applyRelativePath(String path,String relativePath){\n    if(path==null){\n\treturn null;\n    }\n\tint separatorIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n\tif(separatorIndex!=(-1)){\n\t\tString newPath=path.substring(0,separatorIndex);\n\t\tif(!relativePath.startsWith(FOLDER_SEPARATOR)){\n\t\t\tnewPath+=FOLDER_SEPARATOR;\n\t\t}\n\t\treturn newPath+relativePath;\n\t}else{\n\t\treturn relativePath;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181ac", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_applyRelativePath.class"}
{"generate_results": [{"generate_code": "public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\tif (str == null || substring == null) {\n\t\treturn false;\n\t}\n\tif (index < 0 || index > str.length() - substring.length()) {\n\t\treturn false;\n\t}\n\tif (str instanceof String && substring instanceof String) {\n\t\treturn ((String) str).startsWith((String) substring, index);\n\t}\n\tfor (int j = substring.length() - 1; j >= 0; j--) {\n\t\tif (str.charAt(index++)!= substring.charAt(j)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns  {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n * @param str the original string (or StringBuilder)\n * @param index the index in the original string to start matching against\n * @param substring the substring to match at the given index\n * @return {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n */\n", "method_name": "substringMatch", "codes": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n\tif (str == null || substring == null) {\n\t\treturn false;\n\t}\n\tif (index < 0 || index > str.length() - substring.length()) {\n\t\treturn false;\n\t}\n\tif (str instanceof String && substring instanceof String) {\n\t\treturn ((String) str).startsWith((String) substring, index);\n\t}\n\tfor (int j = substring.length() - 1; j >= 0; j--) {\n\t\tif (str.charAt(index++)!= substring.charAt(j)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "slib_runnable", "_id": "6367676b1a6d9265ec0181e9", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_substringMatch.class"}
{"generate_results": [{"generate_code": "protected static void deleteFile(String fileName){\n    if(fileName==null){\nreturn;\n}\nFile file=new File(fileName);\nif(file.exists()){\nif(!file.delete()){\nLogLog.error(\"Could not delete file \"+fileName);\n}\n}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Delete's the specified file if it exists \n */\n", "method_name": "deleteFile", "codes": ["protected static void deleteFile(String fileName){\n    if(fileName==null){\nreturn;\n}\nFile file=new File(fileName);\nif(file.exists()){\nif(!file.delete()){\nLogLog.error(\"Could not delete file \"+fileName);\n}\n}\n}"], "code_level": "slib_runnable", "_id": "636767821a6d9265ec0183a0", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/CompositeRollingAppender_deleteFile.class"}
{"generate_results": [{"generate_code": "public String format(LoggingEvent event){\n\tif (head == null) {\n\t\treturn null;\n\t}\n\thead.format(event);\n\treturn sbuf.toString();\n}", "errormessage": "compile error", "error_detail_message": "PatternLayout.java:496: error: method format in class PatternConverter cannot be applied to given types;\n\thead.format(event);\n\t    ^\n  required: StringBuffer,LoggingEvent\n  found:    LoggingEvent\n  reason: actual and formal argument lists differ in length\n1 error\n", "is_pass": false}], "docstring": "/** \n * Produces a formatted string as specified by the conversion pattern.\n */\n", "method_name": "format", "codes": ["public String format(LoggingEvent event){\n\tif (head == null) {\n\t\treturn null;\n\t}\n\thead.format(event);\n\treturn sbuf.toString();\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01830f", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/PatternLayout_format.java"}
{"generate_results": [{"generate_code": "protected void subAppend(LoggingEvent event){\n\tif(event == null){\n\t\treturn;\n\t}\n\tif(layout == null){\n\t\treturn;\n\t}\n\ttry{\n\t\tif(writer == null){\n\t\t\twriter = new BufferedWriter(new FileWriter(tempFile));\n\t\t}\n\t\tlayout.format(writer,event);\n\t\twriter.flush();\n\t}catch(IOException e){\n\t\tErrorHandler.error(\"IOException while writing to temp file \" + tempFile.getName(),e,ErrorHandler.ERROR);\n\t}\n}", "errormessage": "compile error", "error_detail_message": "TempFileAppender.java:180: error: class, interface, enum, or record expected\n  public boolean requiresLayout() {\n         ^\nTempFileAppender.java:182: error: class, interface, enum, or record expected\n  }\n  ^\nTempFileAppender.java:184: error: class, interface, enum, or record expected\n  public void close() {\n         ^\n3 errors\n", "is_pass": false}], "docstring": "/** \n * This method does actual writing\n */\n", "method_name": "subAppend", "codes": ["protected void subAppend(LoggingEvent event){\n\tif(event == null){\n\t\treturn;\n\t}\n\tif(layout == null){\n\t\treturn;\n\t}\n\ttry{\n\t\tif(writer == null){\n\t\t\twriter = new BufferedWriter(new FileWriter(tempFile));\n\t\t}\n\t\tlayout.format(writer,event);\n\t\twriter.flush();\n\t}catch(IOException e){\n\t\tErrorHandler.error(\"IOException while writing to temp file \" + tempFile.getName(),e,ErrorHandler.ERROR);\n\t}\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/TempFileAppender_subAppend.java"}
{"generate_results": [{"generate_code": "public static String peek(){\n    if(stack.size() == 0) return null;\n\treturn (String)stack.peek();\n}", "errormessage": "compile error", "error_detail_message": "NDC.java:309: error: cannot find symbol\n    if(stack.size() == 0) return null;\n       ^\n  symbol:   variable stack\n  location: class NDC\nNDC.java:310: error: cannot find symbol\n\treturn (String)stack.peek();\n\t               ^\n  symbol:   variable stack\n  location: class NDC\nNote: NDC.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Looks at the last diagnostic context at the top of this NDC without removing it. <p>The returned value is the value that was pushed last. If no context is available, then the empty string \"\" is returned.\n * @return String The innermost diagnostic context.\n */\n", "method_name": "peek", "codes": ["public static String peek(){\n    if(stack.size() == 0) return null;\n\treturn (String)stack.peek();\n}"], "code_level": "class_runnable", "_id": "636767831a6d9265ec0183c9", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/NDC_peek.java"}
{"generate_results": [{"generate_code": "public Logger exists(String name){\n    if(name == null)\n        return null;\n\treturn null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"org.apache.log4j.Logger.getName()\" because the return value of \"org.apache.log4j.Hierarchy.exists(String)\" is null\n\tat org.apache.log4j.Hierarchy_exists.main(Hierarchy_exists.java:14)\n", "is_pass": false}], "docstring": "/** \n * Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns <code>null</code>.\n * @param name The name of the logger to search for.\n */\n", "method_name": "exists", "codes": ["public Logger exists(String name){\n    if(name == null)\n        return null;\n\treturn null;\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01832e", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/Hierarchy_exists.class"}
{"generate_results": [{"generate_code": "public String format(final LoggingEvent event){\n    if (conversionPattern == null) {\n        return DEFAULT_CONVERSION_PATTERN;\n    }\n\treturn format(event, null);\n}", "errormessage": "compile error", "error_detail_message": "EnhancedPatternLayout.java:435: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected final int BUF_SIZE = 256;\n                      ^\nEnhancedPatternLayout.java:441: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected final int MAX_CAPACITY = 1024;\n                      ^\nEnhancedPatternLayout.java:541: error: method format in class EnhancedPatternLayout cannot be applied to given types;\n\treturn format(event, null);\n\t       ^\n  required: LoggingEvent\n  found:    LoggingEvent,<null>\n  reason: actual and formal argument lists differ in length\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Formats a logging event to a writer.\n * @param event logging event to be formatted.\n */\n", "method_name": "format", "codes": ["public String format(final LoggingEvent event){\n    if (conversionPattern == null) {\n        return DEFAULT_CONVERSION_PATTERN;\n    }\n\treturn format(event, null);\n}"], "code_level": "project_runnable", "_id": "6367677b1a6d9265ec0182bd", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/EnhancedPatternLayout_format.java"}
{"generate_results": [{"generate_code": "private Class findClass(final String className) throws ClassNotFoundException {\n    if (className == null) {\nreturn null;\n}\nClass clazz = null;\nif (classMap.containsKey(className)) {\nclazz = (Class) classMap.get(className);\n} else {\nclazz = Class.forName(className);\nclassMap.put(className, clazz);\n}\nreturn clazz;\n}", "errormessage": "compile error", "error_detail_message": "EnhancedThrowableRenderer.java:155: error: cannot find symbol\nif (classMap.containsKey(className)) {\n    ^\n  symbol:   variable classMap\n  location: class EnhancedThrowableRenderer\nEnhancedThrowableRenderer.java:156: error: cannot find symbol\nclazz = (Class) classMap.get(className);\n                ^\n  symbol:   variable classMap\n  location: class EnhancedThrowableRenderer\nEnhancedThrowableRenderer.java:159: error: cannot find symbol\nclassMap.put(className, clazz);\n^\n  symbol:   variable classMap\n  location: class EnhancedThrowableRenderer\nNote: EnhancedThrowableRenderer.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n", "method_name": "findClass", "codes": ["private Class findClass(final String className) throws ClassNotFoundException {\n    if (className == null) {\nreturn null;\n}\nClass clazz = null;\nif (classMap.containsKey(className)) {\nclazz = (Class) classMap.get(className);\n} else {\nclazz = Class.forName(className);\nclassMap.put(className, clazz);\n}\nreturn clazz;\n}"], "code_level": "slib_runnable", "_id": "636767791a6d9265ec018263", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/EnhancedThrowableRenderer_findClass.java"}
{"generate_results": [{"generate_code": "public void addMessage(final LogRecord lr){\n\tif (lr == null) {\n\t\treturn;\n\t}\n\tif (lr.getLevel().isGreaterOrEqual(getLeastSevereDisplayedLogLevel())) {\n\t\tif (getLogLevelMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}", "errormessage": "compile error", "error_detail_message": "LogBrokerMonitor.java:320: error: illegal start of expression\n  public void setMaxNumberOfLogRecords(int maxNumberOfLogRecords) {\n  ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Add a log record message to be displayed in the LogTable. This method is thread-safe as it posts requests to the SwingThread rather than processing directly.\n */\n", "method_name": "addMessage", "codes": ["public void addMessage(final LogRecord lr){\n\tif (lr == null) {\n\t\treturn;\n\t}\n\tif (lr.getLevel().isGreaterOrEqual(getLeastSevereDisplayedLogLevel())) {\n\t\tif (getLogLevelMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}\n\t\tif (getLogLevelColorMenuItems().get(lr.getLevel())!= null) {\n\t\t\tgetLogLevelColorMenuItems().get(lr.getLevel()).setSelected(true);\n\t\t}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec018257", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/LogBrokerMonitor_addMessage.java"}
{"generate_results": [{"generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n if (row<0) {\n return;\n}if (row>=table.getRowCount()) {\n return;\n}if (table.getSelectedRow()==row) {\n return;\n}table.setRowSelectionInterval(row,row);\n if (pane!=null) {\n moveAdjustable(row,pane.getVerticalScrollBar());\n}repaintLater(table);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Selects a the specified row in the specified JTable and scrolls the specified JScrollpane to the newly selected row. More importantly, the call to repaint() delayed long enough to have the table properly paint the newly selected row which may be offscre\n * @param table should belong to the specified JScrollPane\n */\n", "method_name": "selectRow", "codes": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n if (row<0) {\n return;\n}if (row>=table.getRowCount()) {\n return;\n}if (table.getSelectedRow()==row) {\n return;\n}table.setRowSelectionInterval(row,row);\n if (pane!=null) {\n moveAdjustable(row,pane.getVerticalScrollBar());\n}repaintLater(table);\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183ff", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/viewer/LF5SwingUtils_selectRow.class"}
{"generate_results": [{"generate_code": "public static void createConfigurationDirectory(){\n    if(System.getProperty(\"user.home\")==null){\nSystem.out.println(\"user.home is null\");\nreturn;\n}\nFile lf5Dir=new File(System.getProperty(\"user.home\")+\"/lf5\");\nif(!lf5Dir.exists()){\nlf5Dir.mkdir();\n}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Creates the directory where the MRU file list will be written. The \"lf5\" directory is created in the Documents and Settings directory on Windows 2000 machines and where ever the user.home variable points on all other platforms.\n */\n", "method_name": "createConfigurationDirectory", "codes": ["public static void createConfigurationDirectory(){\n    if(System.getProperty(\"user.home\")==null){\nSystem.out.println(\"user.home is null\");\nreturn;\n}\nFile lf5Dir=new File(System.getProperty(\"user.home\")+\"/lf5\");\nif(!lf5Dir.exists()){\nlf5Dir.mkdir();\n}\n}"], "code_level": "slib_runnable", "_id": "636767871a6d9265ec01846d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/viewer/configure/MRUFileManager_createConfigurationDirectory.class"}
{"generate_results": [{"generate_code": "public synchronized void send(final String message){\n\tif(writers==null){\n\t\treturn;\n\t}\n\tIterator it=writers.iterator();\n\twhile(it.hasNext()){\n\t\tPrintWriter writer=(PrintWriter)it.next();\n\t\twriter.println(message);\n\t\twriter.flush();\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * sends a message to each of the clients in telnet-friendly output. \n */\n", "method_name": "send", "codes": ["public synchronized void send(final String message){\n\tif(writers==null){\n\t\treturn;\n\t}\n\tIterator it=writers.iterator();\n\twhile(it.hasNext()){\n\t\tPrintWriter writer=(PrintWriter)it.next();\n\t\twriter.println(message);\n\t\twriter.flush();\n\t}\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec018347", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/net/TelnetAppender_send.class"}
{"generate_results": [{"generate_code": "protected void append(LoggingEvent event){\nif(isAsSevereAsThreshold(event.getLevel())){\nif(layout.ignoresThrowable()){\nString s=layout.format(event);\nif(s!=null){\nsend(s);\n}\n}else{\nString s=layout.format(event);\nif(s!=null){\nsend(s);\n}\nif(event.getThrowableInformation()!=null){\nString[] s=event.getThrowableStrRep();\nfor(int i=0; i < s.length; i++){\nsend(s[i]);\n}\n}\n}\n}\n}", "errormessage": "compile error", "error_detail_message": "TelnetAppender.java:238: error: class, interface, enum, or record expected\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n", "method_name": "append", "codes": ["protected void append(LoggingEvent event){\nif(isAsSevereAsThreshold(event.getLevel())){\nif(layout.ignoresThrowable()){\nString s=layout.format(event);\nif(s!=null){\nsend(s);\n}\n}else{\nString s=layout.format(event);\nif(s!=null){\nsend(s);\n}\nif(event.getThrowableInformation()!=null){\nString[] s=event.getThrowableStrRep();\nfor(int i=0; i < s.length; i++){\nsend(s[i]);\n}\n}\n}\n}\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823e", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/net/TelnetAppender_append.java"}
{"generate_results": [{"generate_code": "public void put(LoggingEvent o){\n\tif(buf==null){\n\t\tbuf=new LoggingEvent[10];\n\t\tmaxSize=10;\n\t\tfirst=0;\n\t\tnext=0;\n\t}\n\tif(next==maxSize){\n\t\tnext=0;\n\t}\n\tbuf[next]=o;\n\tnext++;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Place a  {@link LoggingEvent} in the buffer. If the buffer is fullthen the event is <b>silently dropped</b>. It is the caller's responsability to make sure that the buffer has free space.  \n */\n", "method_name": "put", "codes": ["public void put(LoggingEvent o){\n\tif(buf==null){\n\t\tbuf=new LoggingEvent[10];\n\t\tmaxSize=10;\n\t\tfirst=0;\n\t\tnext=0;\n\t}\n\tif(next==maxSize){\n\t\tnext=0;\n\t}\n\tbuf[next]=o;\n\tnext++;\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec01834b", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/BoundedFIFO_put.class"}
{"generate_results": [{"generate_code": "public static String findAndSubst(String key,Properties props){\n    if(key==null)\n        return null;\nreturn null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\" because the return value of \"org.apache.log4j.helpers.OptionConverter.findAndSubst(String, java.util.Properties)\" is null\n\tat org.apache.log4j.helpers.OptionConverter_findAndSubst.main(OptionConverter_findAndSubst.java:12)\n", "is_pass": false}], "docstring": "/** \n * Find the value corresponding to <code>key</code> in <code>props</code>. Then perform variable substitution on the found value.\n */\n", "method_name": "findAndSubst", "codes": ["public static String findAndSubst(String key,Properties props){\n    if(key==null)\n        return null;\nreturn null;\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec01826d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/OptionConverter_findAndSubst.class"}
{"generate_results": [{"generate_code": "public boolean isAttached(Appender appender){\n    if(appenderList == null) return false;\n\treturn appenderList.contains(appender);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns <code>true</code> if the specified appender is in the list of attached appenders, <code>false</code> otherwise.\n * @since 1.2 \n */\n", "method_name": "isAttached", "codes": ["public boolean isAttached(Appender appender){\n    if(appenderList == null) return false;\n\treturn appenderList.contains(appender);\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018238", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_isAttached.class"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(String value,boolean dEfault){\nif(value == null) return dEfault;\nvalue = value.trim();\nif(value.equalsIgnoreCase(\"true\")) return true;\nif(value.equalsIgnoreCase(\"false\")) return false;\nreturn dEfault;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * If <code>value</code> is \"true\", then <code>true</code> is returned. If <code>value</code> is \"false\", then <code>true</code> is returned. Otherwise, <code>default</code> is returned. <p>Case of value is unimportant.  \n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(String value,boolean dEfault){\nif(value == null) return dEfault;\nvalue = value.trim();\nif(value.equalsIgnoreCase(\"true\")) return true;\nif(value.equalsIgnoreCase(\"false\")) return false;\nreturn dEfault;\n}"], "code_level": "self_contained", "_id": "6367677d1a6d9265ec0182fd", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/OptionConverter_toBoolean.class"}
{"generate_results": [{"generate_code": "public void add(LoggingEvent event){\n\tif(numElems == maxSize){\n\t\tresize(maxSize * 2);\n\t}\n\tea[last] = event;\n\tlast = (last + 1) % maxSize;\n\tnumElems++;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add an <code>event</code> as the last event in the buffer.\n */\n", "method_name": "add", "codes": ["public void add(LoggingEvent event){\n\tif(numElems == maxSize){\n\t\tresize(maxSize * 2);\n\t}\n\tea[last] = event;\n\tlast = (last + 1) % maxSize;\n\tnumElems++;\n}"], "code_level": "class_runnable", "_id": "636767841a6d9265ec0183e8", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/CyclicBuffer_add.class"}
{"generate_results": [{"generate_code": "public void removeAppender(String name){\n\tif (name == null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (appenderList == null) {\n\t\t\treturn;\n\t\t}\n\t\tEnumeration e = appenderList.elements();\n\t\twhile (e.hasMoreElements()) {\n\t\t\tAppender appender = (Appender) e.nextElement();\n\t\t\tif (name.equals(appender.getName())) {\n\t\t\t\tappenderList.removeElement(appender);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Remove the appender with the name passed as parameter form the list of appenders.  \n */\n", "method_name": "removeAppender", "codes": ["public void removeAppender(String name){\n\tif (name == null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (appenderList == null) {\n\t\t\treturn;\n\t\t}\n\t\tEnumeration e = appenderList.elements();\n\t\twhile (e.hasMoreElements()) {\n\t\t\tAppender appender = (Appender) e.nextElement();\n\t\t\tif (name.equals(appender.getName())) {\n\t\t\t\tappenderList.removeElement(appender);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}"], "code_level": "project_runnable", "_id": "636767861a6d9265ec01844c", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_removeAppender.class"}
{"generate_results": [{"generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n    if (appenders == null) {\n        return 0;\n    }\n\tint result = 0;\n\tEnumeration enumeration = appenders.elements();\n\twhile (enumeration.hasMoreElements()) {\n\t\tAppender appender = (Appender) enumeration.nextElement();\n\t\tresult += appender.doAppend(event);\n\t}\n\treturn result;\n}", "errormessage": "compile error", "error_detail_message": "AppenderAttachableImpl.java:56: error: cannot find symbol\n    if (appenders == null) {\n        ^\n  symbol:   variable appenders\n  location: class AppenderAttachableImpl\nAppenderAttachableImpl.java:60: error: cannot find symbol\n\tEnumeration enumeration = appenders.elements();\n\t                          ^\n  symbol:   variable appenders\n  location: class AppenderAttachableImpl\nAppenderAttachableImpl.java:63: error: bad operand types for binary operator '+'\n\t\tresult += appender.doAppend(event);\n\t\t       ^\n  first type:  int\n  second type: void\nNote: AppenderAttachableImpl.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Call the <code>doAppend</code> method on all attached appenders.  \n */\n", "method_name": "appendLoopOnAppenders", "codes": ["public int appendLoopOnAppenders(LoggingEvent event){\n    if (appenders == null) {\n        return 0;\n    }\n\tint result = 0;\n\tEnumeration enumeration = appenders.elements();\n\twhile (enumeration.hasMoreElements()) {\n\t\tAppender appender = (Appender) enumeration.nextElement();\n\t\tresult += appender.doAppend(event);\n\t}\n\treturn result;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018242", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/helpers/AppenderAttachableImpl_appendLoopOnAppenders.java"}
{"generate_results": [{"generate_code": "public boolean hasThrown(){\n    if(_thrown==null)\n        return false;\nreturn _thrown!=null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @return true if getThrown().toString() is a non-empty string.\n */\n", "method_name": "hasThrown", "codes": ["public boolean hasThrown(){\n    if(_thrown==null)\n        return false;\nreturn _thrown!=null;\n}"], "code_level": "class_runnable", "_id": "636767821a6d9265ec0183ab", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/LogRecord_hasThrown.class"}
{"generate_results": [{"generate_code": "protected int removeUnusedNodes(){\n    if (this._categoryModel.getRoot().children().hasMoreElements())\nt.println(\"Exception: \" + e.getMessage());\n\tint removedNodes=0;\n\tEnumeration e=this._categoryModel.getRoot().children();\n\twhile (e.hasMoreElements()){\n\t\tCategoryNode node=(CategoryNode)e.nextElement();\n\t\tif (node.isInactive()){\n\t\t\tthis._categoryModel.removeNodeFromParent(node);\n\t\t\tremovedNodes++;\n\t\t}\n\t}\n\treturn removedNodes;\n}", "errormessage": "compile error", "error_detail_message": "CategoryNodeEditor.java:253: error: cannot find symbol\n    if (this._categoryModel.getRoot().children().hasMoreElements())\n                                     ^\n  symbol:   method children()\n  location: class Object\nCategoryNodeEditor.java:254: error: cannot find symbol\nt.println(\"Exception: \" + e.getMessage());\n                          ^\n  symbol:   variable e\n  location: class CategoryNodeEditor\nCategoryNodeEditor.java:254: error: cannot find symbol\nt.println(\"Exception: \" + e.getMessage());\n^\n  symbol:   variable t\n  location: class CategoryNodeEditor\nCategoryNodeEditor.java:256: error: cannot find symbol\n\tEnumeration e=this._categoryModel.getRoot().children();\n\t                                           ^\n  symbol:   method children()\n  location: class Object\nCategoryNodeEditor.java:259: error: cannot find symbol\n\t\tif (node.isInactive()){\n\t\t        ^\n  symbol:   method isInactive()\n  location: variable node of type CategoryNode\nNote: CategoryNodeEditor.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: CategoryNodeEditor.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n5 errors\n", "is_pass": false}], "docstring": "/** \n * Removes any inactive nodes from the Category tree.\n */\n", "method_name": "removeUnusedNodes", "codes": ["protected int removeUnusedNodes(){\n    if (this._categoryModel.getRoot().children().hasMoreElements())\nt.println(\"Exception: \" + e.getMessage());\n\tint removedNodes=0;\n\tEnumeration e=this._categoryModel.getRoot().children();\n\twhile (e.hasMoreElements()){\n\t\tCategoryNode node=(CategoryNode)e.nextElement();\n\t\tif (node.isInactive()){\n\t\t\tthis._categoryModel.removeNodeFromParent(node);\n\t\t\tremovedNodes++;\n\t\t}\n\t}\n\treturn removedNodes;\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec018314", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/categoryexplorer/CategoryNodeEditor_removeUnusedNodes.java"}
{"generate_results": [{"generate_code": "public int compare(Object aObj1,Object aObj2){\n    if(aObj1==null){\n\treturn -1;\n    }\n\tEventDetails e1=(EventDetails)aObj1;\n\tEventDetails e2=(EventDetails)aObj2;\n\treturn e1.getTimeStamp().compareTo(e2.getTimeStamp());\n}", "errormessage": "compile error", "error_detail_message": "MyTableModel.java:53: error: long cannot be dereferenced\n\treturn e1.getTimeStamp().compareTo(e2.getTimeStamp());\n\t                        ^\nNote: MyTableModel.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: MyTableModel.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * @see Comparator \n */\n", "method_name": "compare", "codes": ["public int compare(Object aObj1,Object aObj2){\n    if(aObj1==null){\n\treturn -1;\n    }\n\tEventDetails e1=(EventDetails)aObj1;\n\tEventDetails e2=(EventDetails)aObj2;\n\treturn e1.getTimeStamp().compareTo(e2.getTimeStamp());\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183f2", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/chainsaw/MyTableModel_compare.java"}
{"generate_results": [{"generate_code": "public int decide(LoggingEvent event){\nif(stringToMatch==null){\nreturn Filter.NEUTRAL;\n}\nif(acceptOnMatch){\nif(event.getMessage().toString().indexOf(stringToMatch)!=-1){\nreturn Filter.ACCEPT;\n}\n}else{\nif(event.getMessage().toString().indexOf(stringToMatch)==-1){\nreturn Filter.ACCEPT;\n}\n}\nreturn Filter.NEUTRAL;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns  {@link Filter#NEUTRAL} is there is no string match.\n */\n", "method_name": "decide", "codes": ["public int decide(LoggingEvent event){\nif(stringToMatch==null){\nreturn Filter.NEUTRAL;\n}\nif(acceptOnMatch){\nif(event.getMessage().toString().indexOf(stringToMatch)!=-1){\nreturn Filter.ACCEPT;\n}\n}else{\nif(event.getMessage().toString().indexOf(stringToMatch)==-1){\nreturn Filter.ACCEPT;\n}\n}\nreturn Filter.NEUTRAL;\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018250", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/varia/StringMatchFilter_decide.class"}
{"generate_results": [{"generate_code": "public void abbreviate(final int nameStart,final StringBuffer buf){\n\tif(nameStart<0){\n\t\treturn;\n\t}\n\tint startPos=nameStart;\n\tfor(int i=0;i<fragments.length;i++){\n\t\tfragments[i].abbreviate(buf,startPos);\n\t\tstartPos=buf.length();\n\t}\n}", "errormessage": "compile error", "error_detail_message": "NameAbbreviator.java:228: error: cannot find symbol\n\tfor(int i=0;i<fragments.length;i++){\n\t              ^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNameAbbreviator.java:229: error: cannot find symbol\n\t\tfragments[i].abbreviate(buf,startPos);\n\t\t^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNote: NameAbbreviator.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Abbreviate name.\n * @param buf buffer to append abbreviation.\n * @param nameStart start of name to abbreviate.\n */\n", "method_name": "abbreviate", "codes": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n\tif(nameStart<0){\n\t\treturn;\n\t}\n\tint startPos=nameStart;\n\tfor(int i=0;i<fragments.length;i++){\n\t\tfragments[i].abbreviate(buf,startPos);\n\t\tstartPos=buf.length();\n\t}\n}"], "code_level": "class_runnable", "_id": "636767861a6d9265ec018440", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/pattern/NameAbbreviator_abbreviate.java"}
{"generate_results": [{"generate_code": "public String id(String entityId){\n    if(entityId == null){\n        return null;\n    }\nreturn point + Const.ID_CONNECTOR + entityId;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\" because the return value of \"org.apache.skywalking.oap.server.core.query.PointOfTime.id(String)\" is null\n\tat org.apache.skywalking.oap.server.core.query.PointOfTime_id.main(PointOfTime_id.java:7)\n", "is_pass": false}], "docstring": "/** \n * @return the row id\n */\n", "method_name": "id", "codes": ["public String id(String entityId){\n    if(entityId == null){\n        return null;\n    }\nreturn point + Const.ID_CONNECTOR + entityId;\n}"], "code_level": "project_runnable", "_id": "636767df1a6d9265ec01873c", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/query/PointOfTime_id.class"}
{"generate_results": [{"generate_code": "@Override public void accept(final METRICS data){\nif(buffer.containsKey(data.getId())){\nfinal METRICS existing = buffer.get(data.getId());\nfinal METRICS combined = existing.combine(data);\nif(combined.isAbandoned()){\nbuffer.remove(data.getId());\n}else{\nbuffer.put(data.getId(),combined);\n}\n}else{\nbuffer.put(data.getId(),data);\n}\n}", "errormessage": "compile error", "error_detail_message": "MergableBufferedData.java:41: error: cannot find symbol\nif(buffer.containsKey(data.getId())){\n                          ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:42: error: cannot find symbol\nfinal METRICS existing = buffer.get(data.getId());\n                                        ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:43: error: incompatible types: boolean cannot be converted to METRICS\nfinal METRICS combined = existing.combine(data);\n                                         ^\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:44: error: cannot find symbol\nif(combined.isAbandoned()){\n           ^\n  symbol:   method isAbandoned()\n  location: variable combined of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:45: error: cannot find symbol\nbuffer.remove(data.getId());\n                  ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:47: error: cannot find symbol\nbuffer.put(data.getId(),combined);\n               ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:50: error: cannot find symbol\nbuffer.put(data.getId(),data);\n               ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\n7 errors\n", "is_pass": false}], "docstring": "/** \n * Accept the data into the cache and merge with the existing value. This method is not thread safe, should avoid concurrency calling.\n * @param data to be added potentially.\n */\n", "method_name": "accept", "codes": ["@Override public void accept(final METRICS data){\nif(buffer.containsKey(data.getId())){\nfinal METRICS existing = buffer.get(data.getId());\nfinal METRICS combined = existing.combine(data);\nif(combined.isAbandoned()){\nbuffer.remove(data.getId());\n}else{\nbuffer.put(data.getId(),combined);\n}\n}else{\nbuffer.put(data.getId(),data);\n}\n}"], "code_level": "self_contained", "_id": "636767e11a6d9265ec018781", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/MergableBufferedData_accept.java"}
{"generate_results": [{"generate_code": "protected List<TimeRange> buildTimeRanges(long start,long end){\n    if(start>end){\n        return Collections.emptyList();\n    }\n\tList<TimeRange> timeRanges=new ArrayList<>();\n\tlong timeRangeStart=start;\n\twhile(timeRangeStart<end){\n\t\tlong timeRangeEnd=timeRangeStart+FETCH_DATA_DURATION;\n\t\tif(timeRangeEnd>end){\n\t\t\ttimeRangeEnd=end;\n\t\t}\n\t\ttimeRanges.add(new TimeRange(timeRangeStart,timeRangeEnd));\n\t\ttimeRangeStart=timeRangeEnd;\n\t}\n\treturn timeRanges;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}\n */\n", "method_name": "buildTimeRanges", "codes": ["protected List<TimeRange> buildTimeRanges(long start,long end){\n    if(start>end){\n        return Collections.emptyList();\n    }\n\tList<TimeRange> timeRanges=new ArrayList<>();\n\tlong timeRangeStart=start;\n\twhile(timeRangeStart<end){\n\t\tlong timeRangeEnd=timeRangeStart+FETCH_DATA_DURATION;\n\t\tif(timeRangeEnd>end){\n\t\t\ttimeRangeEnd=end;\n\t\t}\n\t\ttimeRanges.add(new TimeRange(timeRangeStart,timeRangeEnd));\n\t\ttimeRangeStart=timeRangeEnd;\n\t}\n\treturn timeRanges;\n}"], "code_level": "self_contained", "_id": "636767df1a6d9265ec018744", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/profiling/ebpf/analyze/EBPFProfilingAnalyzer_buildTimeRanges.class"}
{"generate_results": [{"generate_code": "public void valueAccumulation(String key,Long value){\n\tif(data.containsKey(key)){\n\t\tdata.put(key,data.get(key)+value);\n\t}else{\n\t\tdata.put(key,value);\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Accumulate the value with existing value in the same given key.\n */\n", "method_name": "valueAccumulation", "codes": ["public void valueAccumulation(String key,Long value){\n\tif(data.containsKey(key)){\n\t\tdata.put(key,data.get(key)+value);\n\t}else{\n\t\tdata.put(key,value);\n\t}\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec01871c", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/analysis/metrics/DataTable_valueAccumulation.class"}
{"generate_results": [{"generate_code": "public boolean isExpired(long timestamp,long expiredThreshold){\n    if(lastUpdateTimestamp==0)return true;\nreturn timestamp-lastUpdateTimestamp>expiredThreshold;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * @param timestamp        of current time\n * @param expiredThreshold represents the duration between last update time and the time point removing from cache.\n * @return true means this metrics should be removed from cache.\n */\n", "method_name": "isExpired", "codes": ["public boolean isExpired(long timestamp,long expiredThreshold){\n    if(lastUpdateTimestamp==0)return true;\nreturn timestamp-lastUpdateTimestamp>expiredThreshold;\n}"], "code_level": "class_runnable", "_id": "636767dd1a6d9265ec0186de", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics_isExpired.class"}
{"generate_results": [{"generate_code": "private Map<String,Object> buildContent(JsonObject jsonObject){\n    if(jsonObject == null){\n        return null;\n    }\nMap<String,Object> content = new HashMap<>();\ncontent.put(\"msg_type\",\"text\");\ncontent.put(\"content\",jsonObject);\nreturn content;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * build content,if it has ats someone set the ats\n */\n", "method_name": "buildContent", "codes": ["private Map<String,Object> buildContent(JsonObject jsonObject){\n    if(jsonObject == null){\n        return null;\n    }\nMap<String,Object> content = new HashMap<>();\ncontent.put(\"msg_type\",\"text\");\ncontent.put(\"content\",jsonObject);\nreturn content;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018755", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-alarm-plugin/target/classes/org/apache/skywalking/oap/server/core/alarm/provider/feishu/FeishuHookCallback_buildContent.class"}
{"generate_results": [{"generate_code": "private void check(String modelName) throws IllegalStateException {\n\tif (keys.stream().anyMatch(key -> key.isNull())) {\n\t\tthrow new IllegalStateException(\"The key of model \" + modelName + \" contains null.\");\n\t}\n}", "errormessage": "compile error", "error_detail_message": "StorageModels.java:332: error: cannot find symbol\n\tif (keys.stream().anyMatch(key -> key.isNull())) {\n\t                                     ^\n  symbol:   method isNull()\n  location: variable key of type ModelColumn\nNote: StorageModels.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n", "method_name": "check", "codes": ["private void check(String modelName) throws IllegalStateException {\n\tif (keys.stream().anyMatch(key -> key.isNull())) {\n\t\tthrow new IllegalStateException(\"The key of model \" + modelName + \" contains null.\");\n\t}\n}"], "code_level": "self_contained", "_id": "636767de1a6d9265ec01871e", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels_check.java"}
{"generate_results": [{"generate_code": "public void overrideName(String oldName,String newName){\n\tif(CollectionUtils.isEmpty(this.columns)){\n\t\treturn;\n\t}\n\tfor(int i=0;i<this.columns.length;i++){\n\t\tif(this.columns[i].equals(oldName)){\n\t\t\tthis.columns[i]=newName;\n\t\t}\n\t}\n}", "errormessage": "compile error", "error_detail_message": "SQLDatabaseExtension.java:57: error: no suitable method found for isEmpty(String[])\n\tif(CollectionUtils.isEmpty(this.columns)){\n\t                  ^\n    method CollectionUtils.isEmpty(Map) is not applicable\n      (argument mismatch; String[] cannot be converted to Map)\n    method CollectionUtils.isEmpty(List) is not applicable\n      (argument mismatch; String[] cannot be converted to List)\n    method CollectionUtils.isEmpty(Set) is not applicable\n      (argument mismatch; String[] cannot be converted to Set)\n    method CollectionUtils.isEmpty(byte[]) is not applicable\n      (argument mismatch; String[] cannot be converted to byte[])\n1 error\n", "is_pass": false}], "docstring": "/** \n * Keep the same name replacement as  {@link ColumnName#overrideName(String,String)}\n * @param oldName to be replaced.\n * @param newName to use in the storage level.\n */\n", "method_name": "overrideName", "codes": ["public void overrideName(String oldName,String newName){\n\tif(CollectionUtils.isEmpty(this.columns)){\n\t\treturn;\n\t}\n\tfor(int i=0;i<this.columns.length;i++){\n\t\tif(this.columns[i].equals(oldName)){\n\t\t\tthis.columns[i]=newName;\n\t\t}\n\t}\n}"], "code_level": "self_contained", "_id": "636767dd1a6d9265ec0186f3", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/SQLDatabaseExtension_overrideName.java"}
{"generate_results": [{"generate_code": "public boolean isCompatible(DataTable dataset){\n\tif(dataset.getBuckets().length!= buckets.length){\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < buckets.length; i++){\n\t\tif(buckets[i]!= dataset.getBuckets()[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "compile error", "error_detail_message": "BucketedValues.java:69: error: cannot find symbol\n\tif(dataset.getBuckets().length!= buckets.length){\n\t          ^\n  symbol:   method getBuckets()\n  location: variable dataset of type DataTable\nBucketedValues.java:73: error: cannot find symbol\n\t\tif(buckets[i]!= dataset.getBuckets()[i]){\n\t\t                       ^\n  symbol:   method getBuckets()\n  location: variable dataset of type DataTable\n2 errors\n", "is_pass": false}], "docstring": "/** \n * @return true if the bucket is same.\n */\n", "method_name": "isCompatible", "codes": ["public boolean isCompatible(DataTable dataset){\n\tif(dataset.getBuckets().length!= buckets.length){\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < buckets.length; i++){\n\t\tif(buckets[i]!= dataset.getBuckets()[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "plib_runnable", "_id": "636767e11a6d9265ec018795", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/BucketedValues_isCompatible.java"}
{"generate_results": [{"generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    if(Objects.isNull(mappings)){\n        return null;\n    }\n\tMappings.Source source = mappings.getSource();\n\tFields fields = new Fields(source);\n\treturn diffFields(fields);\n}", "errormessage": "compile error", "error_detail_message": "IndexStructures.java:72: error: incompatible types: Source cannot be converted to Mappings\n\tFields fields = new Fields(source);\n\t                           ^\nIndexStructures.java:73: error: cannot find symbol\n\treturn diffFields(fields);\n\t       ^\n  symbol:   method diffFields(Fields)\n  location: class IndexStructures\nNote: IndexStructures.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Returns mappings with fields that not exist in the input mappings. The input mappings should be history mapping from current index. Do not return _source config to avoid current index update conflict.\n */\n", "method_name": "diffStructure", "codes": ["public Mappings diffStructure(String tableName,Mappings mappings){\n    if(Objects.isNull(mappings)){\n        return null;\n    }\n\tMappings.Source source = mappings.getSource();\n\tFields fields = new Fields(source);\n\treturn diffFields(fields);\n}"], "code_level": "plib_runnable", "_id": "636767de1a6d9265ec018706", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructures_diffStructure.java"}
{"generate_results": [{"generate_code": "static long compressTimeBucket(long timeBucket,int dayStep){\n    if(dayStep==Const.DAY_STEP){\n        return timeBucket;\n    }\n\treturn compressDateTime(TIME_BUCKET_FORMATTER.print(new DateTime(timeBucket)),dayStep);\n}", "errormessage": "compile error", "error_detail_message": "TimeSeriesUtils.java:144: error: cannot find symbol\n    if(dayStep==Const.DAY_STEP){\n                     ^\n  symbol:   variable DAY_STEP\n  location: class Const\nTimeSeriesUtils.java:147: error: incompatible types: String cannot be converted to DateTime\n\treturn compressDateTime(TIME_BUCKET_FORMATTER.print(new DateTime(timeBucket)),dayStep);\n\t                                                   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n", "method_name": "compressTimeBucket", "codes": ["static long compressTimeBucket(long timeBucket,int dayStep){\n    if(dayStep==Const.DAY_STEP){\n        return timeBucket;\n    }\n\treturn compressDateTime(TIME_BUCKET_FORMATTER.print(new DateTime(timeBucket)),dayStep);\n}"], "code_level": "project_runnable", "_id": "636767dc1a6d9265ec0186be", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils_compressTimeBucket.java"}
{"generate_results": [{"generate_code": "private boolean containsAllFields(Fields fields){\n    if(fields == null || fields.getFields() == null) return false;\n\treturn fields.getFields().stream().allMatch(Objects::nonNull);\n}", "errormessage": "compile error", "error_detail_message": "IndexStructures.java:121: error: class, interface, enum, or record expected\n    public boolean containsMapping(String tableName, Mappings mappings) {\n           ^\nIndexStructures.java:125: error: class, interface, enum, or record expected\n        }\n        ^\nIndexStructures.java:130: error: class, interface, enum, or record expected\n    }\n    ^\nIndexStructures.java:135: error: class, interface, enum, or record expected\n    public boolean compareIndexSetting(String tableName, Map<String, Object> settings) {\n           ^\nIndexStructures.java:139: error: class, interface, enum, or record expected\n        }\n        ^\nIndexStructures.java:144: error: class, interface, enum, or record expected\n    }\n    ^\nIndexStructures.java:228: error: class, interface, enum, or record expected\n}\n^\n7 errors\n", "is_pass": false}], "docstring": "/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n", "method_name": "containsAllFields", "codes": ["private boolean containsAllFields(Fields fields){\n    if(fields == null || fields.getFields() == null) return false;\n\treturn fields.getFields().stream().allMatch(Objects::nonNull);\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186c6", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructures_containsAllFields.java"}
{"generate_results": [{"generate_code": "public void addNewTarget(Channels channels,IConsumer consumer){\n    if(this.consumeTargets==null){\n        this.consumeTargets=new ArrayList<Group>();\n    }\nGroup group=new Group(channels,consumer);\nsynchronized(this.consumeTargets){\nthis.consumeTargets.add(group);\n}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add a new target channels.\n */\n", "method_name": "addNewTarget", "codes": ["public void addNewTarget(Channels channels,IConsumer consumer){\n    if(this.consumeTargets==null){\n        this.consumeTargets=new ArrayList<Group>();\n    }\nGroup group=new Group(channels,consumer);\nsynchronized(this.consumeTargets){\nthis.consumeTargets.add(group);\n}\n}"], "code_level": "plib_runnable", "_id": "636767dd1a6d9265ec0186e5", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-library/library-datacarrier-queue/target/classes/org/apache/skywalking/oap/server/library/datacarrier/consumer/MultipleChannelsConsumer_addNewTarget.class"}
{"generate_results": [{"generate_code": "public void init(){\n    if(analyzeResultDist == null){\n        analyzeResultDist = \"analyzeResult\";\n    }\n\tFile file = new File(analyzeResultDist);\n\tif(!file.exists()){\n\t\tfile.mkdirs();\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * initialize config, such as check dist path\n */\n", "method_name": "init", "codes": ["public void init(){\n    if(analyzeResultDist == null){\n        analyzeResultDist = \"analyzeResult\";\n    }\n\tFile file = new File(analyzeResultDist);\n\tif(!file.exists()){\n\t\tfile.mkdirs();\n\t}\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186cb", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/target/classes/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig_init.class"}
{"generate_results": [{"generate_code": "public List<SequenceRange> buildSequenceRanges(){\n    if(minSequence>maxSequence){\nreturn CollectionUtils.EMPTY_LIST;\n}\nList<SequenceRange> sequenceRanges=new ArrayList<>();\nint min=minSequence;\nint max=minSequence+SEQUENCE_RANGE_BATCH_SIZE-1;\nwhile(max<=maxSequence){\nsequenceRanges.add(new SequenceRange(min,max));\nmin=max+1;\nmax=min+SEQUENCE_RANGE_BATCH_SIZE-1;\n}\nreturn sequenceRanges;\n}", "errormessage": "compile error", "error_detail_message": "ProfiledBasicInfo.java:76: error: cannot find symbol\n        List<BasicTrace> taskTraces = taskQueryService.getTaskTraces(config.getTaskId());\n                                                                           ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:77: error: cannot find symbol\n        BasicTrace profiledTrace = taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n                                                                                                  ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:79: error: cannot find symbol\n            throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId()\n                                                                                                         ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:80: error: cannot find symbol\n                    + \", segment id: \" + config.getTraceId() + \", current task total profiled trace count is \" + taskTraces.size());\n                                               ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:93: error: cannot find symbol\n        Trace trace = traceQueryService.queryTrace(config.getTraceId());\n                                                         ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:114: error: cannot find symbol\n        File file = new File(config.getAnalyzeResultDist() + File.separator + \"basic.yml\");\n                                   ^\n  symbol:   method getAnalyzeResultDist()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:130: error: cannot find symbol\nreturn CollectionUtils.EMPTY_LIST;\n                      ^\n  symbol:   variable EMPTY_LIST\n  location: class CollectionUtils\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:47: error: cannot find symbol\n        config.setTaskId(args[0]);\n              ^\n  symbol:   method setTaskId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:48: error: cannot find symbol\n        config.setTraceId(args[1]);\n              ^\n  symbol:   method setTraceId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:49: error: cannot find symbol\n        config.setAnalyzeResultDist(args[2]);\n              ^\n  symbol:   method setAnalyzeResultDist(String)\n  location: variable config of type ExporterConfig\n10 errors\n", "is_pass": false}], "docstring": "/** \n * build current profiles segment snapshot search sequence ranges\n */\n", "method_name": "buildSequenceRanges", "codes": ["public List<SequenceRange> buildSequenceRanges(){\n    if(minSequence>maxSequence){\nreturn CollectionUtils.EMPTY_LIST;\n}\nList<SequenceRange> sequenceRanges=new ArrayList<>();\nint min=minSequence;\nint max=minSequence+SEQUENCE_RANGE_BATCH_SIZE-1;\nwhile(max<=maxSequence){\nsequenceRanges.add(new SequenceRange(min,max));\nmin=max+1;\nmax=min+SEQUENCE_RANGE_BATCH_SIZE-1;\n}\nreturn sequenceRanges;\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec018726", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo_buildSequenceRanges.java"}
{"generate_results": [{"generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    if (file == null ||!file.exists()) {\n        return null;\n    }\n\tFileInputStream fileInputStream = new FileInputStream(file);\n\ttry {\n\t\treturn parseFromFileWithTimeRange(fileInputStream,timeRanges);\n\t}\n\tfinally {\n\t\tfileInputStream.close();\n\t}\n}", "errormessage": "compile error", "error_detail_message": "ProfileSnapshotDumper.java:53: error: cannot find symbol\n        String segmentId = basicInfo.getSegmentId();\n                                    ^\n  symbol:   method getSegmentId()\n  location: variable basicInfo of type ProfiledBasicInfo\nProfileSnapshotDumper.java:54: error: cannot find symbol\n        File snapshotFile = new File(basicInfo.getConfig().getAnalyzeResultDist() + File.separator + \"snapshot.data\");\n                                              ^\n  symbol:   method getConfig()\n  location: variable basicInfo of type ProfiledBasicInfo\nProfileSnapshotDumper.java:86: error: cannot find symbol\n                return threadSnapshotQueryDAO.queryRecords(segmentId, sequenceRange.getMin(), sequenceRange.getMax());\n                                                                                   ^\n  symbol:   method getMin()\n  location: variable sequenceRange of type SequenceRange\nProfileSnapshotDumper.java:86: error: cannot find symbol\n                return threadSnapshotQueryDAO.queryRecords(segmentId, sequenceRange.getMin(), sequenceRange.getMax());\n                                                                                                           ^\n  symbol:   method getMax()\n  location: variable sequenceRange of type SequenceRange\nProfileSnapshotDumper.java:102: error: incompatible types: FileInputStream cannot be converted to File\n\t\treturn parseFromFileWithTimeRange(fileInputStream,timeRanges);\n\t\t                                  ^\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:69: error: cannot find symbol\n        data.setConfig(config);\n            ^\n  symbol:   method setConfig(ExporterConfig)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:76: error: cannot find symbol\n        List<BasicTrace> taskTraces = taskQueryService.getTaskTraces(config.getTaskId());\n                                                                           ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:77: error: cannot find symbol\n        BasicTrace profiledTrace = taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n                                                                                                  ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:79: error: cannot find symbol\n            throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId()\n                                                                                                         ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:80: error: cannot find symbol\n                    + \", segment id: \" + config.getTraceId() + \", current task total profiled trace count is \" + taskTraces.size());\n                                               ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:87: error: cannot find symbol\n        data.setSegmentId(segmentId);\n            ^\n  symbol:   method setSegmentId(String)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:88: error: cannot find symbol\n        data.setSegmentStartTime(startTime);\n            ^\n  symbol:   method setSegmentStartTime(long)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:89: error: cannot find symbol\n        data.setSegmentEndTime(endTime);\n            ^\n  symbol:   method setSegmentEndTime(long)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:90: error: cannot find symbol\n        data.setDuration(profiledTrace.getDuration());\n            ^\n  symbol:   method setDuration(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:93: error: cannot find symbol\n        Trace trace = traceQueryService.queryTrace(config.getTraceId());\n                                                         ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:98: error: cannot find symbol\n        data.setProfiledSegmentSpans(profiledSegmentSpans);\n            ^\n  symbol:   method setProfiledSegmentSpans(List<Span>)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:103: error: cannot find symbol\n        data.setMinSequence(minSequence);\n            ^\n  symbol:   method setMinSequence(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:104: error: cannot find symbol\n        data.setMaxSequence(maxSequence);\n            ^\n  symbol:   method setMaxSequence(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:114: error: cannot find symbol\n        File file = new File(config.getAnalyzeResultDist() + File.separator + \"basic.yml\");\n                                   ^\n  symbol:   method getAnalyzeResultDist()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:47: error: cannot find symbol\n        config.setTaskId(args[0]);\n              ^\n  symbol:   method setTaskId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:48: error: cannot find symbol\n        config.setTraceId(args[1]);\n              ^\n  symbol:   method setTraceId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:49: error: cannot find symbol\n        config.setAnalyzeResultDist(args[2]);\n              ^\n  symbol:   method setAnalyzeResultDist(String)\n  location: variable config of type ExporterConfig\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n22 errors\n", "is_pass": false}], "docstring": "/** \n * load thread snapshots in appointing time range\n */\n", "method_name": "parseFromFileWithTimeRange", "codes": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    if (file == null ||!file.exists()) {\n        return null;\n    }\n\tFileInputStream fileInputStream = new FileInputStream(file);\n\ttry {\n\t\treturn parseFromFileWithTimeRange(fileInputStream,timeRanges);\n\t}\n\tfinally {\n\t\tfileInputStream.close();\n\t}\n}"], "code_level": "project_runnable", "_id": "636767e11a6d9265ec018790", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfileSnapshotDumper_parseFromFileWithTimeRange.java"}
{"generate_results": [{"generate_code": "private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    if(CollectionUtils.isEmpty(properties)){\nreturn null;\n}\nJsonObject jsonObject = new JsonObject();\nfor(KeyStringValuePair property : properties){\njsonObject.addProperty(property.getKey(),property.getValue());\n}\nreturn jsonObject;\n}", "errormessage": "compile error", "error_detail_message": "EBPFProcessServiceHandler.java:244: error: cannot find symbol\n    if(CollectionUtils.isEmpty(properties)){\n       ^\n  symbol:   variable CollectionUtils\n  location: class EBPFProcessServiceHandler\n1 error\n", "is_pass": false}], "docstring": "/** \n * Convert process properties to source data\n */\n", "method_name": "convertProperties", "codes": ["private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    if(CollectionUtils.isEmpty(properties)){\nreturn null;\n}\nJsonObject jsonObject = new JsonObject();\nfor(KeyStringValuePair property : properties){\njsonObject.addProperty(property.getKey(),property.getValue());\n}\nreturn jsonObject;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018764", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-receiver-plugin/skywalking-ebpf-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/ebpf/provider/handler/EBPFProcessServiceHandler_convertProperties.java"}
{"generate_results": [{"generate_code": "private int pop(){\n    if(outputStackTop < outputStackStart){\n\tthrow new RuntimeException(\"Stack underflow\");\n    }\n\tint abstractType = outputStack[outputStackTop];\n\toutputStackTop--;\n\treturn abstractType;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100\n\tat com.alibaba.fastjson2.internal.asm.Frame.push(Frame.java:517)\n\tat com.alibaba.fastjson2.internal.asm.Frame_pop.main(Frame_pop.java:38)\n", "is_pass": false}], "docstring": "/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n", "method_name": "pop", "codes": ["private int pop(){\n    if(outputStackTop < outputStackStart){\n\tthrow new RuntimeException(\"Stack underflow\");\n    }\n\tint abstractType = outputStack[outputStackTop];\n\toutputStackTop--;\n\treturn abstractType;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c2", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n\tif(currentFrame!=null){\n\t\tthrow new IllegalStateException(\"visitFrameStart must be called before visitFrameEnd\");\n\t}\n\tcurrentFrame=new int[numLocal+numStack];\n\tcurrentFrame[0]=offset;\n\treturn 3;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}.\n * @param offset   the bytecode offset of the instruction to which the frame corresponds.\n * @param numLocal the number of local variables in the frame.\n * @param numStack the number of stack elements in the frame.\n * @return the index of the next element to be written in this frame.\n */\n", "method_name": "visitFrameStart", "codes": ["int visitFrameStart(final int offset,final int numLocal,final int numStack){\n\tif(currentFrame!=null){\n\t\tthrow new IllegalStateException(\"visitFrameStart must be called before visitFrameEnd\");\n\t}\n\tcurrentFrame=new int[numLocal+numStack];\n\tcurrentFrame[0]=offset;\n\treturn 3;\n}"], "code_level": "self_contained", "_id": "636766aa1a6d9265ec0175ce", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/MethodWriter_visitFrameStart.class"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n\tif(size>data.length){\n\t\tbyte[] newData=new byte[size];\n\t\tSystem.arraycopy(data,0,newData,0,data.length);\n\t\tdata=newData;\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n\tif(size>data.length){\n\t\tbyte[] newData=new byte[size];\n\t\tSystem.arraycopy(data,0,newData,0,data.length);\n\t\tdata=newData;\n\t}\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c1", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/ByteVector_enlarge.class"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteLength<0){\n\t\tthrow new IllegalArgumentException(\"byteLength<0\");\n\t}\n\tif(byteOffset<0){\n\t\tthrow new IllegalArgumentException(\"byteOffset<0\");\n\t}\n\tif(byteOffset+byteLength>byteArrayValue.length){\n\t\tthrow new IllegalArgumentException(\"byteOffset+byteLength>byteArrayValue.length\");\n\t}\n\tif(byteLength==0){\n\t\treturn this;\n\t}\n\tif(byteLength==1){\n\t\treturn putByte(byteArrayValue[byteOffset]);\n\t}\n\tif(byteLength==2){\n\t\treturn putShort(byteArrayValue[byteOffset]<<8|byteArrayValue[byteOffset+1]&0xFF);\n\t}\n\tif(byteLength==3){\n\t\treturn put12(byteArrayValue[byteOffset]<<16|byteArrayValue[byteOffset+1]<<8|byteArrayValue[byteOffset+2]&0xFF);\n\t}\n\tif(byteLength==4){\n\t\treturn putInt(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF);\n\t}\n\tif(byteLength==5){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<8|byteArrayValue[byteOffset+5]&0xFF);\n\t}\n\tif(byteLength==6){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<16|byteArrayValue[byteOffset+5]<<8|byteArrayValue[byteOffset+6]&0xFF);\n\t}\n\tif(byteLength==7){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF);\n\t}\n\tif(byteLength==8){\n\t\treturn putLong(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF);\n\t}\n\tif(byteLength==9){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF,byteArrayValue[byteOffset+8]<<8|byteArrayValue[byteOffset+9]&0xFF);\n\t}\n\tif(byteLength==10){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF,byteArrayValue[byteOffset+8]<<16|byteArrayValue[byteOffset+9]<<8|byteArrayValue[byteOffset+10]&0xFF);\n\t}\n\tif(byteLength==11){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<2", "errormessage": "compile error", "error_detail_message": "ByteVector.java:343: error: ')' expected\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<2\n\t\t                                                                                                                                                                               ^\nByteVector.java:349: error: illegal start of expression\n    public void enlarge(final int size) {\n    ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset     index of the first byte of byteArrayValue that must be copied.\n * @param byteLength     number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n\tif(byteLength<0){\n\t\tthrow new IllegalArgumentException(\"byteLength<0\");\n\t}\n\tif(byteOffset<0){\n\t\tthrow new IllegalArgumentException(\"byteOffset<0\");\n\t}\n\tif(byteOffset+byteLength>byteArrayValue.length){\n\t\tthrow new IllegalArgumentException(\"byteOffset+byteLength>byteArrayValue.length\");\n\t}\n\tif(byteLength==0){\n\t\treturn this;\n\t}\n\tif(byteLength==1){\n\t\treturn putByte(byteArrayValue[byteOffset]);\n\t}\n\tif(byteLength==2){\n\t\treturn putShort(byteArrayValue[byteOffset]<<8|byteArrayValue[byteOffset+1]&0xFF);\n\t}\n\tif(byteLength==3){\n\t\treturn put12(byteArrayValue[byteOffset]<<16|byteArrayValue[byteOffset+1]<<8|byteArrayValue[byteOffset+2]&0xFF);\n\t}\n\tif(byteLength==4){\n\t\treturn putInt(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF);\n\t}\n\tif(byteLength==5){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<8|byteArrayValue[byteOffset+5]&0xFF);\n\t}\n\tif(byteLength==6){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<16|byteArrayValue[byteOffset+5]<<8|byteArrayValue[byteOffset+6]&0xFF);\n\t}\n\tif(byteLength==7){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF);\n\t}\n\tif(byteLength==8){\n\t\treturn putLong(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF);\n\t}\n\tif(byteLength==9){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF,byteArrayValue[byteOffset+8]<<8|byteArrayValue[byteOffset+9]&0xFF);\n\t}\n\tif(byteLength==10){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<24|byteArrayValue[byteOffset+5]<<16|byteArrayValue[byteOffset+6]<<8|byteArrayValue[byteOffset+7]&0xFF,byteArrayValue[byteOffset+8]<<16|byteArrayValue[byteOffset+9]<<8|byteArrayValue[byteOffset+10]&0xFF);\n\t}\n\tif(byteLength==11){\n\t\treturn put122(byteArrayValue[byteOffset]<<24|byteArrayValue[byteOffset+1]<<16|byteArrayValue[byteOffset+2]<<8|byteArrayValue[byteOffset+3]&0xFF,byteArrayValue[byteOffset+4]<<2"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175ae", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector_putByteArray.java"}
{"generate_results": [{"generate_code": "private void pop(final int elements){\n\tif(outputStackTop<elements){\n\t\tthrow new RuntimeException(\"Stack underflow\");\n\t}\n\toutputStackTop-=elements;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.RuntimeException: Stack underflow\n\tat com.alibaba.fastjson2.internal.asm.Frame.pop(Frame.java:633)\n\tat com.alibaba.fastjson2.internal.asm.Frame.pop(Frame.java:645)\n\tat com.alibaba.fastjson2.internal.asm.Frame_pop.main(Frame_pop.java:16)\n", "is_pass": false}], "docstring": "/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n", "method_name": "pop", "codes": ["private void pop(final int elements){\n\tif(outputStackTop<elements){\n\t\tthrow new RuntimeException(\"Stack underflow\");\n\t}\n\toutputStackTop-=elements;\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec017586", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "public ByteVector putInt(final int intValue){\n    if(data.length<length+4){\n\tint byteLength = 4;\n\tint byteOffset = data.length;\n\tenlarge(byteOffset+byteLength);\n\tdata[byteOffset++] = (byte)(intValue>>24);\n\tdata[byteOffset++] = (byte)(intValue>>16);\n\tdata[byteOffset++] = (byte)(intValue>>8);\n\tdata[byteOffset++] = (byte)(intValue);\n\tlength += byteLength;\n\treturn this;\n    }\n\tint byteLength = 4;\n\tint byteOffset = data.length;\n\tenlarge(byteOffset+byteLength);\n\tdata[byteOffset++] = (byte)(intValue>>24);\n\tdata[byteOffset++] = (byte)(intValue>>16);\n\tdata[byteOffset++] = (byte)(intValue>>8);\n\tdata[byteOffset++] = (byte)(intValue);\n\tlength += byteLength;\n\treturn this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param intValue an int.\n * @return this byte vector.\n */\n", "method_name": "putInt", "codes": ["public ByteVector putInt(final int intValue){\n    if(data.length<length+4){\n\tint byteLength = 4;\n\tint byteOffset = data.length;\n\tenlarge(byteOffset+byteLength);\n\tdata[byteOffset++] = (byte)(intValue>>24);\n\tdata[byteOffset++] = (byte)(intValue>>16);\n\tdata[byteOffset++] = (byte)(intValue>>8);\n\tdata[byteOffset++] = (byte)(intValue);\n\tlength += byteLength;\n\treturn this;\n    }\n\tint byteLength = 4;\n\tint byteOffset = data.length;\n\tenlarge(byteOffset+byteLength);\n\tdata[byteOffset++] = (byte)(intValue>>24);\n\tdata[byteOffset++] = (byte)(intValue>>16);\n\tdata[byteOffset++] = (byte)(intValue>>8);\n\tdata[byteOffset++] = (byte)(intValue);\n\tlength += byteLength;\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017596", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/ByteVector_putInt.class"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n\tif(descriptor.charAt(0) == 'J'){\n\t\tpop(6);\n\t}else if(descriptor.charAt(0) == 'D'){\n\t\tpop(2);\n\t}else{\n\t\tpop(1);\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n\tif(descriptor.charAt(0) == 'J'){\n\t\tpop(6);\n\t}else if(descriptor.charAt(0) == 'D'){\n\t\tpop(2);\n\t}else{\n\t\tpop(1);\n\t}\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175c4", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "final ByteVector put11(final int byteValue1,final int byteValue2){\n\tif(data.length<length+2){\n\t\tenlarge(length+2);\n\t}\n\tdata[length++]=byteValue1;\n\tdata[length++]=byteValue2;\n\treturn this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:83: error: incompatible types: possible lossy conversion from int to byte\n\tdata[length++]=byteValue1;\n\t               ^\nByteVector.java:84: error: incompatible types: possible lossy conversion from int to byte\n\tdata[length++]=byteValue2;\n\t               ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n", "method_name": "put11", "codes": ["final ByteVector put11(final int byteValue1,final int byteValue2){\n\tif(data.length<length+2){\n\t\tenlarge(length+2);\n\t}\n\tdata[length++]=byteValue1;\n\tdata[length++]=byteValue2;\n\treturn this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017595", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector_put11.java"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n\tif(features == null || features.length == 0){\n\t\treturn toString();\n\t}\n\tif(features.length == 1){\n\t\treturn toString(features[0]);\n\t}\n\treturn toString(JSONWriter.Feature.merge(features));\n}", "errormessage": "compile error", "error_detail_message": "JSONArray.java:899: error: cannot find symbol\n\treturn toString(JSONWriter.Feature.merge(features));\n\t                                  ^\n  symbol:   method merge(Feature[])\n  location: class Feature\n1 error\n", "is_pass": false}], "docstring": "/** \n * Serialize to JSON  {@link String}\n * @param features features to be enabled in serialization\n * @return JSON {@link String}\n */\n", "method_name": "toString", "codes": ["@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n\tif(features == null || features.length == 0){\n\t\treturn toString();\n\t}\n\tif(features.length == 1){\n\t\treturn toString(features[0]);\n\t}\n\treturn toString(JSONWriter.Feature.merge(features));\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec01757b", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/JSONArray_toString.java"}
{"generate_results": [{"generate_code": "public static int nextPrime(int desiredCapacity){\n\tif(desiredCapacity<0){\n\t\tthrow new IllegalArgumentException(\"Illegal Capacity: \"+desiredCapacity);\n\t}\n\tif(desiredCapacity>primeCapacities.length){\n\t\tint[] newPrimeCapacities=Arrays.copyOf(primeCapacities,2*primeCapacities.length);\n\t\tprimeCapacities=newPrimeCapacities;\n\t}\n\tif(desiredCapacity<primeCapacities.length){\n\t\treturn primeCapacities[desiredCapacity];\n\t}\n\tint candidate=primeCapacities[primeCapacities.length-1]+2;\n\twhile(candidate<desiredCapacity){\n\t\tif(isPrime(candidate)){\n\t\t\tprimeCapacities[primeCapacities.length-1]=candidate;\n\t\t\treturn candidate;\n\t\t}\n\t\tcandidate+=2;\n\t}\n\treturn candidate;\n}", "errormessage": "compile error", "error_detail_message": "PrimeFinder.java:153: error: cannot assign a value to final variable primeCapacities\n\t\tprimeCapacities=newPrimeCapacities;\n\t\t^\nPrimeFinder.java:160: error: cannot find symbol\n\t\tif(isPrime(candidate)){\n\t\t   ^\n  symbol:   method isPrime(int)\n  location: class PrimeFinder\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Returns a prime number which is <code>&gt;= desiredCapacity</code> and very close to <code>desiredCapacity</code> (within 11% if <code>desiredCapacity &gt;= 1000</code>).\n * @param desiredCapacity the capacity desired by the user.\n * @return the capacity which should be used for a hashtable.\n */\n", "method_name": "nextPrime", "codes": ["public static int nextPrime(int desiredCapacity){\n\tif(desiredCapacity<0){\n\t\tthrow new IllegalArgumentException(\"Illegal Capacity: \"+desiredCapacity);\n\t}\n\tif(desiredCapacity>primeCapacities.length){\n\t\tint[] newPrimeCapacities=Arrays.copyOf(primeCapacities,2*primeCapacities.length);\n\t\tprimeCapacities=newPrimeCapacities;\n\t}\n\tif(desiredCapacity<primeCapacities.length){\n\t\treturn primeCapacities[desiredCapacity];\n\t}\n\tint candidate=primeCapacities[primeCapacities.length-1]+2;\n\twhile(candidate<desiredCapacity){\n\t\tif(isPrime(candidate)){\n\t\t\tprimeCapacities[primeCapacities.length-1]=candidate;\n\t\t\treturn candidate;\n\t\t}\n\t\tcandidate+=2;\n\t}\n\treturn candidate;\n}"], "code_level": "slib_runnable", "_id": "636766a81a6d9265ec01758e", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/trove/impl/PrimeFinder_nextPrime.java"}
{"generate_results": [{"generate_code": "private static int digitValue(final char c){\nif(c>='0'&&c<='9'){\nreturn c-'0';\n}\nif(c>='a'&&c<='f'){\nreturn c-'a'+10;\n}\nif(c>='A'&&c<='F'){\nreturn c-'A'+10;\n}\nthrow new IllegalArgumentException(\"Invalid hex digit: \"+c);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid hex digit: !\n\tat io.protostuff.parser.TextFormat.digitValue(TextFormat.java:310)\n\tat io.protostuff.parser.TextFormat_digitValue.main(TextFormat_digitValue.java:11)\n", "is_pass": false}], "docstring": "/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()} but we don't accept non-ASCII digits.\n */\n", "method_name": "digitValue", "codes": ["private static int digitValue(final char c){\nif(c>='0'&&c<='9'){\nreturn c-'0';\n}\nif(c>='a'&&c<='f'){\nreturn c-'a'+10;\n}\nif(c>='A'&&c<='F'){\nreturn c-'A'+10;\n}\nthrow new IllegalArgumentException(\"Invalid hex digit: \"+c);\n}"], "code_level": "self_contained", "_id": "636767a61a6d9265ec0185b7", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-parser/target/classes/io/protostuff/parser/TextFormat_digitValue.class"}
{"generate_results": [{"generate_code": "private static boolean isHex(final char c){\n    if(c>='0'&&c<='9')return true;\nreturn (c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Is this a hex digit?\n */\n", "method_name": "isHex", "codes": ["private static boolean isHex(final char c){\n    if(c>='0'&&c<='9')return true;\nreturn (c>='0'&&c<='9')||(c>='a'&&c<='f')||(c>='A'&&c<='F');\n}"], "code_level": "self_contained", "_id": "636767ab1a6d9265ec018676", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-parser/target/classes/io/protostuff/parser/TextFormat_isHex.class"}
{"generate_results": [{"generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\tif(message==null)\n\t\treturn 0;\n\tint size=0;\n\tif(buffer==null)\n\t\tbuffer=new LinkedBuffer();\n\tsize+=ProtobufOutput.writeUInt32(buffer,1,schema.getSerializedSize(message));\n\tsize+=ProtobufOutput.writeDelimitedTo(buffer,message,schema);\n\tProtobufOutput.writeUInt32(out,size);\n\tbuffer.writeTo(out);\n\treturn size;\n}", "errormessage": "compile error", "error_detail_message": "ProtobufIOUtil.java:241: error: no suitable constructor found for LinkedBuffer(no arguments)\n\t\tbuffer=new LinkedBuffer();\n\t\t       ^\n    constructor LinkedBuffer.LinkedBuffer(int) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor LinkedBuffer.LinkedBuffer(int,LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor LinkedBuffer.LinkedBuffer(byte[],int) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor LinkedBuffer.LinkedBuffer(byte[],int,int) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor LinkedBuffer.LinkedBuffer(byte[],int,LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor LinkedBuffer.LinkedBuffer(byte[],int,int,LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor LinkedBuffer.LinkedBuffer(LinkedBuffer,LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\nProtobufIOUtil.java:242: error: cannot find symbol\n\tsize+=ProtobufOutput.writeUInt32(buffer,1,schema.getSerializedSize(message));\n\t                                                ^\n  symbol:   method getSerializedSize(T)\n  location: variable schema of type Schema<T>\n  where T is a type-variable:\n    T extends Object declared in method <T>writeDelimitedTo(OutputStream,T,Schema<T>,LinkedBuffer)\nProtobufIOUtil.java:243: error: cannot find symbol\n\tsize+=ProtobufOutput.writeDelimitedTo(buffer,message,schema);\n\t                    ^\n  symbol:   method writeDelimitedTo(LinkedBuffer,T,Schema<T>)\n  location: class ProtobufOutput\n  where T is a type-variable:\n    T extends Object declared in method <T>writeDelimitedTo(OutputStream,T,Schema<T>,LinkedBuffer)\nProtobufIOUtil.java:244: error: method writeUInt32 in class ProtobufOutput cannot be applied to given types;\n\tProtobufOutput.writeUInt32(out,size);\n\t              ^\n  required: int,int,boolean\n  found:    OutputStream,int\n  reason: actual and formal argument lists differ in length\nProtobufIOUtil.java:245: error: no suitable method found for writeTo(OutputStream)\n\tbuffer.writeTo(out);\n\t      ^\n    method LinkedBuffer.writeTo(OutputStream,LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\n    method LinkedBuffer.writeTo(DataOutput,LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\n5 errors\n", "is_pass": false}], "docstring": "/** \n * Serializes the  {@code message}, prefixed with its length, into an  {@link OutputStream}.\n * @return the size of the message\n */\n", "method_name": "writeDelimitedTo", "codes": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n\tif(message==null)\n\t\treturn 0;\n\tint size=0;\n\tif(buffer==null)\n\t\tbuffer=new LinkedBuffer();\n\tsize+=ProtobufOutput.writeUInt32(buffer,1,schema.getSerializedSize(message));\n\tsize+=ProtobufOutput.writeDelimitedTo(buffer,message,schema);\n\tProtobufOutput.writeUInt32(out,size);\n\tbuffer.writeTo(out);\n\treturn size;\n}"], "code_level": "project_runnable", "_id": "636767a41a6d9265ec018582", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/ProtobufIOUtil_writeDelimitedTo.java"}
{"generate_results": [{"generate_code": "public boolean equals(final byte[] data,int offset,final int len){\n\tif(len == 0){\n\t\treturn true;\n\t}\n\tif(data == null){\n\t\treturn false;\n\t}\n\tif(offset < 0 || len < 0 || offset + len > data.length){\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\tif(len!= size){\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < len; i++){\n\t\tif(data[offset + i]!= bytes[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns true if the contents of the internal array and the provided array match.\n */\n", "method_name": "equals", "codes": ["public boolean equals(final byte[] data,int offset,final int len){\n\tif(len == 0){\n\t\treturn true;\n\t}\n\tif(data == null){\n\t\treturn false;\n\t}\n\tif(offset < 0 || len < 0 || offset + len > data.length){\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\tif(len!= size){\n\t\treturn false;\n\t}\n\tfor(int i = 0; i < len; i++){\n\t\tif(data[offset + i]!= bytes[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"], "code_level": "class_runnable", "_id": "636767a51a6d9265ec01859d", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/ByteString_equals.class"}
{"generate_results": [{"generate_code": "public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    if (str == null) {\n        return 0;\n    }\nint size=0;\nfor (int i=index; i < index + len; i++) {\nint c=str.charAt(i);\nif (c < 0x80) {\nsize++;\n}\n else if (c < 0x800) {\nsize += 2;\n}\n else if (c < 0x10000) {\nsize += 3;\n}\n else {\nsize += 4;\n}\n}\nreturn size;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Computes the size of the utf8 string beginning at the specified  {@code index} with the specified {@code length}.\n */\n", "method_name": "computeUTF8Size", "codes": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    if (str == null) {\n        return 0;\n    }\nint size=0;\nfor (int i=index; i < index + len; i++) {\nint c=str.charAt(i);\nif (c < 0x80) {\nsize++;\n}\n else if (c < 0x800) {\nsize += 2;\n}\n else if (c < 0x10000) {\nsize += 3;\n}\n else {\nsize += 4;\n}\n}\nreturn size;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01856c", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/StringSerializer_computeUTF8Size.class"}
{"generate_results": [{"generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    if(str==null){\n        return lb.append(STRING_NULL);\n    }\nreturn writeUTF8(str,0,str.length(),session,lb);\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the utf8-encoded bytes from the string into the  {@link LinkedBuffer}.\n */\n", "method_name": "writeUTF8", "codes": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    if(str==null){\n        return lb.append(STRING_NULL);\n    }\nreturn writeUTF8(str,0,str.length(),session,lb);\n}"], "code_level": "project_runnable", "_id": "636767ab1a6d9265ec01867b", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/StringSerializer_writeUTF8.class"}
{"generate_results": [{"generate_code": "public long readRawVarint64() throws IOException {\n    if (bufferPos >= bufferSize) {\n        refillBuffer(true);\n    }\n\tint shift = 0;\n\tlong result = 0;\n\twhile (true) {\n\t\tint b = readRawByte();\n\t\tresult |= (long) (b & 0x7F) << shift;\n\t\tif ((b & 0x80) == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tshift += 7;\n\t}\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Read a raw Varint from the stream.\n */\n", "method_name": "readRawVarint64", "codes": ["public long readRawVarint64() throws IOException {\n    if (bufferPos >= bufferSize) {\n        refillBuffer(true);\n    }\n\tint shift = 0;\n\tlong result = 0;\n\twhile (true) {\n\t\tint b = readRawByte();\n\t\tresult |= (long) (b & 0x7F) << shift;\n\t\tif ((b & 0x80) == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tshift += 7;\n\t}\n}"], "code_level": "class_runnable", "_id": "636767a41a6d9265ec018572", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/CodedInput_readRawVarint64.class"}
{"generate_results": [{"generate_code": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    if (node == null) {\n        return 0;\n    }\n\tint total = 0;\n\twhile (node!= null) {\n\t\ttotal += out.write(node.buffer,node.start,node.offset);\n\t\tnode = node.next;\n\t}\n\treturn total;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the contents of the  {@link LinkedBuffer} into the {@link DataOutput}.\n * @return the total content size of the buffer.\n */\n", "method_name": "writeTo", "codes": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    if (node == null) {\n        return 0;\n    }\n\tint total = 0;\n\twhile (node!= null) {\n\t\ttotal += out.write(node.buffer,node.start,node.offset);\n\t\tnode = node.next;\n\t}\n\treturn total;\n}"], "code_level": "class_runnable", "_id": "636767aa1a6d9265ec01865a", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/LinkedBuffer_writeTo.class"}
{"generate_results": [{"generate_code": "@Override public String readString() throws IOException {\n    if (bufferPos >= bufferSizeAfterLimit) {\n        throw new IOException(\"String too long\");\n    }\n\tint size = readRawVarint32();\n\tif (size > bufferSizeAfterLimit) {\n\t\tthrow new IOException(\"String too long: \" + size);\n\t}\n\tif (size > 0) {\n\t\treturn new String(buffer, bufferPos, size, STRING);\n\t}\n\treturn \"\";\n}", "errormessage": "compile error", "error_detail_message": "CodedInput.java:281: error: cannot find symbol\n\t\treturn new String(buffer, bufferPos, size, STRING);\n\t\t                                           ^\n  symbol:   variable STRING\n  location: class CodedInput\n1 error\n", "is_pass": false}], "docstring": "/** \n * Read a  {@code string} field value from the stream.\n */\n", "method_name": "readString", "codes": ["@Override public String readString() throws IOException {\n    if (bufferPos >= bufferSizeAfterLimit) {\n        throw new IOException(\"String too long\");\n    }\n\tint size = readRawVarint32();\n\tif (size > bufferSizeAfterLimit) {\n\t\tthrow new IOException(\"String too long: \" + size);\n\t}\n\tif (size > 0) {\n\t\treturn new String(buffer, bufferPos, size, STRING);\n\t}\n\treturn \"\";\n}"], "code_level": "project_runnable", "_id": "636767a31a6d9265ec018552", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/CodedInput_readString.java"}
{"generate_results": [{"generate_code": "public final byte[] toByteArray(){\n    if(size==0)return new byte[0];\n\tbyte[] buf=new byte[size];\n\tSystem.arraycopy(head.buf,head.offset,buf,0,size);\n\treturn buf;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a single byte array containg all the contents written to the buffer(s).\n */\n", "method_name": "toByteArray", "codes": ["public final byte[] toByteArray(){\n    if(size==0)return new byte[0];\n\tbyte[] buf=new byte[size];\n\tSystem.arraycopy(head.buf,head.offset,buf,0,size);\n\treturn buf;\n}"], "code_level": "project_runnable", "_id": "636767a21a6d9265ec018517", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/WriteSession_toByteArray.class"}
{"generate_results": [{"generate_code": "private static int compareSigned(long a,long b){\n if (a < b) {\n return -1;\n}\n if (a > b) {\n return 1;\n}\n return 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares the two specified  {@code long} values. The sign of the value returned is the same as that of{@code ((Long) a).compareTo(b)}. <p> <b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the equivalent {@link Long#compare} method instead.\n * @param a the first  {@code long} to compare\n * @param b the second  {@code long} to compare\n * @return a negative value if {@code a} is less than {@code b}; a positive value if  {@code a} is greater than{@code b}; or zero if they are equal\n */\n", "method_name": "compareSigned", "codes": ["private static int compareSigned(long a,long b){\n if (a < b) {\n return -1;\n}\n if (a > b) {\n return 1;\n}\n return 0;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01857e", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/UnsignedNumberUtil_compareSigned.class"}
{"generate_results": [{"generate_code": "public byte[] toByteArray(){\n    if(bytes==null) return EMPTY_BYTE_ARRAY;\n\treturn bytes;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copies bytes to a  {@code byte[]}.\n */\n", "method_name": "toByteArray", "codes": ["public byte[] toByteArray(){\n    if(bytes==null) return EMPTY_BYTE_ARRAY;\n\treturn bytes;\n}"], "code_level": "self_contained", "_id": "636767aa1a6d9265ec01864a", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/ByteString_toByteArray.class"}
{"generate_results": [{"generate_code": "private void checkIfPackedField() throws IOException {\n\tif (isCurrentFieldPacked()) {\n\t\treadRawVarint32();\n\t}\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n", "method_name": "checkIfPackedField", "codes": ["private void checkIfPackedField() throws IOException {\n\tif (isCurrentFieldPacked()) {\n\t\treadRawVarint32();\n\t}\n}"], "code_level": "class_runnable", "_id": "636767a31a6d9265ec01854f", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/CodedInput_checkIfPackedField.class"}
{"generate_results": [{"generate_code": "public int readTag() throws IOException {\n    if (currentOffset() >= currentLimit()) {\n        throw new IOException(\"No more tags to read\");\n    }\n\tint tag = readRawVarint32();\n\tif ((tag & TAG_TYPE_MASK) == WIRETYPE_END_GROUP) {\n\t\tthrow new IOException(\"End group tag encountered before start group tag\");\n\t}\n\treturn tag;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Attempt to read a field tag, returning zero if we have reached EOF. Protocol message parsers use this to read tags, since a protocol message may legally end wherever a tag occurs, and zero is not a valid tag number.\n */\n", "method_name": "readTag", "codes": ["public int readTag() throws IOException {\n    if (currentOffset() >= currentLimit()) {\n        throw new IOException(\"No more tags to read\");\n    }\n\tint tag = readRawVarint32();\n\tif ((tag & TAG_TYPE_MASK) == WIRETYPE_END_GROUP) {\n\t\tthrow new IOException(\"End group tag encountered before start group tag\");\n\t}\n\treturn tag;\n}"], "code_level": "class_runnable", "_id": "636767a81a6d9265ec0185fc", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/ByteBufferInput_readTag.class"}

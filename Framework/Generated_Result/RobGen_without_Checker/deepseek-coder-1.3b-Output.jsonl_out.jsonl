{"generate_results": [{"generate_code": "public boolean shouldPrintMessage(int timestamp,String message){\n    if(messages.containsKey(message)){\n        if(timestamp - messages.get(message) > 10){\n            messages.put(message, timestamp);\n            return true;\n        }\n    }else{\n        messages.put(message, timestamp);\n        return true;\n    }\n    return false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns true if the message should be printed in the given timestamp, otherwise returns false. If this method returns false, the message will not be printed. The timestamp is in seconds granularity. \n */\n", "method_name": "shouldPrintMessage", "codes": ["public boolean shouldPrintMessage(int timestamp,String message){\n    if(messages.containsKey(message)){\n        if(timestamp - messages.get(message) > 10){\n            messages.put(message, timestamp);\n            return true;\n        }\n    }else{\n        messages.put(message, timestamp);\n        return true;\n    }\n    return false;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c73", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//LoggerRateLimiter_shouldPrintMessage.class"}
{"generate_results": [{"generate_code": "public boolean remove(int val){\n    if(!map.containsKey(val))\n        return false;\n    int index = map.get(val);\n    int lastElement = values.get(values.size()-1);\n    values.set(index, lastElement);\n    map.put(lastElement, index);\n    values.remove(values.size()-1);\n    map.remove(val);\n    if(index != lastElement)\n        map.put(lastElement, index);\n    return true;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 10000 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:361)\n\tat java.base/java.util.ArrayList.set(ArrayList.java:441)\n\tat InsertDeleteGetRandomO1.remove(InsertDeleteGetRandomO1.java:59)\n\tat InsertDeleteGetRandomO1_remove.main(InsertDeleteGetRandomO1_remove.java:19)\n", "is_pass": false}], "docstring": "/** \n * Removes a value from the set. Returns true if the set contained the specified element. \n */\n", "method_name": "remove", "codes": ["public boolean remove(int val){\n    if(!map.containsKey(val))\n        return false;\n    int index = map.get(val);\n    int lastElement = values.get(values.size()-1);\n    values.set(index, lastElement);\n    map.put(lastElement, index);\n    values.remove(values.size()-1);\n    map.remove(val);\n    if(index != lastElement)\n        map.put(lastElement, index);\n    return true;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c74", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//InsertDeleteGetRandomO1_remove.class"}
{"generate_results": [{"generate_code": "public boolean insert(int val){\n    if(map.containsKey(val)){\n        return false;\n    }\n    map.put(val, values.size());\n    values.add(val);\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n */\n", "method_name": "insert", "codes": ["public boolean insert(int val){\n    if(map.containsKey(val)){\n        return false;\n    }\n    map.put(val, values.size());\n    values.add(val);\n    return true;\n}"], "code_level": "self_contained", "_id": "6367672d1a6d9265ec017c78", "project_name": "interviews-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/interviews/codereval/target/classes//InsertDeleteGetRandomO1_insert.class"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    if(array1 == null || array2 == null){\n        return false;\n    }\n    return array1.length == array2.length;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    if(array1 == null || array2 == null){\n        return false;\n    }\n    return array1.length == array2.length;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec017a00", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isSameLength.class"}
{"generate_results": [{"generate_code": "public static boolean[] toPrimitive(final Boolean[] array){\n    if(array == null){\n        return EMPTY_BOOLEAN_ARRAY;\n    }\n    final boolean[] primitiveArray = new boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitiveArray[i] = array[i];\n    }\n    return primitiveArray;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Boolean</code> array, may be <code>null</code>\n * @return a <code>boolean</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static boolean[] toPrimitive(final Boolean[] array){\n    if(array == null){\n        return EMPTY_BOOLEAN_ARRAY;\n    }\n    final boolean[] primitiveArray = new boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitiveArray[i] = array[i];\n    }\n    return primitiveArray;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec017989", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static String toString(Object obj){\n    return obj == null ? \"\" : obj.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string (\"\") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = \"\" ObjectUtils.toString(\"\")           = \"\" ObjectUtils.toString(\"bat\")        = \"bat\" ObjectUtils.toString(Boolean.TRUE) = \"true\" </pre>\n * @see StringUtils#defaultString(String)\n * @see String#valueOf(Object)\n * @param obj  the Object to <code>toString</code>, may be null\n * @return the passed in Object's toString, or nullStr if <code>null</code> input\n * @since 2.0\n */\n", "method_name": "toString", "codes": ["public static String toString(Object obj){\n    return obj == null ? \"\" : obj.toString();\n}"], "code_level": "self_contained", "_id": "636766f81a6d9265ec01775c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ObjectUtils_toString.class"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(Boolean bool){\n    if(bool == null){\n        return false;\n    }\n    return bool;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>\n * @param bool  the boolean to convert\n * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>\n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(Boolean bool){\n    if(bool == null){\n        return false;\n    }\n    return bool;\n}"], "code_level": "self_contained", "_id": "636766f91a6d9265ec01777f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/BooleanUtils_toBoolean.class"}
{"generate_results": [{"generate_code": "public static Byte[] nullToEmpty(final Byte[] array){\n    return array == null || array.length == 0 ? EMPTY_BYTE_OBJECT_ARRAY : array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Byte[] nullToEmpty(final Byte[] array){\n    return array == null || array.length == 0 ? EMPTY_BYTE_OBJECT_ARRAY : array;\n}"], "code_level": "self_contained", "_id": "6367670b1a6d9265ec0179ff", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static Boolean[] nullToEmpty(final Boolean[] array){\n    return array == null || array.length == 0 ? EMPTY_BOOLEAN_OBJECT_ARRAY : array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Boolean[] nullToEmpty(final Boolean[] array){\n    return array == null || array.length == 0 ? EMPTY_BOOLEAN_OBJECT_ARRAY : array;\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179e8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static byte[] toPrimitive(final Byte[] array){\n    if(array == null){\n        return null;\n    }\n    byte[] primitives = new byte[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitives[i] = (byte) array[i];\n    }\n    return primitives;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Byte</code> array, may be <code>null</code>\n * @return a <code>byte</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static byte[] toPrimitive(final Byte[] array){\n    if(array == null){\n        return null;\n    }\n    byte[] primitives = new byte[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitives[i] = (byte) array[i];\n    }\n    return primitives;\n}"], "code_level": "self_contained", "_id": "636767031a6d9265ec0178e6", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static String reverse(final String str){\n    return new StringBuilder(str).reverse().toString();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.length()\" because \"str\" is null\n\tat java.base/java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:105)\n\tat java.base/java.lang.StringBuilder.<init>(StringBuilder.java:131)\n\tat net.hasor.utils.StringUtils.reverse(StringUtils.java:5254)\n\tat net.hasor.utils.StringUtils_reverse.main(StringUtils_reverse.java:12)\n", "is_pass": false}], "docstring": "/** \n * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse(\"\")    = \"\" StringUtils.reverse(\"bat\") = \"tab\" </pre>\n * @param str  the String to reverse, may be null\n * @return the reversed String, <code>null</code> if null String input\n */\n", "method_name": "reverse", "codes": ["public static String reverse(final String str){\n    return new StringBuilder(str).reverse().toString();\n}"], "code_level": "slib_runnable", "_id": "636767001a6d9265ec017873", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_reverse.class"}
{"generate_results": [{"generate_code": "public static boolean isDigits(String str){\n    if(str == null)\n        return false;\n    int len = str.length();\n    for(int i = 0; i < len; i++){\n        if(!Character.isDigit(str.charAt(i)))\n            return false;\n    }\n    return true;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if str contains only unicode numeric\n */\n", "method_name": "isDigits", "codes": ["public static boolean isDigits(String str){\n    if(str == null)\n        return false;\n    int len = str.length();\n    for(int i = 0; i < len; i++){\n        if(!Character.isDigit(str.charAt(i)))\n            return false;\n    }\n    return true;\n}"], "code_level": "slib_runnable", "_id": "636766ff1a6d9265ec01784b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/NumberUtils_isDigits.class"}
{"generate_results": [{"generate_code": "private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n    if(str == null || suffix == null){\n        return str == null && suffix == null;\n    }\n    if(ignoreCase){\n        return str.equalsIgnoreCase(suffix);\n    }else{\n        return str.endsWith(suffix);\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n * @see String#endsWith(String)\n * @param str  the String to check, may be null\n * @param suffix the suffix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "endsWith", "codes": ["private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){\n    if(str == null || suffix == null){\n        return str == null && suffix == null;\n    }\n    if(ignoreCase){\n        return str.equalsIgnoreCase(suffix);\n    }else{\n        return str.endsWith(suffix);\n    }\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a35", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_endsWith.class"}
{"generate_results": [{"generate_code": "public static Character[] nullToEmpty(final Character[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Character[] nullToEmpty(final Character[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_CHARACTER_OBJECT_ARRAY;\n    }\n    return array;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017651", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static Double[] nullToEmpty(final Double[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\n    }\n    return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Defensive programming technique to change a <code>null</code> reference to an empty one.</p> <p>This method returns an empty array for a <code>null</code> input array.</p> <p>As a memory optimizing technique an empty array passed in will be overridden with the empty <code>public static</code> references in this class.</p>\n * @param array  the array to check for <code>null</code> or empty\n * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n * @since 2.5\n */\n", "method_name": "nullToEmpty", "codes": ["public static Double[] nullToEmpty(final Double[] array){\n    if(array == null || array.length == 0){\n        return EMPTY_DOUBLE_OBJECT_ARRAY;\n    }\n    return array;\n}"], "code_level": "self_contained", "_id": "636767021a6d9265ec0178bb", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_nullToEmpty.class"}
{"generate_results": [{"generate_code": "public static boolean isEmpty(final double[] array){\n    return (array == null || array.length == 0);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n * @param array  the array to test\n * @return <code>true</code> if the array is empty or <code>null</code>\n * @since 2.1\n */\n", "method_name": "isEmpty", "codes": ["public static boolean isEmpty(final double[] array){\n    return (array == null || array.length == 0);\n}"], "code_level": "self_contained", "_id": "636766f01a6d9265ec01762e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isEmpty.class"}
{"generate_results": [{"generate_code": "public static boolean isNotTrue(Boolean bool){\n    return !bool;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>\n * @param bool  the boolean to check, null returns <code>true</code>\n * @return <code>true</code> if the input is null or false\n * @since 2.3\n */\n", "method_name": "isNotTrue", "codes": ["public static boolean isNotTrue(Boolean bool){\n    return !bool;\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec017677", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/BooleanUtils_isNotTrue.class"}
{"generate_results": [{"generate_code": "public static double[] toPrimitive(final Double[] array){\n    if(array.length == 0){\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    double[] result = new double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"<parameter1>\" is null\n\tat net.hasor.utils.ArrayUtils.toPrimitive(ArrayUtils.java:2853)\n\tat net.hasor.utils.ArrayUtils_toPrimitive.testToPrimitiveDouble(ArrayUtils_toPrimitive.java:114)\n\tat net.hasor.utils.ArrayUtils_toPrimitive.main(ArrayUtils_toPrimitive.java:189)\n", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Double</code> array, may be <code>null</code>\n * @return a <code>double</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static double[] toPrimitive(final Double[] array){\n    if(array.length == 0){\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    double[] result = new double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017842", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static char toChar(final Character ch,final char defaultValue){\n    if(ch == null){\n        return defaultValue;\n    }\n    return ch;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>\n * @param ch  the character to convert\n * @param defaultValue  the value to use if the  Character is null\n * @return the char value of the Character or the default if null\n */\n", "method_name": "toChar", "codes": ["public static char toChar(final Character ch,final char defaultValue){\n    if(ch == null){\n        return defaultValue;\n    }\n    return ch;\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179cf", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toChar.class"}
{"generate_results": [{"generate_code": "private static boolean isAllZeros(String s){\n    if(s.equals(\"0\")){\n        return true;\n    }\n    return false;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\" because \"<parameter1>\" is null\n\tat net.hasor.utils.NumberUtils.isAllZeros(NumberUtils.java:274)\n\tat net.hasor.utils.NumberUtils_isAllZeros.main(NumberUtils_isAllZeros.java:19)\n", "is_pass": false}], "docstring": "/** \n * <p>Utility method for  {@link #createNumber(String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>\n * @param s the String to check\n * @return if it is all zeros or <code>null</code>\n */\n", "method_name": "isAllZeros", "codes": ["private static boolean isAllZeros(String s){\n    if(s.equals(\"0\")){\n        return true;\n    }\n    return false;\n}"], "code_level": "self_contained", "_id": "636767081a6d9265ec0179a2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/NumberUtils_isAllZeros.class"}
{"generate_results": [{"generate_code": "public static String toString(Object object){\n    return object == null ? null : object.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Object to String ,when null object then null else return toString(); \n */\n", "method_name": "toString", "codes": ["public static String toString(Object object){\n    return object == null ? null : object.toString();\n}"], "code_level": "self_contained", "_id": "636766f21a6d9265ec01767d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_toString.class"}
{"generate_results": [{"generate_code": "public static int[] toPrimitive(final Integer[] array){\n    if(array == null){\n        return EMPTY_INT_ARRAY;\n    }\n    int[] primitiveArray = new int[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitiveArray[i] = array[i].intValue();\n    }\n    return primitiveArray;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Integer</code> array, may be <code>null</code>\n * @return an <code>int</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static int[] toPrimitive(final Integer[] array){\n    if(array == null){\n        return EMPTY_INT_ARRAY;\n    }\n    int[] primitiveArray = new int[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitiveArray[i] = array[i].intValue();\n    }\n    return primitiveArray;\n}"], "code_level": "self_contained", "_id": "6367670c1a6d9265ec017a2a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static boolean isAsciiControl(final char ch){\n    return (ch >= 0 && ch <= 31) || (ch == 127);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 32 or equals 127\n */\n", "method_name": "isAsciiControl", "codes": ["public static boolean isAsciiControl(final char ch){\n    return (ch >= 0 && ch <= 31) || (ch == 127);\n}"], "code_level": "self_contained", "_id": "636766fa1a6d9265ec01779d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAsciiControl.class"}
{"generate_results": [{"generate_code": "public static Boolean[] toObject(final boolean[] array){\n    if(array == null){\n        return null;\n    }\n    final Boolean[] result = new Boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>boolean</code> array\n * @return a <code>Boolean</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Boolean[] toObject(final boolean[] array){\n    if(array == null){\n        return null;\n    }\n    final Boolean[] result = new Boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec017796", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static Short[] toObject(final short[] array){\n    if(array == null){\n        return null;\n    }\n    Short[] result = new Short[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Short.valueOf(array[i]);\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>short</code> array\n * @return a <code>Short</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Short[] toObject(final short[] array){\n    if(array == null){\n        return null;\n    }\n    Short[] result = new Short[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Short.valueOf(array[i]);\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179f1", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static char[] toPrimitive(final Character[] array){\n    if(array == null){\n        return EMPTY_CHAR_ARRAY;\n    }\n    if(array.length == 0){\n        return EMPTY_CHAR_ARRAY;\n    }\n    char[] result = new char[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].charValue();\n    }\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>Character</code> array, may be <code>null</code>\n * @return a <code>char</code> array, <code>null</code> if null array input\n * @throws NullPointerException if array content is <code>null</code>\n */\n", "method_name": "toPrimitive", "codes": ["public static char[] toPrimitive(final Character[] array){\n    if(array == null){\n        return EMPTY_CHAR_ARRAY;\n    }\n    if(array.length == 0){\n        return EMPTY_CHAR_ARRAY;\n    }\n    char[] result = new char[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].charValue();\n    }\n    return result;\n}"], "code_level": "self_contained", "_id": "636766fe1a6d9265ec017838", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toPrimitive.class"}
{"generate_results": [{"generate_code": "public static Integer[] toObject(final int[] array){\n    if(array == null){\n        return null;\n    }\n    Integer[] result = new Integer[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Integer.valueOf(array[i]);\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  an <code>int</code> array\n * @return an <code>Integer</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Integer[] toObject(final int[] array){\n    if(array == null){\n        return null;\n    }\n    Integer[] result = new Integer[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Integer.valueOf(array[i]);\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec01790f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "public static Double[] toObject(final double[] array){\n    if(array == null){\n        return null;\n    }\n    Double[] result = new Double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Double.valueOf(array[i]);\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  a <code>double</code> array\n * @return a <code>Double</code> array, <code>null</code> if null array input\n */\n", "method_name": "toObject", "codes": ["public static Double[] toObject(final double[] array){\n    if(array == null){\n        return null;\n    }\n    Double[] result = new Double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Double.valueOf(array[i]);\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a4", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_toObject.class"}
{"generate_results": [{"generate_code": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n    if(str == null || prefix == null){\n        return str == null && prefix == null;\n    }\n    if(ignoreCase){\n        return str.regionMatches(true,0,prefix,0,prefix.length());\n    }\n    return str.startsWith(prefix);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n * @see String#startsWith(String)\n * @param str  the String to check, may be null\n * @param prefix the prefix to find, may be null\n * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.\n * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>\n */\n", "method_name": "startsWith", "codes": ["private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n    if(str == null || prefix == null){\n        return str == null && prefix == null;\n    }\n    if(ignoreCase){\n        return str.regionMatches(true,0,prefix,0,prefix.length());\n    }\n    return str.startsWith(prefix);\n}"], "code_level": "self_contained", "_id": "636767151a6d9265ec017b6b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_startsWith.class"}
{"generate_results": [{"generate_code": "public static Character toCharacterObject(final char ch){\n    return Character.valueOf(ch);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>\n * @param ch  the character to convert\n * @return a Character of the specified character\n */\n", "method_name": "toCharacterObject", "codes": ["public static Character toCharacterObject(final char ch){\n    return Character.valueOf(ch);\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01781c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toCharacterObject.class"}
{"generate_results": [{"generate_code": "public static boolean isAsciiAlphaUpper(final char ch){\n    return (ch >= 'A' && ch <= 'Z');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if between 65 and 90 inclusive\n */\n", "method_name": "isAsciiAlphaUpper", "codes": ["public static boolean isAsciiAlphaUpper(final char ch){\n    return (ch >= 'A' && ch <= 'Z');\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c1", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAsciiAlphaUpper.class"}
{"generate_results": [{"generate_code": "public static int length(final String str){\n    return str == null ? 0 : str.length();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Gets a String's length or <code>0</code> if the String is <code>null</code>.\n * @param str a String or <code>null</code>\n * @return String length or <code>0</code> if the String is <code>null</code>.\n * @since 2.4\n */\n", "method_name": "length", "codes": ["public static int length(final String str){\n    return str == null ? 0 : str.length();\n}"], "code_level": "self_contained", "_id": "6367670a1a6d9265ec0179d9", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/StringUtils_length.class"}
{"generate_results": [{"generate_code": "public static String base64Decode(final String s){\n    return new String(Base64.getDecoder().decode(s), StandardCharsets.UTF_8);\n}", "errormessage": "compile error", "error_detail_message": "CommonCodeUtils.java:92: error: cannot find symbol\n    return new String(Base64.getDecoder().decode(s), StandardCharsets.UTF_8);\n                            ^\n  symbol:   method getDecoder()\n  location: class Base64\n1 error\n", "is_pass": false}], "docstring": "/** \n * Decoding a string to a string follow the Base64 regular. \n */\n", "method_name": "base64Decode", "codes": ["public static String base64Decode(final String s){\n    return new String(Base64.getDecoder().decode(s), StandardCharsets.UTF_8);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017748", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/CommonCodeUtils_base64Decode.java"}
{"generate_results": [{"generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1 == null && array2 == null) return true;\n    if(array1 == null || array2 == null) return false;\n    return array1.length == array2.length;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>\n * @param array1 the first array, may be <code>null</code>\n * @param array2 the second array, may be <code>null</code>\n * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array\n */\n", "method_name": "isSameLength", "codes": ["public static boolean isSameLength(final double[] array1,final double[] array2){\n    if(array1 == null && array2 == null) return true;\n    if(array1 == null || array2 == null) return false;\n    return array1.length == array2.length;\n}"], "code_level": "self_contained", "_id": "636766f11a6d9265ec017663", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_isSameLength.class"}
{"generate_results": [{"generate_code": "public static char[] clone(final char[] array){\n    if(array == null){\n        return null;\n    }\n    return array.clone();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n * @param array  the array to clone, may be <code>null</code>\n * @return the cloned array, <code>null</code> if <code>null</code> input\n */\n", "method_name": "clone", "codes": ["public static char[] clone(final char[] array){\n    if(array == null){\n        return null;\n    }\n    return array.clone();\n}"], "code_level": "self_contained", "_id": "636766f31a6d9265ec01768f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/ArrayUtils_clone.class"}
{"generate_results": [{"generate_code": "public static boolean isAscii(final char ch){\n    return (ch >= 0 && ch <= 127);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\\n') = true CharUtils.isAscii('&copy;') = false </pre>\n * @param ch  the character to check\n * @return true if less than 128\n */\n", "method_name": "isAscii", "codes": ["public static boolean isAscii(final char ch){\n    return (ch >= 0 && ch <= 127);\n}"], "code_level": "self_contained", "_id": "636766fb1a6d9265ec0177c3", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_isAscii.class"}
{"generate_results": [{"generate_code": "public static String toString(final char ch){\n    return String.valueOf(ch);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = \" \" CharUtils.toString('A')  = \"A\" </pre>\n * @param ch  the character to convert\n * @return a String containing the one specified character\n */\n", "method_name": "toString", "codes": ["public static String toString(final char ch){\n    return String.valueOf(ch);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec017a05", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/CharUtils_toString.class"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n    if(size <= 0){\n        throw new IllegalArgumentException(\"Size must be greater than zero\");\n    }\n    if(data == null){\n        data = new byte[size];\n    }else{\n        byte[] newData = new byte[data.length + size];\n        System.arraycopy(data, 0, newData, 0, data.length);\n        data = newData;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n    if(size <= 0){\n        throw new IllegalArgumentException(\"Size must be greater than zero\");\n    }\n    if(data == null){\n        data = new byte[size];\n    }else{\n        byte[] newData = new byte[data.length + size];\n        System.arraycopy(data, 0, newData, 0, data.length);\n        data = newData;\n    }\n}"], "code_level": "class_runnable", "_id": "636767191a6d9265ec017c0f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ByteVector_enlarge.class"}
{"generate_results": [{"generate_code": "int addType(final String value){\n    //...\n}", "errormessage": "compile error", "error_detail_message": "SymbolTable.java:1004: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Adds a type in the type table of this symbol table. Does nothing if the type table already contains a similar type.\n * @param value an internal class name.\n * @return the index of a new or already existing type Symbol with the given value.\n */\n", "method_name": "addType", "codes": ["int addType(final String value){\n    //...\n}"], "code_level": "project_runnable", "_id": "636766ef1a6d9265ec01761a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/SymbolTable_addType.java"}
{"generate_results": [{"generate_code": "public long readLong(final int offset){\n    return (long)readInt(offset);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Reads a signed long value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readLong", "codes": ["public long readLong(final int offset){\n    return (long)readInt(offset);\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01775b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readLong.class"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if(byteArrayValue == null){\n        throw new NullPointerException(\"byteArrayValue is null\");\n    }\n    if(byteOffset < 0 || byteOffset > byteArrayValue.length){\n        throw new IllegalArgumentException(\"byteOffset is out of range: \" + byteOffset);\n    }\n    if(byteLength < 0 || byteLength > byteArrayValue.length - byteOffset){\n        throw new IllegalArgumentException(\"byteLength is out of range: \" + byteLength);\n    }\n    if(length + byteLength > data.length){\n        enlarge(length + byteLength);\n    }\n    System.arraycopy(byteArrayValue,byteOffset,data,length,byteLength);\n    length += byteLength;\n    return this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset index of the first byte of byteArrayValue that must be copied.\n * @param byteLength number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if(byteArrayValue == null){\n        throw new NullPointerException(\"byteArrayValue is null\");\n    }\n    if(byteOffset < 0 || byteOffset > byteArrayValue.length){\n        throw new IllegalArgumentException(\"byteOffset is out of range: \" + byteOffset);\n    }\n    if(byteLength < 0 || byteLength > byteArrayValue.length - byteOffset){\n        throw new IllegalArgumentException(\"byteLength is out of range: \" + byteLength);\n    }\n    if(length + byteLength > data.length){\n        enlarge(length + byteLength);\n    }\n    System.arraycopy(byteArrayValue,byteOffset,data,length,byteLength);\n    length += byteLength;\n    return this;\n}"], "code_level": "class_runnable", "_id": "6367671a1a6d9265ec017c15", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ByteVector_putByteArray.class"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n    if(descriptor.startsWith(\"L\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"D\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"F\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"I\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"B\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"C\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"S\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"Z\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"V\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[L\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[I\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[Z\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[C\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[S\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[B\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[D\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[F\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[V\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[I\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[Z\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[C\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[S\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[B\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[D\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[F\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 8));\n    }else if(descriptor.startsWith(\"[V\")){\n        pop(getAbstract", "errormessage": "compile error", "error_detail_message": "Frame.java:604: error: ')' expected\n        pop(getAbstract    // -----------------------------------------------------------------------------------------------\n                       ^\nFrame.java:614: error: illegal start of expression\n    public void addInitializedType(final int abstractType) {\n    ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n    if(descriptor.startsWith(\"L\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"D\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"F\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"I\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"B\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"C\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"S\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"Z\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"V\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[L\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[I\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[Z\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[C\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[S\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[B\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[D\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[F\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 2));\n    }else if(descriptor.startsWith(\"[J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[V\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[I\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[Z\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[C\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[S\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[B\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[D\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[F\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 4));\n    }else if(descriptor.startsWith(\"[J\")){\n        pop(getAbstractTypeFromDescriptor(symbolTable, descriptor, 8));\n    }else if(descriptor.startsWith(\"[V\")){\n        pop(getAbstract"], "code_level": "class_runnable", "_id": "636767021a6d9265ec0178b2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/Frame_pop.java"}
{"generate_results": [{"generate_code": "private void addInitializedType(final int abstractType){\n    if(initializations == null){\n        initializations = new int[1];\n    }else{\n        int[] temp = new int[initializations.length + 1];\n        System.arraycopy(initializations, 0, temp, 0, initializations.length);\n        initializations = temp;\n    }\n    initializations[initializations.length - 1] = abstractType;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat net.hasor.utils.asm.Frame_addInitializedType.main(Frame_addInitializedType.java:28)\n", "is_pass": false}], "docstring": "/** \n * Adds an abstract type to the list of types on which a constructor is invoked in the basic block.\n * @param abstractType an abstract type on a which a constructor is invoked.\n */\n", "method_name": "addInitializedType", "codes": ["private void addInitializedType(final int abstractType){\n    if(initializations == null){\n        initializations = new int[1];\n    }else{\n        int[] temp = new int[initializations.length + 1];\n        System.arraycopy(initializations, 0, temp, 0, initializations.length);\n        initializations = temp;\n    }\n    initializations[initializations.length - 1] = abstractType;\n}"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec0177a9", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Frame_addInitializedType.class"}
{"generate_results": [{"generate_code": "private void putAbstractTypes(final int start,final int end){\n    if(start>end)\n        throw new IllegalArgumentException(\"Start index is greater than end index\");\n    if(start<0 || end>=currentFrame.length)\n        throw new IndexOutOfBoundsException(\"Invalid index\");\n    for(int i=start;i<=end;i++){\n        if(i>=currentFrame.length)\n            throw new IndexOutOfBoundsException(\"Invalid index\");\n        currentFrame[i]=new AbstractFrame(i);\n    }\n}", "errormessage": "compile error", "error_detail_message": "MethodWriter.java:1740: error: cannot find symbol\n        currentFrame[i]=new AbstractFrame(i);\n                            ^\n  symbol:   class AbstractFrame\n  location: class MethodWriter\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts some abstract types of  {@link #currentFrame} in {@link #stackMapTableEntries} , using theJVMS verification_type_info format used in StackMapTable attributes.\n * @param start index of the first type in {@link #currentFrame} to write.\n * @param end index of last type in {@link #currentFrame} to write (exclusive).\n */\n", "method_name": "putAbstractTypes", "codes": ["private void putAbstractTypes(final int start,final int end){\n    if(start>end)\n        throw new IllegalArgumentException(\"Start index is greater than end index\");\n    if(start<0 || end>=currentFrame.length)\n        throw new IndexOutOfBoundsException(\"Invalid index\");\n    for(int i=start;i<=end;i++){\n        if(i>=currentFrame.length)\n            throw new IndexOutOfBoundsException(\"Invalid index\");\n        currentFrame[i]=new AbstractFrame(i);\n    }\n}"], "code_level": "project_runnable", "_id": "6367670a1a6d9265ec0179dc", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/MethodWriter_putAbstractTypes.java"}
{"generate_results": [{"generate_code": "public short readShort(final int offset){\n    return (short) ((classFileBuffer[offset] & 0xFF) << 8 | (classFileBuffer[offset + 1] & 0xFF));\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reads a signed short value in this  {@link ClassReader}. <i>This method is intended for  {@link Attribute} sub classes, and is normally not needed by class generators or adapters.</i>\n * @param offset the start offset of the value to be read in this {@link ClassReader}.\n * @return the read value.\n */\n", "method_name": "readShort", "codes": ["public short readShort(final int offset){\n    return (short) ((classFileBuffer[offset] & 0xFF) << 8 | (classFileBuffer[offset + 1] & 0xFF));\n}"], "code_level": "class_runnable", "_id": "636766f21a6d9265ec017667", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readShort.class"}
{"generate_results": [{"generate_code": "protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n    for (final Label label : labels) {\n        if (label.getLabelIndex() == bytecodeOffset) {\n            return label;\n        }\n    }\n    final Label newLabel = new Label();\n    newLabel.setLabelIndex(bytecodeOffset);\n    labels.add(newLabel);\n    return newLabel;\n}", "errormessage": "compile error", "error_detail_message": "ClassReader.java:2270: error: cannot find symbol\n        if (label.getLabelIndex() == bytecodeOffset) {\n                 ^\n  symbol:   method getLabelIndex()\n  location: variable label of type Label\nClassReader.java:2275: error: cannot find symbol\n    newLabel.setLabelIndex(bytecodeOffset);\n            ^\n  symbol:   method setLabelIndex(int)\n  location: variable newLabel of type Label\nClassReader.java:2276: error: cannot find symbol\n    labels.add(newLabel);\n          ^\n  symbol:   method add(Label)\n  location: variable labels of type Label[]\nNote: ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Returns the label corresponding to the given bytecode offset. The default implementation of this method creates a label for the given offset if it has not been already created.\n * @param bytecodeOffset a bytecode offset in a method.\n * @param labels the already created labels, indexed by their offset. If a label already existsfor bytecodeOffset this method must not create a new one. Otherwise it must store the new label in this array.\n * @return a non null Label, which must be equal to labels[bytecodeOffset].\n */\n", "method_name": "readLabel", "codes": ["protected Label readLabel(final int bytecodeOffset,final Label[] labels){\n    for (final Label label : labels) {\n        if (label.getLabelIndex() == bytecodeOffset) {\n            return label;\n        }\n    }\n    final Label newLabel = new Label();\n    newLabel.setLabelIndex(bytecodeOffset);\n    labels.add(newLabel);\n    return newLabel;\n}"], "code_level": "self_contained", "_id": "636766ff1a6d9265ec017853", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader_readLabel.java"}
{"generate_results": [{"generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    if(constantPoolEntryIndex < 0 || constantPoolEntryIndex >= constantUtf8Values.length){\n        throw new IllegalArgumentException(\"Invalid constant pool index: \" + constantPoolEntryIndex);\n    }\n    final String utf8Value = constantUtf8Values[constantPoolEntryIndex];\n    if(utf8Value.isEmpty()){\n        throw new IllegalStateException(\"Utf8 value is empty for index: \" + constantPoolEntryIndex);\n    }\n    if(charBuffer.length < utf8Value.length()){\n        throw new IllegalArgumentException(\"Buffer is too short: \" + charBuffer.length + \" < \" + utf8Value.length());\n    }\n    System.arraycopy(utf8Value.toCharArray(), 0, charBuffer, 0, utf8Value.length());\n    return utf8Value;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.isEmpty()\" because \"<local3>\" is null\n\tat net.hasor.utils.asm.ClassReader.readUtf(ClassReader.java:3161)\n\tat net.hasor.utils.asm.ClassReader_readUtf.main(ClassReader_readUtf.java:15)\n", "is_pass": false}], "docstring": "/** \n * Reads a CONSTANT_Utf8 constant pool entry in  {@link #classFileBuffer}.\n * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pooltable.\n * @param charBuffer the buffer to be used to read the string. This buffer must be sufficientlylarge. It is not automatically resized.\n * @return the String corresponding to the specified CONSTANT_Utf8 entry.\n */\n", "method_name": "readUtf", "codes": ["final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    if(constantPoolEntryIndex < 0 || constantPoolEntryIndex >= constantUtf8Values.length){\n        throw new IllegalArgumentException(\"Invalid constant pool index: \" + constantPoolEntryIndex);\n    }\n    final String utf8Value = constantUtf8Values[constantPoolEntryIndex];\n    if(utf8Value.isEmpty()){\n        throw new IllegalStateException(\"Utf8 value is empty for index: \" + constantPoolEntryIndex);\n    }\n    if(charBuffer.length < utf8Value.length()){\n        throw new IllegalArgumentException(\"Buffer is too short: \" + charBuffer.length + \" < \" + utf8Value.length());\n    }\n    System.arraycopy(utf8Value.toCharArray(), 0, charBuffer, 0, utf8Value.length());\n    return utf8Value;\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec01782a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/ClassReader_readUtf.class"}
{"generate_results": [{"generate_code": "@Override public int hashCode(){\n    int result = 17;\n    result = 31 * result + sort;\n    result = 31 * result + ((valueBuffer == null) ? 0 : valueBuffer.hashCode());\n    result = 31 * result + valueBegin;\n    result = 31 * result + valueEnd;\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a hash code value for this type.\n * @return a hash code value for this type.\n */\n", "method_name": "hashCode", "codes": ["@Override public int hashCode(){\n    int result = 17;\n    result = 31 * result + sort;\n    result = 31 * result + ((valueBuffer == null) ? 0 : valueBuffer.hashCode());\n    result = 31 * result + valueBegin;\n    result = 31 * result + valueEnd;\n    return result;\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec017758", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/asm/Type_hashCode.class"}
{"generate_results": [{"generate_code": "int addConstantNameAndType(final String name,final String descriptor){\n    int index = constantPool.add(new ConstantUtf8(name));\n    constantPool.add(new ConstantUtf8(descriptor));\n    return index;\n}", "errormessage": "compile error", "error_detail_message": "SymbolTable.java:650: error: cannot find symbol\n    int index = constantPool.add(new ConstantUtf8(name));\n                                     ^\n  symbol:   class ConstantUtf8\n  location: class SymbolTable\nSymbolTable.java:651: error: cannot find symbol\n    constantPool.add(new ConstantUtf8(descriptor));\n                         ^\n  symbol:   class ConstantUtf8\n  location: class SymbolTable\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/ClassReader.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the constant pool already contains a similar item.\n * @param name a field or method name.\n * @param descriptor a field or method descriptor.\n * @return a new or already existing Symbol with the given value.\n */\n", "method_name": "addConstantNameAndType", "codes": ["int addConstantNameAndType(final String name,final String descriptor){\n    int index = constantPool.add(new ConstantUtf8(name));\n    constantPool.add(new ConstantUtf8(descriptor));\n    return index;\n}"], "code_level": "project_runnable", "_id": "636766fe1a6d9265ec017823", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/SymbolTable_addConstantNameAndType.java"}
{"generate_results": [{"generate_code": "final void addLineNumber(final int lineNumber){\n    if(lineNumber>LINE_NUMBERS_CAPACITY_INCREMENT){\n        int[] newLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT + lineNumber];\n        System.arraycopy(this.lineNumbers, 0, newLineNumbers, 0, this.lineNumbers.length);\n        this.lineNumbers = newLineNumbers;\n    }\n    this.lineNumbers[this.lineNumberCount] = lineNumber;\n    this.lineNumberCount++;\n}", "errormessage": "compile error", "error_detail_message": "Label.java:299: error: cannot find symbol\n        System.arraycopy(this.lineNumbers, 0, newLineNumbers, 0, this.lineNumbers.length);\n                             ^\n  symbol: variable lineNumbers\nLabel.java:299: error: cannot find symbol\n        System.arraycopy(this.lineNumbers, 0, newLineNumbers, 0, this.lineNumbers.length);\n                                                                     ^\n  symbol: variable lineNumbers\nLabel.java:300: error: cannot find symbol\n        this.lineNumbers = newLineNumbers;\n            ^\n  symbol: variable lineNumbers\nLabel.java:302: error: cannot find symbol\n    this.lineNumbers[this.lineNumberCount] = lineNumber;\n        ^\n  symbol: variable lineNumbers\nLabel.java:302: error: cannot find symbol\n    this.lineNumbers[this.lineNumberCount] = lineNumber;\n                         ^\n  symbol: variable lineNumberCount\nLabel.java:303: error: cannot find symbol\n    this.lineNumberCount++;\n        ^\n  symbol: variable lineNumberCount\n6 errors\n", "is_pass": false}], "docstring": "/** \n * Adds a source line number corresponding to this label.\n * @param lineNumber a source line number (which should be strictly positive).\n */\n", "method_name": "addLineNumber", "codes": ["final void addLineNumber(final int lineNumber){\n    if(lineNumber>LINE_NUMBERS_CAPACITY_INCREMENT){\n        int[] newLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT + lineNumber];\n        System.arraycopy(this.lineNumbers, 0, newLineNumbers, 0, this.lineNumbers.length);\n        this.lineNumbers = newLineNumbers;\n    }\n    this.lineNumbers[this.lineNumberCount] = lineNumber;\n    this.lineNumberCount++;\n}"], "code_level": "class_runnable", "_id": "636767131a6d9265ec017b23", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/asm/Label_addLineNumber.java"}
{"generate_results": [{"generate_code": "public static int indexOfLastSeparator(String filename){\n    if(isSystemWindows()){\n        return filename.lastIndexOf(WINDOWS_SEPARATOR);\n    }else{\n        return filename.lastIndexOf(UNIX_SEPARATOR);\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.lastIndexOf(int)\" because \"<parameter1>\" is null\n\tat net.hasor.utils.io.FilenameUtils.indexOfLastSeparator(FilenameUtils.java:620)\n\tat net.hasor.utils.io.FilenameUtils_indexOfLastSeparator.main(FilenameUtils_indexOfLastSeparator.java:18)\n", "is_pass": false}], "docstring": "/** \n * Returns the index of the last directory separator character. <p> This method will handle a file in either Unix or Windows format. The position of the last forward or backslash is returned. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfLastSeparator", "codes": ["public static int indexOfLastSeparator(String filename){\n    if(isSystemWindows()){\n        return filename.lastIndexOf(WINDOWS_SEPARATOR);\n    }else{\n        return filename.lastIndexOf(UNIX_SEPARATOR);\n    }\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017658", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FilenameUtils_indexOfLastSeparator.class"}
{"generate_results": [{"generate_code": "public static void forceDeleteOnExit(File file) throws IOException {\n    if (file.exists()) {\n        if (file.isDirectory()) {\n            for (File subfile : file.listFiles()) {\n                forceDeleteOnExit(subfile);\n            }\n        }\n        if (!file.delete()) {\n            throw new IOException(\"Failed to delete file: \" + file);\n        }\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Schedules a file to be deleted when JVM exits. If file is directory delete it and all sub-directories.\n * @param file  file or directory to delete, must not be {@code null}\n * @throws NullPointerException if the file is {@code null}\n * @throws IOException in case deletion is unsuccessful\n */\n", "method_name": "forceDeleteOnExit", "codes": ["public static void forceDeleteOnExit(File file) throws IOException {\n    if (file.exists()) {\n        if (file.isDirectory()) {\n            for (File subfile : file.listFiles()) {\n                forceDeleteOnExit(subfile);\n            }\n        }\n        if (!file.delete()) {\n            throw new IOException(\"Failed to delete file: \" + file);\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017833", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FileUtils_forceDeleteOnExit.class"}
{"generate_results": [{"generate_code": "public static int indexOfExtension(String filename){\n    int lastSeparatorIndex = indexOfLastSeparator(filename);\n    if(lastSeparatorIndex == -1){\n        return -1;\n    }\n    return lastSeparatorIndex + getExtension(filename).length();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.String.lastIndexOf(String.java:2489)\n\tat java.base/java.lang.String.lastIndexOf(String.java:2451)\n\tat net.hasor.utils.io.FilenameUtils.indexOfLastSeparator(FilenameUtils.java:632)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:638)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n\tat net.hasor.utils.io.FilenameUtils.getExtension(FilenameUtils.java:924)\n\tat net.hasor.utils.io.FilenameUtils.indexOfExtension(FilenameUtils.java:642)\n", "is_pass": false}], "docstring": "/** \n * Returns the index of the last extension separator character, which is a dot. <p> This method also checks that there is no directory separator after the last dot. To do this it uses  {@link #indexOfLastSeparator(String)} which willhandle a file in either Unix or Windows format. <p> The output will be the same irrespective of the machine that the code is running on.\n * @param filename  the filename to find the last path separator in, null returns -1\n * @return the index of the last separator character, or -1 if thereis no such character\n */\n", "method_name": "indexOfExtension", "codes": ["public static int indexOfExtension(String filename){\n    int lastSeparatorIndex = indexOfLastSeparator(filename);\n    if(lastSeparatorIndex == -1){\n        return -1;\n    }\n    return lastSeparatorIndex + getExtension(filename).length();\n}"], "code_level": "class_runnable", "_id": "636767061a6d9265ec01794a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/io/FilenameUtils_indexOfExtension.class"}
{"generate_results": [{"generate_code": "@Override public void write(byte b[]) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n    if (thresholdExceeded) {\n        throw new IOException(\"Threshold exceeded\");\n    }\n    if (checkThreshold(b.length)) {\n        thresholdExceeded = true;\n        write(b, 0, b.length);\n    }\n}", "errormessage": "compile error", "error_detail_message": "ThresholdingOutputStream.java:85: error: incompatible types: void cannot be converted to boolean\n    if (checkThreshold(b.length)) {\n                      ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Writes <code>b.length</code> bytes from the specified byte array to this output stream.\n * @param b The array of bytes to be written.\n * @exception IOException if an error occurs.\n */\n", "method_name": "write", "codes": ["@Override public void write(byte b[]) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n    if (thresholdExceeded) {\n        throw new IOException(\"Threshold exceeded\");\n    }\n    if (checkThreshold(b.length)) {\n        thresholdExceeded = true;\n        write(b, 0, b.length);\n    }\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179fe", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/output/ThresholdingOutputStream_write.java"}
{"generate_results": [{"generate_code": "@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n    if (off < 0 || len < 0 || off > b.length || len > b.length - off) {\n        throw new IndexOutOfBoundsException();\n    }\n    if (len == 0) {\n        return;\n    }\n    if (writer == null) {\n        throw new IOException(\"Stream closed\");\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (encCount > 0) {\n        if (encCount >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            encCount -= len;\n            return;\n        } else {\n            for (int i = 0; i < encCount; i++) {\n                write(b[off + i]);\n            }\n            len -= encCount;\n            off += encCount;\n            encCount = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (count > 0) {\n        if (count >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            count -= len;\n            return;\n        } else {\n            for (int i = 0; i < count; i++) {\n                write(b[off + i]);\n            }\n            len -= count;\n            off += count;\n            count = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (encCount > 0) {\n        if (encCount >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            encCount -= len;\n            return;\n        } else {\n            for (int i = 0; i < encCount; i++) {\n                write(b[off + i]);\n            }\n            len -= encCount;\n            off += encCount;\n            encCount = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (count > 0) {\n        if (count >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            count -= len;\n            return;\n        } else {\n            for (int i = 0; i < count; i++) {\n                write(b[off + i]);\n            }\n            len -= count;\n            off += count;\n            count = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (encCount > 0) {\n        if (encCount >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            encCount -= len;\n            return;\n        } else {\n            for (int i = ", "errormessage": "compile error", "error_detail_message": "Base64OutputStream.java:248: error: illegal start of expression\n    public void write(final byte b[]) throws IOException {\n    ^\nBase64OutputStream.java:247: error: ';' expected\n    @Override\n             ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream.\n * @param b   the data.\n * @param off the start offset in the data.\n * @param len the number of bytes to write.\n */\n", "method_name": "write", "codes": ["@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n    if (off < 0 || len < 0 || off > b.length || len > b.length - off) {\n        throw new IndexOutOfBoundsException();\n    }\n    if (len == 0) {\n        return;\n    }\n    if (writer == null) {\n        throw new IOException(\"Stream closed\");\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (encCount > 0) {\n        if (encCount >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            encCount -= len;\n            return;\n        } else {\n            for (int i = 0; i < encCount; i++) {\n                write(b[off + i]);\n            }\n            len -= encCount;\n            off += encCount;\n            encCount = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (count > 0) {\n        if (count >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            count -= len;\n            return;\n        } else {\n            for (int i = 0; i < count; i++) {\n                write(b[off + i]);\n            }\n            len -= count;\n            off += count;\n            count = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (encCount > 0) {\n        if (encCount >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            encCount -= len;\n            return;\n        } else {\n            for (int i = 0; i < encCount; i++) {\n                write(b[off + i]);\n            }\n            len -= encCount;\n            off += encCount;\n            encCount = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (count > 0) {\n        if (count >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            count -= len;\n            return;\n        } else {\n            for (int i = 0; i < count; i++) {\n                write(b[off + i]);\n            }\n            len -= count;\n            off += count;\n            count = 0;\n        }\n    }\n    if (len <= 0) {\n        return;\n    }\n    if (buf == null) {\n        buf = new byte[8192];\n        chars = new char[8192];\n        count = 0;\n        encCount = 0;\n        totalCharsWritten = 0;\n    }\n    if (encCount > 0) {\n        if (encCount >= len) {\n            for (int i = 0; i < len; i++) {\n                write(b[off + i]);\n            }\n            encCount -= len;\n            return;\n        } else {\n            for (int i = "], "code_level": "class_runnable", "_id": "636766f91a6d9265ec01776e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/output/Base64OutputStream_write.java"}
{"generate_results": [{"generate_code": "@Override public void write(final byte[] b) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n    if (writer == null) {\n        writer = new BufferedWriter(new OutputStreamWriter(new ByteArrayOutputStream(), encoding));\n    }\n    writer.write(b);\n    writer.flush();\n}", "errormessage": "compile error", "error_detail_message": "WriterOutputStream.java:70: error: cannot find symbol\n        writer = new BufferedWriter(new OutputStreamWriter(new ByteArrayOutputStream(), encoding));\n                     ^\n  symbol:   class BufferedWriter\n  location: class WriterOutputStream\nWriterOutputStream.java:70: error: cannot find symbol\n        writer = new BufferedWriter(new OutputStreamWriter(new ByteArrayOutputStream(), encoding));\n                                        ^\n  symbol:   class OutputStreamWriter\n  location: class WriterOutputStream\nWriterOutputStream.java:72: error: no suitable method found for write(byte[])\n    writer.write(b);\n          ^\n    method Writer.write(int) is not applicable\n      (argument mismatch; byte[] cannot be converted to int)\n    method Writer.write(char[]) is not applicable\n      (argument mismatch; byte[] cannot be converted to char[])\n    method Writer.write(String) is not applicable\n      (argument mismatch; byte[] cannot be converted to String)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n", "is_pass": false}], "docstring": "/** \n * @see OutputStream#write(byte[]) \n */\n", "method_name": "write", "codes": ["@Override public void write(final byte[] b) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    }\n    if (writer == null) {\n        writer = new BufferedWriter(new OutputStreamWriter(new ByteArrayOutputStream(), encoding));\n    }\n    writer.write(b);\n    writer.flush();\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179d8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/output/WriterOutputStream_write.java"}
{"generate_results": [{"generate_code": "public String toString(){\n    return toString(null);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.StringBuffer.<init>(StringBuffer.java:146)\n\tat net.hasor.utils.builder.ToStringBuilder.<init>(ToStringBuilder.java:251)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.<init>(ReflectionToStringBuilder.java:460)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:118)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:667)\n\tat net.hasor.utils.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:283)\n", "is_pass": false}], "docstring": "/** \n * <p> Gets the String built by this builder. </p>\n * @return the built string\n */\n", "method_name": "toString", "codes": ["public String toString(){\n    return toString(null);\n}"], "code_level": "project_runnable", "_id": "636767001a6d9265ec01787e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ReflectionToStringBuilder_toString.class"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n    if(isArrayContentDetail()){\n        appendArrayDetail(buffer,fieldName,array);\n    }else{\n        appendSummary(buffer,fieldName,array);\n    }\n}", "errormessage": "compile error", "error_detail_message": "ToStringStyle.java:968: error: cannot find symbol\n        appendArrayDetail(buffer,fieldName,array);\n        ^\n  symbol:   method appendArrayDetail(StringBuffer,String,int[])\n  location: class ToStringStyle\nToStringStyle.java:1511: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\nToStringStyle.java:1532: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: ToStringStyle.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n    if(isArrayContentDetail()){\n        appendArrayDetail(buffer,fieldName,array);\n    }else{\n        appendSummary(buffer,fieldName,array);\n    }\n}"], "code_level": "class_runnable", "_id": "636767001a6d9265ec01787f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle_appendDetail.java"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return EMPTY_STRING_ARRAY;\n    }\n    return collection.toArray(new String[0]);\n}", "errormessage": "compile error", "error_detail_message": "ReflectionToStringBuilder.java:314: error: cannot find symbol\n        return EMPTY_STRING_ARRAY;\n               ^\n  symbol:   variable EMPTY_STRING_ARRAY\n  location: class ReflectionToStringBuilder\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1520: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\n/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java:1541: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.\n * @param collection The collection to convert\n * @return A new array of Strings.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Collection<?> collection){\n    if(collection == null){\n        return EMPTY_STRING_ARRAY;\n    }\n    return collection.toArray(new String[0]);\n}"], "code_level": "project_runnable", "_id": "636766f71a6d9265ec017730", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ReflectionToStringBuilder_toNoNullStringArray.java"}
{"generate_results": [{"generate_code": "static void register(Object value){\n    if(value != null){\n        getRegistry().put(value, Boolean.TRUE);\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"java.util.Map.put(Object, Object)\" because the return value of \"net.hasor.utils.builder.ToStringStyle.getRegistry()\" is null\n\tat net.hasor.utils.builder.ToStringStyle.register(ToStringStyle.java:159)\n\tat net.hasor.utils.builder.ToStringStyle_register.main(ToStringStyle_register.java:18)\n", "is_pass": false}], "docstring": "/** \n * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>\n * @param value The object to register.\n */\n", "method_name": "register", "codes": ["static void register(Object value){\n    if(value != null){\n        getRegistry().put(value, Boolean.TRUE);\n    }\n}"], "code_level": "class_runnable", "_id": "636767041a6d9265ec017911", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ToStringStyle_register.class"}
{"generate_results": [{"generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n    appendDetail(buffer,fieldName,array,isArrayContentDetail());\n}", "errormessage": "compile error", "error_detail_message": "ToStringStyle.java:1079: error: no suitable method found for appendDetail(StringBuffer,String,byte[],boolean)\n    appendDetail(buffer,fieldName,array,isArrayContentDetail());\n    ^\n    method ToStringStyle.appendDetail(StringBuffer,String,Object) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,Collection<?>) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,Map) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,long) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,int) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,short) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,byte) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,char) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,double) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,float) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,boolean) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,Object[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,long[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,int[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,short[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,byte[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,char[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,double[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,float[]) is not applicable\n      (actual and formal argument lists differ in length)\n    method ToStringStyle.appendDetail(StringBuffer,String,boolean[]) is not applicable\n      (actual and formal argument lists differ in length)\nToStringStyle.java:1507: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected boolean isShortClassName() {\n                      ^\nToStringStyle.java:1528: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    protected void setShortClassName(boolean shortClassName) {\n                   ^\nNote: ToStringStyle.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>\n * @param buffer  the <code>StringBuffer</code> to populate\n * @param fieldName  the field name, typically not used as already appended\n * @param array  the array to add to the <code>toString</code>,not <code>null</code>\n */\n", "method_name": "appendDetail", "codes": ["protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    if(array == null){\n        appendNullText(buffer,fieldName);\n        return;\n    }\n    appendDetail(buffer,fieldName,array,isArrayContentDetail());\n}"], "code_level": "class_runnable", "_id": "636766fe1a6d9265ec017821", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/builder/ToStringStyle_appendDetail.java"}
{"generate_results": [{"generate_code": "static String[] toNoNullStringArray(Object[] array){\n    if(array == null){\n        throw new IllegalArgumentException(\"The array must not be null\");\n    }\n    int size = 0;\n    for(Object obj : array){\n        if(obj != null){\n            size++;\n        }\n    }\n    if(size == 0){\n        throw new IllegalArgumentException(\"The array must not be empty\");\n    }\n    String[] result = new String[size];\n    int index = 0;\n    for(Object obj : array){\n        if(obj != null){\n            result[index++] = obj.toString();\n        }\n    }\n    return result;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}if an array element is <code>null</code>.\n * @param array The array to check\n * @return The given array or a new array without null.\n */\n", "method_name": "toNoNullStringArray", "codes": ["static String[] toNoNullStringArray(Object[] array){\n    if(array == null){\n        throw new IllegalArgumentException(\"The array must not be null\");\n    }\n    int size = 0;\n    for(Object obj : array){\n        if(obj != null){\n            size++;\n        }\n    }\n    if(size == 0){\n        throw new IllegalArgumentException(\"The array must not be empty\");\n    }\n    String[] result = new String[size];\n    int index = 0;\n    for(Object obj : array){\n        if(obj != null){\n            result[index++] = obj.toString();\n        }\n    }\n    return result;\n}"], "code_level": "project_runnable", "_id": "636766fc1a6d9265ec0177ef", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/builder/ReflectionToStringBuilder_toNoNullStringArray.class"}
{"generate_results": [{"generate_code": "@Override public int available() throws IOException {\n    if (byteArrayOut != null) {\n        return byteArrayOut.available();\n    } else if (reader != null) {\n        return reader.available();\n    } else {\n        return 0;\n    }\n}", "errormessage": "compile error", "error_detail_message": "ReaderInputStream.java:115: error: cannot find symbol\n        return byteArrayOut.available();\n                           ^\n  symbol:   method available()\n  location: variable byteArrayOut of type ByteArrayOutputStream\nReaderInputStream.java:117: error: cannot find symbol\n        return reader.available();\n                     ^\n  symbol:   method available()\n  location: variable reader of type Reader\n2 errors\n", "is_pass": false}], "docstring": "/** \n * @see InputStream#available() \n */\n", "method_name": "available", "codes": ["@Override public int available() throws IOException {\n    if (byteArrayOut != null) {\n        return byteArrayOut.available();\n    } else if (reader != null) {\n        return reader.available();\n    } else {\n        return 0;\n    }\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec017641", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/io/input/ReaderInputStream_available.java"}
{"generate_results": [{"generate_code": "public static <T>List<T> asList(T[] a){\n    if(a==null){\n        return Collections.emptyList();\n    }\n    return Arrays.asList(a);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Array to List. <p> Works like  {@link Arrays#asList(Object)}, but handles null arrays.\n * @return a list backed by the array.\n */\n", "method_name": "asList", "codes": ["public static <T>List<T> asList(T[] a){\n    if(a==null){\n        return Collections.emptyList();\n    }\n    return Arrays.asList(a);\n}"], "code_level": "slib_runnable", "_id": "636766f01a6d9265ec017639", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/json/TypeUtil_asList.class"}
{"generate_results": [{"generate_code": "public static byte convertHexDigit(byte b){\n    if(b>='0'&&b<='9')\n        return (byte)(b-'0');\n    if(b>='A'&&b<='F')\n        return (byte)(b-'A'+10);\n    if(b>='a'&&b<='f')\n        return (byte)(b-'a'+10);\n    throw new IllegalArgumentException(\"Not a hex digit: \"+b);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @param b An ASCII encoded character 0-9 a-f A-F\n * @return The byte value of the character 0-16.\n */\n", "method_name": "convertHexDigit", "codes": ["public static byte convertHexDigit(byte b){\n    if(b>='0'&&b<='9')\n        return (byte)(b-'0');\n    if(b>='A'&&b<='F')\n        return (byte)(b-'A'+10);\n    if(b>='a'&&b<='f')\n        return (byte)(b-'a'+10);\n    throw new IllegalArgumentException(\"Not a hex digit: \"+b);\n}"], "code_level": "slib_runnable", "_id": "636766f91a6d9265ec01777d", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/json/TypeUtil_convertHexDigit.class"}
{"generate_results": [{"generate_code": "public Converter lookup(final Class<?> clazz){\n    return converters.get(clazz);\n}", "errormessage": "compile error", "error_detail_message": "ConverterBean.java:473: error: incompatible types: Object cannot be converted to Converter\n    return converters.get(clazz);\n                         ^\nNote: ConverterBean.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Look up and return any registered  {@link Converter} for the specifieddestination class; if there is no registered Converter, return <code>null</code>.\n * @param clazz Class for which to return a registered Converter\n * @return The registered {@link Converter} or <code>null</code> if not found\n */\n", "method_name": "lookup", "codes": ["public Converter lookup(final Class<?> clazz){\n    return converters.get(clazz);\n}"], "code_level": "class_runnable", "_id": "6367670a1a6d9265ec0179e7", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/convert/ConverterBean_lookup.java"}
{"generate_results": [{"generate_code": "@Override public boolean containsKey(final Object key){\n  return map.containsKey(key);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return <code>true</code> if this map contains a mapping for the specified key.\n * @param key  the key to be searched for\n * @return true if the map contains the key\n */\n", "method_name": "containsKey", "codes": ["@Override public boolean containsKey(final Object key){\n  return map.containsKey(key);\n}"], "code_level": "class_runnable", "_id": "6367670b1a6d9265ec0179f2", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/convert/WeakFastHashMap_containsKey.class"}
{"generate_results": [{"generate_code": "private static String[] copyStrings(final String[] src){\n    if(src == null){\n        return null;\n    }\n    String[] dest = new String[src.length];\n    for(int i = 0; i < src.length; i++){\n        dest[i] = src[i].toLowerCase();\n    }\n    return dest;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * This method creates a copy of the provided array, and ensures that all the strings in the newly created array contain only lower-case letters. <p> Using this method to copy string arrays means that changes to the src array do not modify the dst array.\n */\n", "method_name": "copyStrings", "codes": ["private static String[] copyStrings(final String[] src){\n    if(src == null){\n        return null;\n    }\n    String[] dest = new String[src.length];\n    for(int i = 0; i < src.length; i++){\n        dest[i] = src[i].toLowerCase();\n    }\n    return dest;\n}"], "code_level": "self_contained", "_id": "636767041a6d9265ec0178f8", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/target/classes/net/hasor/utils/convert/convert/BooleanConverter_copyStrings.class"}
{"generate_results": [{"generate_code": "@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n    if (value == null) {\n        return null;\n    }\n    if (value instanceof String) {\n        if (type == String.class) {\n            return value;\n        }\n        if (type.isArray()) {\n            return BeanUtils.convertArrayToString((String[]) value);\n        }\n        if (type.isAssignableFrom(String.class)) {\n            return value.toString();\n        }\n    }\n    if (value instanceof Collection) {\n        if (type.isArray()) {\n            return BeanUtils.convertCollectionToString((Collection) value);\n        }\n        if (type.isAssignableFrom(String.class)) {\n            return BeanUtils.convertCollectionToString((Collection) value);\n        }\n    }\n    if (value instanceof Map) {\n        if (type.isAssignableFrom(String.class)) {\n            return BeanUtils.convertMapToString((Map) value);\n        }\n    }\n    if (type.isAssignableFrom(String.class)) {\n        return value.toString();\n    }\n    if (type.isAssignableFrom(Character.class)) {\n        if (value instanceof String) {\n            return ((String) value).charAt(0);\n        }\n    }\n    if (type.isAssignableFrom(Integer.class)) {\n        if (value instanceof String) {\n            return Integer.parseInt((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Double.class)) {\n        if (value instanceof String) {\n            return Double.parseDouble((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Float.class)) {\n        if (value instanceof String) {\n            return Float.parseFloat((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Long.class)) {\n        if (value instanceof String) {\n            return Long.parseLong((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Short.class)) {\n        if (value instanceof String) {\n            return Short.parseShort((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Byte.class)) {\n        if (value instanceof String) {\n            return Byte.parseByte((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Boolean.class)) {\n        if (value instanceof String) {\n            return Boolean.parseBoolean((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Date.class)) {\n        if (value instanceof String) {\n            return Converter.convertStringToDate((String) value);\n        }\n    }\n    if (type.isAssignableFrom(BigDecimal.class)) {\n        if (value instanceof String) {\n            return new BigDecimal((String) value);\n        }\n    }\n    if (type.isAssignableFrom(BigInteger.class)) {\n        if (value instanceof String) {\n            return new BigInteger((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Object.class)) {\n        return value;\n    }\n    throw new IllegalArgumentException(\"Cannot convert \" + value.getClass() + \" to \" + type);\n}", "errormessage": "compile error", "error_detail_message": "CharacterConverter.java:86: error: cannot find symbol\n            return BeanUtils.convertArrayToString((String[]) value);\n                            ^\n  symbol:   method convertArrayToString(String[])\n  location: class BeanUtils\nCharacterConverter.java:92: error: cannot find symbol\n    if (value instanceof Collection) {\n                         ^\n  symbol:   class Collection\n  location: class CharacterConverter\nCharacterConverter.java:94: error: cannot find symbol\n            return BeanUtils.convertCollectionToString((Collection) value);\n                                                        ^\n  symbol:   class Collection\n  location: class CharacterConverter\nCharacterConverter.java:97: error: cannot find symbol\n            return BeanUtils.convertCollectionToString((Collection) value);\n                                                        ^\n  symbol:   class Collection\n  location: class CharacterConverter\nCharacterConverter.java:100: error: cannot find symbol\n    if (value instanceof Map) {\n                         ^\n  symbol:   class Map\n  location: class CharacterConverter\nCharacterConverter.java:102: error: cannot find symbol\n            return BeanUtils.convertMapToString((Map) value);\n                                                 ^\n  symbol:   class Map\n  location: class CharacterConverter\nCharacterConverter.java:148: error: cannot find symbol\n    if (type.isAssignableFrom(Date.class)) {\n                              ^\n  symbol:   class Date\n  location: class CharacterConverter\nCharacterConverter.java:150: error: cannot find symbol\n            return Converter.convertStringToDate((String) value);\n                            ^\n  symbol:   method convertStringToDate(String)\n  location: interface Converter\nCharacterConverter.java:153: error: cannot find symbol\n    if (type.isAssignableFrom(BigDecimal.class)) {\n                              ^\n  symbol:   class BigDecimal\n  location: class CharacterConverter\nCharacterConverter.java:155: error: cannot find symbol\n            return new BigDecimal((String) value);\n                       ^\n  symbol:   class BigDecimal\n  location: class CharacterConverter\nCharacterConverter.java:158: error: cannot find symbol\n    if (type.isAssignableFrom(BigInteger.class)) {\n                              ^\n  symbol:   class BigInteger\n  location: class CharacterConverter\nCharacterConverter.java:160: error: cannot find symbol\n            return new BigInteger((String) value);\n                       ^\n  symbol:   class BigInteger\n  location: class CharacterConverter\n12 errors\n", "is_pass": false}], "docstring": "/** \n * <p>Convert the input object into a java.lang.Character.</p>\n * @param type Data type to which this value should be converted.\n * @param value The input value to be converted.\n * @return The converted value.\n * @throws Exception if conversion cannot be performed successfully\n * @since 1.8.0\n */\n", "method_name": "convertToType", "codes": ["@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {\n    if (value == null) {\n        return null;\n    }\n    if (value instanceof String) {\n        if (type == String.class) {\n            return value;\n        }\n        if (type.isArray()) {\n            return BeanUtils.convertArrayToString((String[]) value);\n        }\n        if (type.isAssignableFrom(String.class)) {\n            return value.toString();\n        }\n    }\n    if (value instanceof Collection) {\n        if (type.isArray()) {\n            return BeanUtils.convertCollectionToString((Collection) value);\n        }\n        if (type.isAssignableFrom(String.class)) {\n            return BeanUtils.convertCollectionToString((Collection) value);\n        }\n    }\n    if (value instanceof Map) {\n        if (type.isAssignableFrom(String.class)) {\n            return BeanUtils.convertMapToString((Map) value);\n        }\n    }\n    if (type.isAssignableFrom(String.class)) {\n        return value.toString();\n    }\n    if (type.isAssignableFrom(Character.class)) {\n        if (value instanceof String) {\n            return ((String) value).charAt(0);\n        }\n    }\n    if (type.isAssignableFrom(Integer.class)) {\n        if (value instanceof String) {\n            return Integer.parseInt((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Double.class)) {\n        if (value instanceof String) {\n            return Double.parseDouble((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Float.class)) {\n        if (value instanceof String) {\n            return Float.parseFloat((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Long.class)) {\n        if (value instanceof String) {\n            return Long.parseLong((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Short.class)) {\n        if (value instanceof String) {\n            return Short.parseShort((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Byte.class)) {\n        if (value instanceof String) {\n            return Byte.parseByte((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Boolean.class)) {\n        if (value instanceof String) {\n            return Boolean.parseBoolean((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Date.class)) {\n        if (value instanceof String) {\n            return Converter.convertStringToDate((String) value);\n        }\n    }\n    if (type.isAssignableFrom(BigDecimal.class)) {\n        if (value instanceof String) {\n            return new BigDecimal((String) value);\n        }\n    }\n    if (type.isAssignableFrom(BigInteger.class)) {\n        if (value instanceof String) {\n            return new BigInteger((String) value);\n        }\n    }\n    if (type.isAssignableFrom(Object.class)) {\n        return value;\n    }\n    throw new IllegalArgumentException(\"Cannot convert \" + value.getClass() + \" to \" + type);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bf", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/convert/convert/CharacterConverter_convertToType.java"}
{"generate_results": [{"generate_code": "public Collection<Object> values(){\n    return Collections.unmodifiableList(new ArrayList<>(map.values()));\n}", "errormessage": "compile error", "error_detail_message": "BeanMap.java:307: error: cannot find symbol\n    return Collections.unmodifiableList(new ArrayList<>(map.values()));\n                                                        ^\n  symbol:   variable map\n  location: class BeanMap\nNote: BeanMap.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns the values for the BeanMap.\n * @return values for the BeanMap. The returned collection is not modifiable.\n */\n", "method_name": "values", "codes": ["public Collection<Object> values(){\n    return Collections.unmodifiableList(new ArrayList<>(map.values()));\n}"], "code_level": "class_runnable", "_id": "636766f11a6d9265ec01764f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ref/BeanMap_values.java"}
{"generate_results": [{"generate_code": "public void putAllWriteable(BeanMap map){\n  if (map == null) return;\n  for (Map.Entry<String,Method> entry : map.entrySet()) {\n    if (entry.getValue() != null) {\n      if (entry.getValue().getParameterTypes().length == 0) {\n        this.writeMethods.put(entry.getKey(), entry.getValue());\n      } else {\n        this.readMethods.put(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n}", "errormessage": "compile error", "error_detail_message": "BeanMap.java:155: error: incompatible types: Entry<String,Object> cannot be converted to Entry<String,Method>\n  for (Map.Entry<String,Method> entry : map.entrySet()) {\n                                                    ^\nNote: BeanMap.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Puts all of the writable properties from the given BeanMap into this BeanMap. Read-only and Write-only properties will be ignored.\n * @param map  the BeanMap whose properties to put\n */\n", "method_name": "putAllWriteable", "codes": ["public void putAllWriteable(BeanMap map){\n  if (map == null) return;\n  for (Map.Entry<String,Method> entry : map.entrySet()) {\n    if (entry.getValue() != null) {\n      if (entry.getValue().getParameterTypes().length == 0) {\n        this.writeMethods.put(entry.getKey(), entry.getValue());\n      } else {\n        this.readMethods.put(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n}"], "code_level": "class_runnable", "_id": "636767071a6d9265ec017962", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-commons/src/main/java/net/hasor/utils/ref/BeanMap_putAllWriteable.java"}
{"generate_results": [{"generate_code": "public long contentLength(){\n    try{\n        return Long.parseLong(request.getHeader(\"Content-Length\"));\n    }catch(NumberFormatException e){\n        return -1;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Retrieve the content length of the request.\n * @return The content length of the request.\n * @since 1.3\n */\n", "method_name": "contentLength", "codes": ["public long contentLength(){\n    try{\n        return Long.parseLong(request.getHeader(\"Content-Length\"));\n    }catch(NumberFormatException e){\n        return -1;\n    }\n}"], "code_level": "project_runnable", "_id": "636767031a6d9265ec0178dd", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/ServletRequestContext_contentLength.class"}
{"generate_results": [{"generate_code": "private int parseEndOfLine(String headerPart,int end){\n    //TODO: Implement this method\n}", "errormessage": "compile error", "error_detail_message": "FileUpload.java:341: error: missing return statement\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Skips bytes until the end of the current line.\n * @param headerPart The headers, which are being parsed.\n * @param end Index of the last byte, which has yet been processed.\n * @return Index of the \\r\\n sequence, which indicates end of line.\n */\n", "method_name": "parseEndOfLine", "codes": ["private int parseEndOfLine(String headerPart,int end){\n    //TODO: Implement this method\n}"], "code_level": "self_contained", "_id": "636767121a6d9265ec017b0a", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/FileUpload_parseEndOfLine.java"}
{"generate_results": [{"generate_code": "protected int findByte(byte value,int pos){\n    for(int i=pos;i<buffer.length;i++){\n        if(buffer[i]==value){\n            return i;\n        }\n    }\n    return -1;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Searches for a byte of specified value in the <code>buffer</code>, starting at the specified <code>position</code>.\n * @param value The value to find.\n * @param pos   The starting position for searching.\n * @return The position of byte found, counting from beginning of the<code>buffer</code>, or <code>-1</code> if not found.\n */\n", "method_name": "findByte", "codes": ["protected int findByte(byte value,int pos){\n    for(int i=pos;i<buffer.length;i++){\n        if(buffer[i]==value){\n            return i;\n        }\n    }\n    return -1;\n}"], "code_level": "class_runnable", "_id": "636766ff1a6d9265ec017851", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/MultipartStream_findByte.class"}
{"generate_results": [{"generate_code": "public byte readByte() throws IOException {\n    if (closed) {\n        throw new IOException(\"Stream closed\");\n    }\n    if (bufSize <= 0) {\n        bufSize = DEFAULT_BUFSIZE;\n    }\n    if (head == tail) {\n        if (available() == 0) {\n            return -1;\n        }\n        head = 0;\n        tail = 0;\n    }\n    byte b = buffer[head];\n    head++;\n    if (head == buffer.length) {\n        head = 0;\n    }\n    if (head == tail) {\n        return -1;\n    }\n    return b;\n}", "errormessage": "compile error", "error_detail_message": "MultipartStream.java:187: error: cannot find symbol\n    if (closed) {\n        ^\n  symbol:   variable closed\n  location: class MultipartStream\nMultipartStream.java:191: error: cannot assign a value to final variable bufSize\n        bufSize = DEFAULT_BUFSIZE;\n        ^\nMultipartStream.java:194: error: cannot find symbol\n        if (available() == 0) {\n            ^\n  symbol:   method available()\n  location: class MultipartStream\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Reads a byte from the <code>buffer</code>, and refills it as necessary.\n * @return The next byte from the input stream.\n * @throws IOException if there is no more data available.\n */\n", "method_name": "readByte", "codes": ["public byte readByte() throws IOException {\n    if (closed) {\n        throw new IOException(\"Stream closed\");\n    }\n    if (bufSize <= 0) {\n        bufSize = DEFAULT_BUFSIZE;\n    }\n    if (head == tail) {\n        if (available() == 0) {\n            return -1;\n        }\n        head = 0;\n        tail = 0;\n    }\n    byte b = buffer[head];\n    head++;\n    if (head == buffer.length) {\n        head = 0;\n    }\n    if (head == tail) {\n        return -1;\n    }\n    return b;\n}"], "code_level": "class_runnable", "_id": "636766f81a6d9265ec01774b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/MultipartStream_readByte.java"}
{"generate_results": [{"generate_code": "private String parseToken(final char[] terminators){\n    final StringBuilder token = new StringBuilder();\n    final Map<Character, Integer> charMap = new HashMap<>();\n    for(pos = 0; pos < terminators.length; pos++){\n        charMap.put(terminators[pos], pos);\n    }\n    while(true){\n        if(hasChar()){\n            chars[pos] = getChar();\n            if(charMap.containsKey(chars[pos])){\n                if(charMap.get(chars[pos]) == 0){\n                    break;\n                }\n            }\n            else if(Character.isLetter(chars[pos])){\n                if(lowerCaseNames){\n                    chars[pos] = Character.toLowerCase(chars[pos]);\n                }\n                if(isOneOf(chars[pos], \"<>?=\")){\n                    if(chars[pos] == '<'){\n                        if(parseToken(\"<>\").equals(\"\")){\n                            break;\n                        }\n                    }\n                    else if(chars[pos] == '='){\n                        if(parseToken(\"=\").equals(\"\")){\n                            break;\n                        }\n                    }\n                    else if(chars[pos] == '>'){\n                        if(parseToken(\">\").equals(\"\")){\n                            break;\n                        }\n                    }\n                    else if(chars[pos] == '?'){\n                        if(parseToken(\"?\").equals(\"\")){\n                            break;\n                        }\n                    }\n                }\n                else{\n                    if(parseToken(\"\").equals(\"\")){\n                        break;\n                    }\n                }\n            }\n            else if(Character.isDigit(chars[pos])){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ' '){\n                if(parseToken(\" \").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '\\'' || chars[pos] == '\\\"'){\n                if(parseQuotedToken(chars[pos]).equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '-'){\n                if(parseToken(\"-\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '(' || chars[pos] == ')'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '{' || chars[pos] == '}'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '[' || chars[pos] == ']'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ';'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ','){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '.'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ':'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '+'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '\\\\'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '/'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '@' || chars[pos] == '#' || chars[pos] == '$' || chars[pos] == '%' || chars[pos] == '^' || chars[pos] == '&' || chars[pos] == '*'){\n                if(parseToken(\"\").equals(\"\")){\n", "errormessage": "compile error", "error_detail_message": "ParameterParser.java:237: error: illegal start of expression\n    public String parseQuotedToken(final char[] terminators) {\n    ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Parses out a token until any of the given terminators is encountered.\n * @param terminators the array of terminating characters. Any of these characters when encountered signify the end of the token\n * @return the token\n */\n", "method_name": "parseToken", "codes": ["private String parseToken(final char[] terminators){\n    final StringBuilder token = new StringBuilder();\n    final Map<Character, Integer> charMap = new HashMap<>();\n    for(pos = 0; pos < terminators.length; pos++){\n        charMap.put(terminators[pos], pos);\n    }\n    while(true){\n        if(hasChar()){\n            chars[pos] = getChar();\n            if(charMap.containsKey(chars[pos])){\n                if(charMap.get(chars[pos]) == 0){\n                    break;\n                }\n            }\n            else if(Character.isLetter(chars[pos])){\n                if(lowerCaseNames){\n                    chars[pos] = Character.toLowerCase(chars[pos]);\n                }\n                if(isOneOf(chars[pos], \"<>?=\")){\n                    if(chars[pos] == '<'){\n                        if(parseToken(\"<>\").equals(\"\")){\n                            break;\n                        }\n                    }\n                    else if(chars[pos] == '='){\n                        if(parseToken(\"=\").equals(\"\")){\n                            break;\n                        }\n                    }\n                    else if(chars[pos] == '>'){\n                        if(parseToken(\">\").equals(\"\")){\n                            break;\n                        }\n                    }\n                    else if(chars[pos] == '?'){\n                        if(parseToken(\"?\").equals(\"\")){\n                            break;\n                        }\n                    }\n                }\n                else{\n                    if(parseToken(\"\").equals(\"\")){\n                        break;\n                    }\n                }\n            }\n            else if(Character.isDigit(chars[pos])){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ' '){\n                if(parseToken(\" \").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '\\'' || chars[pos] == '\\\"'){\n                if(parseQuotedToken(chars[pos]).equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '-'){\n                if(parseToken(\"-\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '(' || chars[pos] == ')'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '{' || chars[pos] == '}'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '[' || chars[pos] == ']'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ';'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ','){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '.'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == ':'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '+'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '\\\\'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '/'){\n                if(parseToken(\"\").equals(\"\")){\n                    break;\n                }\n            }\n            else if(chars[pos] == '@' || chars[pos] == '#' || chars[pos] == '$' || chars[pos] == '%' || chars[pos] == '^' || chars[pos] == '&' || chars[pos] == '*'){\n                if(parseToken(\"\").equals(\"\")){\n"], "code_level": "class_runnable", "_id": "636766fa1a6d9265ec01779c", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/src/main/java/net/hasor/web/upload/ParameterParser_parseToken.java"}
{"generate_results": [{"generate_code": "public static boolean arrayequals(byte[] a,byte[] b,int count){\n    if(a.length != b.length)\n        return false;\n    for(int i=0;i<count;i++){\n        if(a[i] != b[i])\n            return false;\n    }\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares <code>count</code> first bytes in the arrays <code>a</code> and <code>b</code>.\n * @param a     The first array to compare.\n * @param b     The second array to compare.\n * @param count How many bytes should be compared.\n * @return <code>true</code> if <code>count</code> first bytes in arrays<code>a</code> and <code>b</code> are equal.\n */\n", "method_name": "arrayequals", "codes": ["public static boolean arrayequals(byte[] a,byte[] b,int count){\n    if(a.length != b.length)\n        return false;\n    for(int i=0;i<count;i++){\n        if(a[i] != b[i])\n            return false;\n    }\n    return true;\n}"], "code_level": "self_contained", "_id": "636766fd1a6d9265ec017814", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/MultipartStream_arrayequals.class"}
{"generate_results": [{"generate_code": "public static int lastIndexOf(String str,String searchStr){\n    if(str == null || searchStr == null){\n        return INDEXNOTFOUND;\n    }\n    int lastIndex = str.lastIndexOf(searchStr);\n    if(lastIndex == -1){\n        return INDEXNOTFOUND;\n    }\n    return lastIndex;\n}", "errormessage": "compile error", "error_detail_message": "StringUdfSource.java:162: error: cannot find symbol\n        return INDEXNOTFOUND;\n               ^\n  symbol:   variable INDEXNOTFOUND\n  location: class StringUdfSource\nStringUdfSource.java:166: error: cannot find symbol\n        return INDEXNOTFOUND;\n               ^\n  symbol:   variable INDEXNOTFOUND\n  location: class StringUdfSource\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}. \n */\n", "method_name": "lastIndexOf", "codes": ["public static int lastIndexOf(String str,String searchStr){\n    if(str == null || searchStr == null){\n        return INDEXNOTFOUND;\n    }\n    int lastIndex = str.lastIndexOf(searchStr);\n    if(lastIndex == -1){\n        return INDEXNOTFOUND;\n    }\n    return lastIndex;\n}"], "code_level": "project_runnable", "_id": "636766f61a6d9265ec017701", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/src/main/java/net/hasor/dataql/fx/basic/StringUdfSource_lastIndexOf.java"}
{"generate_results": [{"generate_code": "public static String sub(String str,int start,int end){\n    if(str == null){\n        throw new IllegalArgumentException(\"str cannot be null\");\n    }\n    if(start < 0){\n        throw new IllegalArgumentException(\"start cannot be less than zero\");\n    }\n    if(end > str.length()){\n        throw new IllegalArgumentException(\"end cannot be greater than the length of the string\");\n    }\n    return str.substring(start, end);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: str cannot be null\n\tat net.hasor.dataql.fx.basic.StringUdfSource.sub(StringUdfSource.java:233)\n\tat net.hasor.dataql.fx.basic.StringUdfSource_sub.main(StringUdfSource_sub.java:8)\n", "is_pass": false}], "docstring": "/** \n * Gets a substring from the specified String avoiding exceptions. \n */\n", "method_name": "sub", "codes": ["public static String sub(String str,int start,int end){\n    if(str == null){\n        throw new IllegalArgumentException(\"str cannot be null\");\n    }\n    if(start < 0){\n        throw new IllegalArgumentException(\"start cannot be less than zero\");\n    }\n    if(end > str.length()){\n        throw new IllegalArgumentException(\"end cannot be greater than the length of the string\");\n    }\n    return str.substring(start, end);\n}"], "code_level": "project_runnable", "_id": "636766ff1a6d9265ec01783b", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_sub.class"}
{"generate_results": [{"generate_code": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    if(str == null || searchStrArray == null || searchStrArray.isEmpty()){\n        return false;\n    }\n    for(String searchStr : searchStrArray){\n        if(str.equalsIgnoreCase(searchStr)){\n            return true;\n        }\n    }\n    return false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Case in-sensitive Checks if the String contains any character in the given set of string. \n */\n", "method_name": "containsAnyIgnoreCase", "codes": ["public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    if(str == null || searchStrArray == null || searchStrArray.isEmpty()){\n        return false;\n    }\n    for(String searchStr : searchStrArray){\n        if(str.equalsIgnoreCase(searchStr)){\n            return true;\n        }\n    }\n    return false;\n}"], "code_level": "project_runnable", "_id": "6367670b1a6d9265ec017a0f", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_containsAnyIgnoreCase.class"}
{"generate_results": [{"generate_code": "public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.indexOf(String)\" because \"<parameter1>\" is null\n\tat net.hasor.dataql.fx.basic.StringUdfSource.indexOf(StringUdfSource.java:135)\n\tat net.hasor.dataql.fx.basic.StringUdfSource_indexOf.main(StringUdfSource_indexOf.java:11)\n", "is_pass": false}], "docstring": "/** \n * Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}. \n */\n", "method_name": "indexOf", "codes": ["public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}"], "code_level": "project_runnable", "_id": "636767021a6d9265ec0178bc", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/target/classes/net/hasor/dataql/fx/basic/StringUdfSource_indexOf.class"}
{"generate_results": [{"generate_code": "private static boolean isParameterSeparator(final char c){\n    return c == ',' || c == ':' || c == ';' || c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Determine whether a parameter name ends at the current position, that is, whether the given character qualifies as a separator. \n */\n", "method_name": "isParameterSeparator", "codes": ["private static boolean isParameterSeparator(final char c){\n    return c == ',' || c == ':' || c == ';' || c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n}"], "code_level": "class_runnable", "_id": "636766fc1a6d9265ec0177da", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-db/target/classes/net/hasor/db/jdbc/core/ParsedSql_isParameterSeparator.class"}
{"generate_results": [{"generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    if(array instanceof Object[]){\n        Object[] oldArray = (Object[]) array;\n        Object[] newArray = (Object[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof int[]){\n        int[] oldArray = (int[]) array;\n        int[] newArray = (int[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof double[]){\n        double[] oldArray = (double[]) array;\n        double[] newArray = (double[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof float[]){\n        float[] oldArray = (float[]) array;\n        float[] newArray = (float[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof long[]){\n        long[] oldArray = (long[]) array;\n        long[] newArray = (long[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof short[]){\n        short[] oldArray = (short[]) array;\n        short[] newArray = (short[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof char[]){\n        char[] oldArray = (char[]) array;\n        char[] newArray = (char[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof byte[]){\n        byte[] oldArray = (byte[]) array;\n        byte[] newArray = (byte[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof boolean[]){\n        boolean[] oldArray = (boolean[]) array;\n        boolean[] newArray = (boolean[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof String[]){\n        String[] oldArray = (String[]) array;\n        String[] newArray = (String[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else{\n        throw new IllegalArgumentException(\"Unsupported array type: \" + array.getClass().getName());\n    }\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"Object.getClass()\" because \"<parameter1>\" is null\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils.copyArrayGrow1(ArrayUtils.java:103)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils.add(ArrayUtils.java:46)\n\tat net.hasor.rsf.protocol.rsf.v1.ArrayUtils_copyArrayGrow1.main(ArrayUtils_copyArrayGrow1.java:14)\n", "is_pass": false}], "docstring": "/** \n * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.\n * @param array The array to copy, must not be <code>null</code>.\n * @param newArrayComponentType If <code>array</code> is <code>null</code>, create asize 1 array of this type.\n * @return A new copy of the array of size 1 greater than the input.\n */\n", "method_name": "copyArrayGrow1", "codes": ["private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    if(array instanceof Object[]){\n        Object[] oldArray = (Object[]) array;\n        Object[] newArray = (Object[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof int[]){\n        int[] oldArray = (int[]) array;\n        int[] newArray = (int[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof double[]){\n        double[] oldArray = (double[]) array;\n        double[] newArray = (double[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof float[]){\n        float[] oldArray = (float[]) array;\n        float[] newArray = (float[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof long[]){\n        long[] oldArray = (long[]) array;\n        long[] newArray = (long[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof short[]){\n        short[] oldArray = (short[]) array;\n        short[] newArray = (short[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof char[]){\n        char[] oldArray = (char[]) array;\n        char[] newArray = (char[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof byte[]){\n        byte[] oldArray = (byte[]) array;\n        byte[] newArray = (byte[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof boolean[]){\n        boolean[] oldArray = (boolean[]) array;\n        boolean[] newArray = (boolean[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else if(array instanceof String[]){\n        String[] oldArray = (String[]) array;\n        String[] newArray = (String[]) Array.newInstance(newArrayComponentType, oldArray.length + 1);\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\n        return newArray;\n    }else{\n        throw new IllegalArgumentException(\"Unsupported array type: \" + array.getClass().getName());\n    }\n}"], "code_level": "slib_runnable", "_id": "636767031a6d9265ec0178ef", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-rsf/rsf-framework/target/classes/net/hasor/rsf/protocol/rsf/v1/ArrayUtils_copyArrayGrow1.class"}
{"generate_results": [{"generate_code": "public static String sessionId(){\n    HttpSession session = Invoker.getCurrentRequest().getSession();\n    return session.getId();\n}", "errormessage": "compile error", "error_detail_message": "WebUdfSource.java:274: error: cannot find symbol\n    HttpSession session = Invoker.getCurrentRequest().getSession();\n                                 ^\n  symbol:   method getCurrentRequest()\n  location: interface Invoker\n1 error\n", "is_pass": false}], "docstring": "/** \n * Session ID. \n */\n", "method_name": "sessionId", "codes": ["public static String sessionId(){\n    HttpSession session = Invoker.getCurrentRequest().getSession();\n    return session.getId();\n}"], "code_level": "plib_runnable", "_id": "636766fe1a6d9265ec017834", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-dataql/dataql-fx/src/main/java/net/hasor/dataql/fx/web/WebUdfSource_sessionId.java"}
{"generate_results": [{"generate_code": "public Boolean isPartialContentResponse(){\n    if(resourceInfo.getResourceMethod().getAnnotation(PartialContent.class) != null){\n        return true;\n    }\n    return false;\n}", "errormessage": "compile error", "error_detail_message": "PaginationHelper.java:97: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n                drc.setOffset(new Integer(0));\n                              ^\nPaginationHelper.java:165: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setOffset(new Integer(offset));\n                                  ^\nPaginationHelper.java:166: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setLimit(new Integer(limit));\n                                 ^\nPaginationHelper.java:211: error: cannot find symbol\n    if(resourceInfo.getResourceMethod().getAnnotation(PartialContent.class) != null){\n                                                      ^\n  symbol:   class PartialContent\n  location: class PaginationHelper\nPaginationHelper.java:295: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            drc.setOffset(new Integer(0));\n                          ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:28: error: package io.swagger.annotations does not exist\nimport io.swagger.annotations.ApiOperation;\n                             ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:29: error: package io.swagger.jaxrs does not exist\nimport io.swagger.jaxrs.PATCH;\n                       ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:49: error: cannot find symbol\n    @ApiOperation(value = \"persist entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:57: error: cannot find symbol\n    @ApiOperation(value = \"full update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:63: error: cannot find symbol\n    @PATCH\n     ^\n  symbol:   class PATCH\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:66: error: cannot find symbol\n    @ApiOperation(value = \"partial update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:75: error: cannot find symbol\n    @ApiOperation(value = \"remove entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:84: error: cannot find symbol\n    @ApiOperation(value = \"find by ID\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n9 errors\n4 warnings\n", "is_pass": false}], "docstring": "/** \n * Check if the actual response is a Partial Content (HTTP 206 code)\n * @return is partial content or not\n */\n", "method_name": "isPartialContentResponse", "codes": ["public Boolean isPartialContentResponse(){\n    if(resourceInfo.getResourceMethod().getAnnotation(PartialContent.class) != null){\n        return true;\n    }\n    return false;\n}"], "code_level": "plib_runnable", "_id": "636766ae1a6d9265ec0175dc", "project_name": "framework-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/pagination/PaginationHelper_isPartialContentResponse.java"}
{"generate_results": [{"generate_code": "private String buildContentRange(){\n    int offset = this.offset;\n    int limit = this.limit;\n    int count = this.count;\n    if(limit == 0){\n        limit = count - 1;\n    }\n    return \"items \" + offset + \"-\" + (offset + limit) + \"/\" + count;\n}", "errormessage": "compile error", "error_detail_message": "PaginationHelper.java:97: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n                drc.setOffset(new Integer(0));\n                              ^\nPaginationHelper.java:165: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setOffset(new Integer(offset));\n                                  ^\nPaginationHelper.java:166: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                    drc.setLimit(new Integer(limit));\n                                 ^\nPaginationHelper.java:226: error: cannot find symbol\n    int offset = this.offset;\n                     ^\n  symbol: variable offset\nPaginationHelper.java:227: error: cannot find symbol\n    int limit = this.limit;\n                    ^\n  symbol: variable limit\nPaginationHelper.java:228: error: cannot find symbol\n    int count = this.count;\n                    ^\n  symbol: variable count\nPaginationHelper.java:297: warning: [removal] Integer(int) in Integer has been deprecated and marked for removal\n            drc.setOffset(new Integer(0));\n                          ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:28: error: package io.swagger.annotations does not exist\nimport io.swagger.annotations.ApiOperation;\n                             ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:29: error: package io.swagger.jaxrs does not exist\nimport io.swagger.jaxrs.PATCH;\n                       ^\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:49: error: cannot find symbol\n    @ApiOperation(value = \"persist entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:57: error: cannot find symbol\n    @ApiOperation(value = \"full update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:63: error: cannot find symbol\n    @PATCH\n     ^\n  symbol:   class PATCH\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:66: error: cannot find symbol\n    @ApiOperation(value = \"partial update entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:75: error: cannot find symbol\n    @ApiOperation(value = \"remove entity\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/AbstractREST.java:84: error: cannot find symbol\n    @ApiOperation(value = \"find by ID\")\n     ^\n  symbol:   class ApiOperation\n  location: class AbstractREST<T,I>\n  where T,I are type-variables:\n    T extends Object declared in class AbstractREST\n    I extends Object declared in class AbstractREST\n11 errors\n4 warnings\n", "is_pass": false}], "docstring": "/** \n * Build the 'Content-Range' HTTP Header value.\n * @return 'Content-Range' value\n */\n", "method_name": "buildContentRange", "codes": ["private String buildContentRange(){\n    int offset = this.offset;\n    int limit = this.limit;\n    int count = this.count;\n    if(limit == 0){\n        limit = count - 1;\n    }\n    return \"items \" + offset + \"-\" + (offset + limit) + \"/\" + count;\n}"], "code_level": "class_runnable", "_id": "636766ae1a6d9265ec0175d8", "project_name": "framework-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/framework/demoiselle-crud/src/main/java/org/demoiselle/jee/crud/pagination/PaginationHelper_buildContentRange.java"}
{"generate_results": [{"generate_code": "private static String javaCharset(String charset){\n    if(charset == null){\n        return US_ASCII_CHARSET;\n    }\n    String javaCharset = MIME2JAVA.get(charset);\n    if(javaCharset == null){\n        throw new IllegalArgumentException(\"Unsupported charset: \" + charset);\n    }\n    return javaCharset;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Unsupported charset: abcdefgh\n\tat net.hasor.web.upload.util.MimeUtility.javaCharset(MimeUtility.java:234)\n\tat net.hasor.web.upload.util.MimeUtility_javaCharset.main(MimeUtility_javaCharset.java:6)\n", "is_pass": false}], "docstring": "/** \n * Translate a MIME standard character set name into the Java equivalent.\n * @param charset The MIME standard name.\n * @return The Java equivalent for this name.\n */\n", "method_name": "javaCharset", "codes": ["private static String javaCharset(String charset){\n    if(charset == null){\n        return US_ASCII_CHARSET;\n    }\n    String javaCharset = MIME2JAVA.get(charset);\n    if(javaCharset == null){\n        throw new IllegalArgumentException(\"Unsupported charset: \" + charset);\n    }\n    return javaCharset;\n}"], "code_level": "class_runnable", "_id": "636766f01a6d9265ec01763e", "project_name": "hasor-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/hasor/hasor-web/target/classes/net/hasor/web/upload/util/MimeUtility_javaCharset.class"}
{"generate_results": [{"generate_code": "private TreeNode<T> rotateRight(TreeNode<T> node){\n    TreeNode<T> temp = node.getLeft();\n    node.setLeft(temp.getRight());\n    temp.setRight(node);\n    node.updateHeightAndSubtreeSize();\n    temp.updateHeightAndSubtreeSize();\n    return temp;\n}", "errormessage": "compile error", "error_detail_message": "AVLTree.java:490: error: cannot find symbol\n    node.setLeft(temp.getRight());\n        ^\n  symbol:   method setLeft(TreeNode<T>)\n  location: variable node of type TreeNode<T>\n  where T is a type-variable:\n    T extends Object declared in class AVLTree\nAVLTree.java:491: error: cannot find symbol\n    temp.setRight(node);\n        ^\n  symbol:   method setRight(TreeNode<T>)\n  location: variable temp of type TreeNode<T>\n  where T is a type-variable:\n    T extends Object declared in class AVLTree\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Performs a right node rotation.\n * @param node a node to rotate\n * @return a new parent of the {@code node}\n */\n", "method_name": "rotateRight", "codes": ["private TreeNode<T> rotateRight(TreeNode<T> node){\n    TreeNode<T> temp = node.getLeft();\n    node.setLeft(temp.getRight());\n    temp.setRight(node);\n    node.updateHeightAndSubtreeSize();\n    temp.updateHeightAndSubtreeSize();\n    return temp;\n}"], "code_level": "file_runnable", "_id": "636767441a6d9265ec017cc1", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/AVLTree_rotateRight.java"}
{"generate_results": [{"generate_code": "public static final <V>void swap(V[] arr,int i,int j){\n    V temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Swaps the two elements at the specified indices in the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param i the index of the first element\n * @param j the index of the second element\n */\n", "method_name": "swap", "codes": ["public static final <V>void swap(V[] arr,int i,int j){\n    V temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}"], "code_level": "self_contained", "_id": "636767551a6d9265ec017f3f", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/ArrayUtil_swap.class"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n    return (Supplier<String>) OBJECT_SUPPLIER.get();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ClassCastException: class java.lang.Object cannot be cast to class java.util.function.Supplier (java.lang.Object and java.util.function.Supplier are in module java.base of loader 'bootstrap')\n\tat org.jgrapht.util.SupplierUtil.createStringSupplier(SupplierUtil.java:187)\n\tat org.jgrapht.util.SupplierUtil_createStringSupplier.main(SupplierUtil_createStringSupplier.java:19)\n", "is_pass": false}], "docstring": "/** \n * Create a string supplier which returns unique strings. The returns strings are simply integers starting from start.\n * @param start where to start the sequence\n * @return a string supplier\n */\n", "method_name": "createStringSupplier", "codes": ["@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){\n    return (Supplier<String>) OBJECT_SUPPLIER.get();\n}"], "code_level": "slib_runnable", "_id": "6367675c1a6d9265ec018058", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/SupplierUtil_createStringSupplier.class"}
{"generate_results": [{"generate_code": "@Override public ListNode<E> previousNode(){\n    if(previousIndex<0)\n        throw new IllegalStateException(\"No previous node\");\n    return getNode(previousIndex);\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:1224: error: cannot find symbol\n    if(previousIndex<0)\n       ^\n  symbol:   variable previousIndex\n  location: class DoublyLinkedList<E>.ListNodeIteratorImpl\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:1226: error: cannot find symbol\n    return getNode(previousIndex);\n                   ^\n  symbol:   variable previousIndex\n  location: class DoublyLinkedList<E>.ListNodeIteratorImpl\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\n2 errors\n", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "previousNode", "codes": ["@Override public ListNode<E> previousNode(){\n    if(previousIndex<0)\n        throw new IllegalStateException(\"No previous node\");\n    return getNode(previousIndex);\n}"], "code_level": "class_runnable", "_id": "636767501a6d9265ec017e86", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_previousNode.java"}
{"generate_results": [{"generate_code": "public static long factorial(int n){\n    if(n==0){\n        return 1;\n    }else{\n        return n*factorial(n-1);\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Calculate the factorial of $n$.\n * @param n the input number\n * @return the factorial\n */\n", "method_name": "factorial", "codes": ["public static long factorial(int n){\n    if(n==0){\n        return 1;\n    }else{\n        return n*factorial(n-1);\n    }\n}"], "code_level": "self_contained", "_id": "636767581a6d9265ec017fc4", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/MathUtil_factorial.class"}
{"generate_results": [{"generate_code": "private boolean unlink(ListNodeImpl<E> node){\n    if(node == null)\n        return false;\n    if(node.getPrev() == node){\n        node.getNext().setPrev(null);\n    }else if(node.getNext() == node){\n        node.getPrev().setNext(null);\n    }else{\n        node.getPrev().setNext(node.getNext());\n        node.getNext().setPrev(node.getPrev());\n    }\n    node.setValue(null);\n    node.setNext(null);\n    node.setPrev(null);\n    size--;\n    return true;\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:244: error: cannot find symbol\n        node.getNext().setPrev(null);\n                      ^\n  symbol:   method setPrev(<null>)\n  location: class ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:246: error: cannot find symbol\n        node.getPrev().setNext(null);\n                      ^\n  symbol:   method setNext(<null>)\n  location: class ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:248: error: cannot find symbol\n        node.getPrev().setNext(node.getNext());\n                      ^\n  symbol:   method setNext(ListNodeImpl<E>)\n  location: class ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:249: error: cannot find symbol\n        node.getNext().setPrev(node.getPrev());\n                      ^\n  symbol:   method setPrev(ListNodeImpl<E>)\n  location: class ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:251: error: cannot find symbol\n    node.setValue(null);\n        ^\n  symbol:   method setValue(<null>)\n  location: variable node of type ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:252: error: cannot find symbol\n    node.setNext(null);\n        ^\n  symbol:   method setNext(<null>)\n  location: variable node of type ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\nDoublyLinkedList.java:253: error: cannot find symbol\n    node.setPrev(null);\n        ^\n  symbol:   method setPrev(<null>)\n  location: variable node of type ListNodeImpl<E>\n  where E is a type-variable:\n    E extends Object declared in class DoublyLinkedList\n7 errors\n", "is_pass": false}], "docstring": "/** \n * Remove the non null  {@code node} from the list. \n */\n", "method_name": "unlink", "codes": ["private boolean unlink(ListNodeImpl<E> node){\n    if(node == null)\n        return false;\n    if(node.getPrev() == node){\n        node.getNext().setPrev(null);\n    }else if(node.getNext() == node){\n        node.getPrev().setNext(null);\n    }else{\n        node.getPrev().setNext(node.getNext());\n        node.getNext().setPrev(node.getPrev());\n    }\n    node.setValue(null);\n    node.setNext(null);\n    node.setPrev(null);\n    size--;\n    return true;\n}"], "code_level": "class_runnable", "_id": "636767631a6d9265ec018171", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_unlink.java"}
{"generate_results": [{"generate_code": "public static final <V>void reverse(V[] arr,int from,int to){\n    while(from<to){\n        swap(arr,from,to);\n        from++;\n        to--;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reverses the order of the elements in the specified range within the given array.\n * @param < V > the type of elements in the array\n * @param arr the array\n * @param from the index of the first element (inclusive) inside the range to reverse\n * @param to the index of the last element (inclusive) inside the range to reverse\n */\n", "method_name": "reverse", "codes": ["public static final <V>void reverse(V[] arr,int from,int to){\n    while(from<to){\n        swap(arr,from,to);\n        from++;\n        to--;\n    }\n}"], "code_level": "class_runnable", "_id": "636767491a6d9265ec017d90", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/util/ArrayUtil_reverse.class"}
{"generate_results": [{"generate_code": "private void moveAllListNodes(DoublyLinkedList<E> list){\n    DoublyLinkedList<E> newList = new DoublyLinkedList<>();\n    ListNodeImpl<E> currentNode = list.head;\n    while(currentNode != null){\n        newList.addLast(currentNode.getValue());\n        currentNode = currentNode.getNext();\n    }\n    this.list = newList;\n}", "errormessage": "compile error", "error_detail_message": "DoublyLinkedList.java:144: error: cannot find symbol\n    this.list = newList;\n        ^\n  symbol: variable list\n1 error\n", "is_pass": false}], "docstring": "/** \n * Atomically moves all  {@link ListNode ListNodes} from {@code list} to this list as if eachnode was removed with  {@link #removeListNode(ListNodeImpl)} from {@code list} andsubsequently added to this list by  {@link #addListNode(ListNodeImpl)}.\n */\n", "method_name": "moveAllListNodes", "codes": ["private void moveAllListNodes(DoublyLinkedList<E> list){\n    DoublyLinkedList<E> newList = new DoublyLinkedList<>();\n    ListNodeImpl<E> currentNode = list.head;\n    while(currentNode != null){\n        newList.addLast(currentNode.getValue());\n        currentNode = currentNode.getNext();\n    }\n    this.list = newList;\n}"], "code_level": "class_runnable", "_id": "6367674a1a6d9265ec017da9", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/util/DoublyLinkedList_moveAllListNodes.java"}
{"generate_results": [{"generate_code": "public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    Map<V,V> forwardMapping = new HashMap<>();\n    Map<V,V> backwardMapping = new HashMap<>();\n    int i = 0;\n    for(V v : graph.getVertexSet()){\n        forwardMapping.put(v, new V(i++));\n        backwardMapping.put(new V(i++), v);\n    }\n    return new IsomorphicGraphMapping<>(forwardMapping, backwardMapping, graph, graph);\n}", "errormessage": "compile error", "error_detail_message": "IsomorphicGraphMapping.java:342: error: cannot find symbol\n    for(V v : graph.getVertexSet()){\n                   ^\n  symbol:   method getVertexSet()\n  location: variable graph of type Graph<V,E>\n  where V,E are type-variables:\n    V extends Object declared in method <V,E>identity(Graph<V,E>)\n    E extends Object declared in method <V,E>identity(Graph<V,E>)\nIsomorphicGraphMapping.java:343: error: unexpected type\n        forwardMapping.put(v, new V(i++));\n                                  ^\n  required: class\n  found:    type parameter V\n  where V,E are type-variables:\n    V extends Object declared in method <V,E>identity(Graph<V,E>)\n    E extends Object declared in method <V,E>identity(Graph<V,E>)\nIsomorphicGraphMapping.java:344: error: unexpected type\n        backwardMapping.put(new V(i++), v);\n                                ^\n  required: class\n  found:    type parameter V\n  where V,E are type-variables:\n    V extends Object declared in method <V,E>identity(Graph<V,E>)\n    E extends Object declared in method <V,E>identity(Graph<V,E>)\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Computes an identity automorphism (i.e. a self-mapping of a graph in which each vertex also maps to itself).\n * @param graph the input graph\n * @param < V > the graph vertex type\n * @param < E > the graph edge type\n * @return a mapping from graph to graph\n */\n", "method_name": "identity", "codes": ["public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){\n    Map<V,V> forwardMapping = new HashMap<>();\n    Map<V,V> backwardMapping = new HashMap<>();\n    int i = 0;\n    for(V v : graph.getVertexSet()){\n        forwardMapping.put(v, new V(i++));\n        backwardMapping.put(new V(i++), v);\n    }\n    return new IsomorphicGraphMapping<>(forwardMapping, backwardMapping, graph, graph);\n}"], "code_level": "project_runnable", "_id": "6367675f1a6d9265ec0180d3", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/IsomorphicGraphMapping_identity.java"}
{"generate_results": [{"generate_code": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n    //Create a new graph\n    target = new CompleteBipartiteGraphGenerator(partitionA, partitionB);\n    //Add vertices to the graph\n    for(V vertex : partitionA){\n        resultMap.put(vertex.toString(), vertex);\n    }\n    for(V vertex : partitionB){\n        resultMap.put(vertex.toString(), vertex);\n    }\n    //Add edges to the graph\n    for(V vertexA : partitionA){\n        for(V vertexB : partitionB){\n            if(!target.containsEdge(vertexA, vertexB)){\n                target.addEdge(vertexA, vertexB);\n            }\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "CompleteBipartiteGraphGenerator.java:82: error: incompatible types: CompleteBipartiteGraphGenerator cannot be converted to Graph<V,E>\n    target = new CompleteBipartiteGraphGenerator(partitionA, partitionB);\n             ^\n  where V,E are type-variables:\n    V extends Object declared in class CompleteBipartiteGraphGenerator\n    E extends Object declared in class CompleteBipartiteGraphGenerator\nNote: CompleteBipartiteGraphGenerator.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Construct a complete bipartite graph\n */\n", "method_name": "generateGraph", "codes": ["@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n    //Create a new graph\n    target = new CompleteBipartiteGraphGenerator(partitionA, partitionB);\n    //Add vertices to the graph\n    for(V vertex : partitionA){\n        resultMap.put(vertex.toString(), vertex);\n    }\n    for(V vertex : partitionB){\n        resultMap.put(vertex.toString(), vertex);\n    }\n    //Add edges to the graph\n    for(V vertexA : partitionA){\n        for(V vertexB : partitionB){\n            if(!target.containsEdge(vertexA, vertexB)){\n                target.addEdge(vertexA, vertexB);\n            }\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636767641a6d9265ec01817d", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/CompleteBipartiteGraphGenerator_generateGraph.java"}
{"generate_results": [{"generate_code": "void insertBefore(Bucket bucket){\n    if(bucketMap.containsKey(bucket.getVertex())){\n        Bucket prevBucket = bucketMap.get(bucket.getVertex());\n        bucket.setNext(prevBucket);\n        prevBucket.setPrev(bucket);\n        bucketMap.put(bucket.getVertex(), bucket);\n    }\n    else{\n        throw new NoSuchElementException(\"Bucket does not exist\");\n    }\n}", "errormessage": "compile error", "error_detail_message": "LexBreadthFirstIterator.java:359: error: cannot find symbol\n    if(bucketMap.containsKey(bucket.getVertex())){\n                                   ^\n  symbol:   method getVertex()\n  location: variable bucket of type LexBreadthFirstIterator<V,E>.BucketList.Bucket\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:360: error: cannot find symbol\n        Bucket prevBucket = bucketMap.get(bucket.getVertex());\n                                                ^\n  symbol:   method getVertex()\n  location: variable bucket of type LexBreadthFirstIterator<V,E>.BucketList.Bucket\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:361: error: cannot find symbol\n        bucket.setNext(prevBucket);\n              ^\n  symbol:   method setNext(LexBreadthFirstIterator<V,E>.BucketList.Bucket)\n  location: variable bucket of type LexBreadthFirstIterator<V,E>.BucketList.Bucket\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:362: error: cannot find symbol\n        prevBucket.setPrev(bucket);\n                  ^\n  symbol:   method setPrev(LexBreadthFirstIterator<V,E>.BucketList.Bucket)\n  location: variable prevBucket of type LexBreadthFirstIterator<V,E>.BucketList.Bucket\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\nLexBreadthFirstIterator.java:363: error: cannot find symbol\n        bucketMap.put(bucket.getVertex(), bucket);\n                            ^\n  symbol:   method getVertex()\n  location: variable bucket of type LexBreadthFirstIterator<V,E>.BucketList.Bucket\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\n5 errors\n", "is_pass": false}], "docstring": "/** \n * Inserts this bucket in the data structure before the  {@code bucket}.\n * @param bucket the bucket, that will be the next to this bucket.\n */\n", "method_name": "insertBefore", "codes": ["void insertBefore(Bucket bucket){\n    if(bucketMap.containsKey(bucket.getVertex())){\n        Bucket prevBucket = bucketMap.get(bucket.getVertex());\n        bucket.setNext(prevBucket);\n        prevBucket.setPrev(bucket);\n        bucketMap.put(bucket.getVertex(), bucket);\n    }\n    else{\n        throw new NoSuchElementException(\"Bucket does not exist\");\n    }\n}"], "code_level": "class_runnable", "_id": "636767531a6d9265ec017efb", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator_insertBefore.java"}
{"generate_results": [{"generate_code": "@Override public boolean hasNext(){\n    return !vertices.isEmpty();\n}", "errormessage": "compile error", "error_detail_message": "LexBreadthFirstIterator.java:88: error: cannot find symbol\n    return !vertices.isEmpty();\n            ^\n  symbol:   variable vertices\n  location: class LexBreadthFirstIterator<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class LexBreadthFirstIterator\n    E extends Object declared in class LexBreadthFirstIterator\n1 error\n", "is_pass": false}], "docstring": "/** \n * Checks whether there exist unvisited vertices.\n * @return true if there exist unvisited vertices.\n */\n", "method_name": "hasNext", "codes": ["@Override public boolean hasNext(){\n    return !vertices.isEmpty();\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f63", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/traverse/LexBreadthFirstIterator_hasNext.java"}
{"generate_results": [{"generate_code": "void removeSelf(){\n    if(prev != null){\n        prev.next = next;\n    }\n    if(next != null){\n        next.prev = prev;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Removes this bucket from the data structure.\n */\n", "method_name": "removeSelf", "codes": ["void removeSelf(){\n    if(prev != null){\n        prev.next = next;\n    }\n    if(next != null){\n        next.prev = prev;\n    }\n}"], "code_level": "class_runnable", "_id": "6367675a1a6d9265ec018010", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/traverse/LexBreadthFirstIterator_removeSelf.class"}
{"generate_results": [{"generate_code": "private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<V>();\n    for(E e : graph.edgeSet()){\n        V v1 = graph.getEdgeSource(e);\n        V v2 = graph.getEdgeTarget(e);\n        visibleVertices.add(v1);\n        visibleVertices.add(v2);\n    }\n    return visibleVertices;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compute all vertices that have positive degree by iterating over the edges on purpose. This keeps the complexity to $O(m)$ where $m$ is the number of edges.\n * @return set of vertices with positive degree\n */\n", "method_name": "initVisibleVertices", "codes": ["private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<V>();\n    for(E e : graph.edgeSet()){\n        V v1 = graph.getEdgeSource(e);\n        V v2 = graph.getEdgeTarget(e);\n        visibleVertices.add(v1);\n        visibleVertices.add(v2);\n    }\n    return visibleVertices;\n}"], "code_level": "class_runnable", "_id": "6367674b1a6d9265ec017dc0", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/matching/PathGrowingWeightedMatching_initVisibleVertices.class"}
{"generate_results": [{"generate_code": "public void removeFromTreeEdgeList(){\n    if(prev != null){\n        prev[0].remove(this);\n    }\n    if(next != null){\n        next[0].remove(this);\n    }\n}", "errormessage": "compile error", "error_detail_message": "BlossomVTreeEdge.java:102: error: cannot find symbol\n        prev[0].remove(this);\n               ^\n  symbol:   method remove(BlossomVTreeEdge)\n  location: class BlossomVTreeEdge\nBlossomVTreeEdge.java:105: error: cannot find symbol\n        next[0].remove(this);\n               ^\n  symbol:   method remove(BlossomVTreeEdge)\n  location: class BlossomVTreeEdge\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Removes this edge from both doubly linked lists of tree edges.\n */\n", "method_name": "removeFromTreeEdgeList", "codes": ["public void removeFromTreeEdgeList(){\n    if(prev != null){\n        prev[0].remove(this);\n    }\n    if(next != null){\n        next[0].remove(this);\n    }\n}"], "code_level": "class_runnable", "_id": "6367675c1a6d9265ec01805b", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/matching/blossom/v5/BlossomVTreeEdge_removeFromTreeEdgeList.java"}
{"generate_results": [{"generate_code": "protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    touchingVerticesToEdgeMap.compute(new Pair<>(sourceVertex, targetVertex), (k,v) -> {\n        if(v == null){\n            v = new HashSet<>();\n        }\n        v.add(e);\n        return v;\n    });\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add an edge to the index.\n * @param sourceVertex the source vertex\n * @param targetVertex the target vertex\n * @param e the edge\n */\n", "method_name": "addToIndex", "codes": ["protected void addToIndex(V sourceVertex,V targetVertex,E e){\n    touchingVerticesToEdgeMap.compute(new Pair<>(sourceVertex, targetVertex), (k,v) -> {\n        if(v == null){\n            v = new HashSet<>();\n        }\n        v.add(e);\n        return v;\n    });\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180fd", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/graph/specifics/FastLookupDirectedSpecifics_addToIndex.class"}
{"generate_results": [{"generate_code": "public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    double width = box.getWidth();\n    double height = box.getHeight();\n    Box2D box1 = new Box2D(0,0,width/2,height);\n    Box2D box2 = new Box2D(width/2,0,width/2,height);\n    return new Pair<>(box1,box2);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Split a box along the x axis into two equal boxes.\n * @param box the box to split\n * @return a pair with the two resulting boxes\n */\n", "method_name": "splitAlongXAxis", "codes": ["public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){\n    double width = box.getWidth();\n    double height = box.getHeight();\n    Box2D box1 = new Box2D(0,0,width/2,height);\n    Box2D box2 = new Box2D(width/2,0,width/2,height);\n    return new Pair<>(box1,box2);\n}"], "code_level": "project_runnable", "_id": "636767521a6d9265ec017ecc", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/drawing/model/Boxes_splitAlongXAxis.class"}
{"generate_results": [{"generate_code": "public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.equals(p1, p2);\n}", "errormessage": "compile error", "error_detail_message": "Points.java:109: error: method equals in class Object cannot be applied to given types;\n    return TOLERANCE_DOUBLE_COMPARATOR.equals(p1, p2);\n                                      ^\n  required: Object\n  found:    Point2D,Point2D\n  reason: actual and formal argument lists differ in length\n1 error\n", "is_pass": false}], "docstring": "/** \n * Compare two points for equality using tolerance 1e-9.\n * @param p1 the first point\n * @param p2 the second point\n * @return whether the two points are equal or not\n */\n", "method_name": "equals", "codes": ["public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.equals(p1, p2);\n}"], "code_level": "project_runnable", "_id": "636767531a6d9265ec017ef1", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/drawing/model/Points_equals.java"}
{"generate_results": [{"generate_code": "@Override public int compare(Double o1,Double o2){\n    if (Math.abs(o1-o2) < epsilon) return 0;\n    else return Double.compare(o1, o2);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares two floating point values. Returns 0 if they are equal, -1 if  {@literal o1 < o2}, 1 otherwise\n * @param o1 the first value\n * @param o2 the second value\n * @return 0 if they are equal, -1 if {@literal o1 < o2}, 1 otherwise\n */\n", "method_name": "compare", "codes": ["@Override public int compare(Double o1,Double o2){\n    if (Math.abs(o1-o2) < epsilon) return 0;\n    else return Double.compare(o1, o2);\n}"], "code_level": "slib_runnable", "_id": "6367674a1a6d9265ec017dab", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/util/ToleranceDoubleComparator_compare.class"}
{"generate_results": [{"generate_code": "public String toString(){\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < n; i++){\n        sb.append(vs[i]);\n        if(i < n - 1){\n            sb.append(\", \");\n        }\n    }\n    return sb.toString();\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a textual representation of the queue.\n * @return a textual representation of the queue.\n */\n", "method_name": "toString", "codes": ["public String toString(){\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < n; i++){\n        sb.append(vs[i]);\n        if(i < n - 1){\n            sb.append(\", \");\n        }\n    }\n    return sb.toString();\n}"], "code_level": "class_runnable", "_id": "6367674f1a6d9265ec017e74", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/util/FixedSizeIntegerQueue_toString.class"}
{"generate_results": [{"generate_code": "private int computeBinaryLog(int n){\n    return (int) Math.floor(Math.log(n) / Math.log(2));\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Computes floor($\\log_2 (n)$) $+ 1$\n */\n", "method_name": "computeBinaryLog", "codes": ["private int computeBinaryLog(int n){\n    return (int) Math.floor(Math.log(n) / Math.log(2));\n}"], "code_level": "self_contained", "_id": "636767431a6d9265ec017c8d", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/TransitiveClosure_computeBinaryLog.class"}
{"generate_results": [{"generate_code": "public double vertexWeight(Set<V> v){\n    double sum = 0;\n    for(DefaultWeightedEdge e : workingGraph.edgeSet()){\n        if(v.contains(workingGraph.getEdgeSource(e))){\n            sum += workingGraph.getEdgeWeight(e);\n        }\n    }\n    return sum;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compute the sum of the weights entering a vertex\n * @param v the vertex\n * @return the sum of the weights entering a vertex\n */\n", "method_name": "vertexWeight", "codes": ["public double vertexWeight(Set<V> v){\n    double sum = 0;\n    for(DefaultWeightedEdge e : workingGraph.edgeSet()){\n        if(v.contains(workingGraph.getEdgeSource(e))){\n            sum += workingGraph.getEdgeWeight(e);\n        }\n    }\n    return sum;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018106", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/StoerWagnerMinimumCut_vertexWeight.class"}
{"generate_results": [{"generate_code": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n    return set1.stream().filter(set2::contains).collect(Collectors.toSet());\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Efficient way to compute the intersection between two sets\n * @param set1 set $1$\n * @param set2 set $2$\n * @return intersection of set $1$ and $2$\n */\n", "method_name": "intersection", "codes": ["private Set<V> intersection(Set<V> set1,Set<V> set2){\n    return set1.stream().filter(set2::contains).collect(Collectors.toSet());\n}"], "code_level": "slib_runnable", "_id": "636767611a6d9265ec018116", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/flow/PadbergRaoOddMinimumCutset_intersection.class"}
{"generate_results": [{"generate_code": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    return new OuterFaceCirculator(start,dir);\n}", "errormessage": "compile error", "error_detail_message": "BoyerMyrvoldPlanarityInspector.java:669: error: incompatible types: int cannot be converted to BoyerMyrvoldPlanarityInspector<V,E>.Node\n    return new OuterFaceCirculator(start,dir);\n                                         ^\n  where V,E are type-variables:\n    V extends Object declared in class BoyerMyrvoldPlanarityInspector\n    E extends Object declared in class BoyerMyrvoldPlanarityInspector\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Either finds and returns a circulator to the node on the boundary of the component, which satisfies the  {@code predicate} or returns a circulator to the {@code stop} node.\n * @param predicate the condition the desired node should satisfy\n * @param start the node to start the search from\n * @param stop the node to end the search with\n * @param dir the direction to start the traversal in\n * @return a circulator to the node satisfying the {@code predicate} or to the {@code stop} node\n */\n", "method_name": "selectOnOuterFace", "codes": ["private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    return new OuterFaceCirculator(start,dir);\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb6", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/planar/BoyerMyrvoldPlanarityInspector_selectOnOuterFace.java"}
{"generate_results": [{"generate_code": "Edge edgeToNext(){\n    if(prevEdge==null){\n        return null;\n    }\n    if(prevEdge.getTarget().equals(current)){\n        return prevEdge.getOtherVertex(current);\n    }\n    return null;\n}", "errormessage": "compile error", "error_detail_message": "BoyerMyrvoldPlanarityInspector.java:1728: error: cannot find symbol\n    if(prevEdge==null){\n       ^\n  symbol:   variable prevEdge\n  location: class BoyerMyrvoldPlanarityInspector<V,E>.OuterFaceCirculator\n  where V,E are type-variables:\n    V extends Object declared in class BoyerMyrvoldPlanarityInspector\n    E extends Object declared in class BoyerMyrvoldPlanarityInspector\nBoyerMyrvoldPlanarityInspector.java:1731: error: cannot find symbol\n    if(prevEdge.getTarget().equals(current)){\n       ^\n  symbol:   variable prevEdge\n  location: class BoyerMyrvoldPlanarityInspector<V,E>.OuterFaceCirculator\n  where V,E are type-variables:\n    V extends Object declared in class BoyerMyrvoldPlanarityInspector\n    E extends Object declared in class BoyerMyrvoldPlanarityInspector\nBoyerMyrvoldPlanarityInspector.java:1732: error: cannot find symbol\n        return prevEdge.getOtherVertex(current);\n               ^\n  symbol:   variable prevEdge\n  location: class BoyerMyrvoldPlanarityInspector<V,E>.OuterFaceCirculator\n  where V,E are type-variables:\n    V extends Object declared in class BoyerMyrvoldPlanarityInspector\n    E extends Object declared in class BoyerMyrvoldPlanarityInspector\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Returns an edge connecting previously returned node with node, which will be returned next. If either of the mentioned nodes is virtual, the edge will be incident to its real counterpart.\n * @return an edge from the current node to the next node\n */\n", "method_name": "edgeToNext", "codes": ["Edge edgeToNext(){\n    if(prevEdge==null){\n        return null;\n    }\n    if(prevEdge.getTarget().equals(current)){\n        return prevEdge.getOtherVertex(current);\n    }\n    return null;\n}"], "code_level": "class_runnable", "_id": "6367675d1a6d9265ec018082", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/planar/BoyerMyrvoldPlanarityInspector_edgeToNext.java"}
{"generate_results": [{"generate_code": "protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    if(tour==null || tour.isEmpty()){\n        throw new IllegalArgumentException(\"Tour is null or empty\");\n    }\n    GraphPath<V,E> graphPath = new DefaultGraphPath<V,E>(graph);\n    for(E edge : tour){\n        if(!graph.containsEdge(edge)){\n            throw new IllegalArgumentException(\"Tour contains an invalid edge\");\n        }\n        graphPath.addEdge(edge);\n    }\n    return graphPath;\n}", "errormessage": "compile error", "error_detail_message": "HamiltonianCycleAlgorithmBase.java:86: error: cannot find symbol\n    GraphPath<V,E> graphPath = new DefaultGraphPath<V,E>(graph);\n                                   ^\n  symbol:   class DefaultGraphPath\n  location: class HamiltonianCycleAlgorithmBase<V,E>\n  where V,E are type-variables:\n    V extends Object declared in class HamiltonianCycleAlgorithmBase\n    E extends Object declared in class HamiltonianCycleAlgorithmBase\nHamiltonianCycleAlgorithmBase.java:91: error: cannot find symbol\n        graphPath.addEdge(edge);\n                 ^\n  symbol:   method addEdge(E)\n  location: variable graphPath of type GraphPath<V,E>\n  where E,V are type-variables:\n    E extends Object declared in class HamiltonianCycleAlgorithmBase\n    V extends Object declared in class HamiltonianCycleAlgorithmBase\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Transform from a Set representation to a graph path.\n * @param tour a set containing the edges of the tour\n * @param graph the graph\n * @return a graph path\n */\n", "method_name": "edgeSetToTour", "codes": ["protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){\n    if(tour==null || tour.isEmpty()){\n        throw new IllegalArgumentException(\"Tour is null or empty\");\n    }\n    GraphPath<V,E> graphPath = new DefaultGraphPath<V,E>(graph);\n    for(E edge : tour){\n        if(!graph.containsEdge(edge)){\n            throw new IllegalArgumentException(\"Tour contains an invalid edge\");\n        }\n        graphPath.addEdge(edge);\n    }\n    return graphPath;\n}"], "code_level": "class_runnable", "_id": "636767561a6d9265ec017f7c", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/tour/HamiltonianCycleAlgorithmBase_edgeSetToTour.java"}
{"generate_results": [{"generate_code": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    for(int i=0;i<bucketsByLabel.size();i++){\n        if(bucketsByLabel.get(i).contains(minLabel)){\n            bucketsByLabel.get(i).remove(minLabel);\n            bucketsByLabel.get(0).addAll(bucketsByLabel.get(i));\n            labels.set(i,0);\n        }\n    }\n    bucketsByLabel.get(0).clear();\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0\n\tat org.jgrapht.alg.cycle.WeakChordalityInspector_reload.main(WeakChordalityInspector_reload.java:43)\n", "is_pass": false}], "docstring": "/** \n * Moves all vertices from the bucket with label  {@code minLabel} to the bucket with label 0.Clears the bucket with label  {@code minLabel}. Updates the labeling accordingly.\n * @param bucketsByLabel the buckets vertices are stored in\n * @param labels the labels of the vertices\n * @param minLabel the minimum value of the non-empty bucket\n */\n", "method_name": "reload", "codes": ["private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    for(int i=0;i<bucketsByLabel.size();i++){\n        if(bucketsByLabel.get(i).contains(minLabel)){\n            bucketsByLabel.get(i).remove(minLabel);\n            bucketsByLabel.get(0).addAll(bucketsByLabel.get(i));\n            labels.set(i,0);\n        }\n    }\n    bucketsByLabel.get(0).clear();\n}"], "code_level": "self_contained", "_id": "636767641a6d9265ec018190", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/cycle/WeakChordalityInspector_reload.class"}
{"generate_results": [{"generate_code": "@Override protected V provideNextVertex(){\n    if(path.isEmpty()){\n        return null;\n    }\n    V currentVertex = path.get(0);\n    path.remove(0);\n    return currentVertex;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat org.jgrapht.graph.AbstractGraph.assertVertexExist(AbstractGraph.java:129)\n\tat org.jgrapht.graph.AbstractBaseGraph.outgoingEdgesOf(AbstractBaseGraph.java:484)\n\tat org.jgrapht.traverse.CrossComponentIterator.selectOutgoingEdges(CrossComponentIterator.java:320)\n\tat org.jgrapht.traverse.CrossComponentIterator.addUnseenChildrenOf(CrossComponentIterator.java:325)\n\tat org.jgrapht.traverse.CrossComponentIterator.next(CrossComponentIterator.java:199)\n\tat org.jgrapht.alg.cycle.CycleDetector.execute(CycleDetector.java:148)\n\tat org.jgrapht.alg.cycle.CycleDetector.detectCyclesContainingVertex(CycleDetector.java:80)\n\tat org.jgrapht.alg.cycle.CycleDetector_provideNextVertex.main(CycleDetector_provideNextVertex.java:35)\n", "is_pass": false}], "docstring": "/** \n * {@inheritDoc}\n */\n", "method_name": "provideNextVertex", "codes": ["@Override protected V provideNextVertex(){\n    if(path.isEmpty()){\n        return null;\n    }\n    V currentVertex = path.get(0);\n    path.remove(0);\n    return currentVertex;\n}"], "code_level": "class_runnable", "_id": "636767611a6d9265ec018112", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/cycle/CycleDetector_provideNextVertex.class"}
{"generate_results": [{"generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n    for(E edge : graph.edgeSet()){\n        if(!isCircle(edge)){\n            List<Pair<Integer,Integer>> separators = new ArrayList<>();\n            for(V vertex : neighborhoodSetOf(graph,edge)){\n                Map<V,Integer> dfsMap = new HashMap<>();\n                List<Pair<V,V>> separator = getSeparator(graph,vertex,dfsMap);\n                separators.add(new Pair<>(dfsMap.get(vertex),separator.size()));\n            }\n            result.add(new Pair<>(separators,edge));\n        }\n    }\n    return result;\n}", "errormessage": "compile error", "error_detail_message": "WeakChordalityInspector.java:225: error: cannot find symbol\n        if(!isCircle(edge)){\n            ^\n  symbol:   method isCircle(E)\n  location: class WeakChordalityInspector<V,E>\n  where E,V are type-variables:\n    E extends Object declared in class WeakChordalityInspector\n    V extends Object declared in class WeakChordalityInspector\nWeakChordalityInspector.java:229: error: incompatible types: Map<V,Integer> cannot be converted to Map<V,Byte>\n                List<Pair<V,V>> separator = getSeparator(graph,vertex,dfsMap);\n                                                                      ^\n  where V is a type-variable:\n    V extends Object declared in class WeakChordalityInspector\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Computes the global separator list of the  {@code graph}. More precisely, for every edge $e$ in the $G = (V, E)$ computes list of minimal separators $S_e$ in the neighborhood of $e$ and then concatenates these lists. Note: the result may contain duplicates\n * @return the list of minimal separators of every edge $e$ in the inspected graph\n */\n", "method_name": "computeGlobalSeparatorList", "codes": ["private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n    for(E edge : graph.edgeSet()){\n        if(!isCircle(edge)){\n            List<Pair<Integer,Integer>> separators = new ArrayList<>();\n            for(V vertex : neighborhoodSetOf(graph,edge)){\n                Map<V,Integer> dfsMap = new HashMap<>();\n                List<Pair<V,V>> separator = getSeparator(graph,vertex,dfsMap);\n                separators.add(new Pair<>(dfsMap.get(vertex),separator.size()));\n            }\n            result.add(new Pair<>(separators,edge));\n        }\n    }\n    return result;\n}"], "code_level": "class_runnable", "_id": "636767601a6d9265ec0180e2", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/alg/cycle/WeakChordalityInspector_computeGlobalSeparatorList.java"}
{"generate_results": [{"generate_code": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSum = new ArrayList<>();\n    long sum = 0;\n    for(int i=0; i<bounds.size(); i++){\n        sum += bounds.get(i);\n        suffixSum.add(sum);\n    }\n    return new Pair<>(suffixSum, sum);\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:147: error: incompatible types: long cannot be converted to Integer\n        suffixSum.add(sum);\n                      ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Computes a suffix sum of the  {@code bounds}. Returns computed suffix sum and the sum of all elements in the  {@code bounds list}.\n * @param bounds list of integers.\n * @return computed pair of suffix sum list and a sum of all elements.\n */\n", "method_name": "computeSuffixSum", "codes": ["private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSum = new ArrayList<>();\n    long sum = 0;\n    for(int i=0; i<bounds.size(); i++){\n        sum += bounds.get(i);\n        suffixSum.add(sum);\n    }\n    return new Pair<>(suffixSum, sum);\n}"], "code_level": "project_runnable", "_id": "636767461a6d9265ec017d0e", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeSuffixSum.java"}
{"generate_results": [{"generate_code": "private List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<>();\n    for(K key : keys){\n        int lowerBound = lowerBounds.stream().mapToInt(val -> val).max().orElse(Integer.MIN_VALUE);\n        lowerBounds.add(lowerBound);\n    }\n    return lowerBounds;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: bound must be positive\n\tat java.base/java.util.Random.nextInt(Random.java:322)\n\tat org.jgrapht.generate.netgen.Distributor.getDistribution(Distributor.java:197)\n\tat org.jgrapht.generate.netgen.Distributor_computeLowerBounds.main(Distributor_computeLowerBounds.java:25)\n", "is_pass": false}], "docstring": "/** \n * Finds a maximum lower bound for every key.\n * @param keys list of keys.\n * @return the computed key lower bounds.\n */\n", "method_name": "computeLowerBounds", "codes": ["private List<Integer> computeLowerBounds(List<K> keys){\n    List<Integer> lowerBounds = new ArrayList<>();\n    for(K key : keys){\n        int lowerBound = lowerBounds.stream().mapToInt(val -> val).max().orElse(Integer.MIN_VALUE);\n        lowerBounds.add(lowerBound);\n    }\n    return lowerBounds;\n}"], "code_level": "class_runnable", "_id": "636767431a6d9265ec017c88", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/generate/netgen/Distributor_computeLowerBounds.class"}
{"generate_results": [{"generate_code": "private List<Integer> computeUpperBounds(List<K> keys){\n    List<Integer> upperBounds = new ArrayList<>();\n    for(Function<K,Integer> bound : this.upperBounds){\n        upperBounds.add(bound.apply(keys));\n    }\n    return upperBounds;\n}", "errormessage": "compile error", "error_detail_message": "Distributor.java:125: error: incompatible types: List<K> cannot be converted to K\n        upperBounds.add(bound.apply(keys));\n                                    ^\n  where K is a type-variable:\n    K extends Object declared in class Distributor\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n", "is_pass": false}], "docstring": "/** \n * Finds a minimum lower bound for every key.\n * @param keys a list of keys.\n * @return the computed key upper bound.\n */\n", "method_name": "computeUpperBounds", "codes": ["private List<Integer> computeUpperBounds(List<K> keys){\n    List<Integer> upperBounds = new ArrayList<>();\n    for(Function<K,Integer> bound : this.upperBounds){\n        upperBounds.add(bound.apply(keys));\n    }\n    return upperBounds;\n}"], "code_level": "class_runnable", "_id": "636767581a6d9265ec017fb4", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/src/main/java/org/jgrapht/generate/netgen/Distributor_computeUpperBounds.java"}
{"generate_results": [{"generate_code": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    return graph.vertexSet().containsAll(vertices);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Check whether the subgraph of <code>graph</code> induced by the given <code>vertices</code> is complete, i.e. a clique.\n * @param graph the graph.\n * @param vertices the vertices to induce the subgraph from.\n * @return true if the induced subgraph is a clique.\n */\n", "method_name": "isClique", "codes": ["private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    return graph.vertexSet().containsAll(vertices);\n}"], "code_level": "class_runnable", "_id": "6367675f1a6d9265ec0180cf", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/alg/clique/CliqueMinimalSeparatorDecomposition_isClique.class"}
{"generate_results": [{"generate_code": "public int nonZeros(int row){\n    if(row < 0 || row >= rowOffsets.length){\n        throw new IllegalArgumentException(\"Invalid row index\");\n    }\n    return rowOffsets[row + 1] - rowOffsets[row];\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Get the number of non-zero entries of a row.\n * @param row the row\n * @return the number of non-zero entries of a row\n */\n", "method_name": "nonZeros", "codes": ["public int nonZeros(int row){\n    if(row < 0 || row >= rowOffsets.length){\n        throw new IllegalArgumentException(\"Invalid row index\");\n    }\n    return rowOffsets[row + 1] - rowOffsets[row];\n}"], "code_level": "class_runnable", "_id": "636767511a6d9265ec017eb0", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-opt/target/classes/org/jgrapht/opt/graph/sparse/specifics/CSRBooleanMatrix_nonZeros.class"}
{"generate_results": [{"generate_code": "private String unescapeId(String input){\n    return unescapeHtmlString(input);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Unescape a string DOT identifier.\n * @param input the input\n * @return the unescaped output\n */\n", "method_name": "unescapeId", "codes": ["private String unescapeId(String input){\n    return unescapeHtmlString(input);\n}"], "code_level": "class_runnable", "_id": "636767461a6d9265ec017d17", "project_name": "jgrapht-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jgrapht/jgrapht-core/target/classes/org/jgrapht/DOTEventDrivenImporter_unescapeId.class"}
{"generate_results": [{"generate_code": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    if(i>=HEX_TABLE.length){\n        throw new IllegalArgumentException(\"Invalid index: \"+i);\n    }\n    int j=HEX_TABLE[i];\n    if(j<0){\n        throw new IllegalArgumentException(\"Invalid index: \"+i);\n    }\n    int k=j*2;\n    if(bb.position()+k>bb.limit()){\n        throw new IllegalArgumentException(\"Invalid index: \"+i);\n    }\n    for(int l=0;l<2;l++){\n        int m=decodeHex(s.charAt(k+l),k+l);\n        if(m<0){\n            throw new IllegalArgumentException(\"Invalid hexadecimal character: \"+s.charAt(k+l));\n        }\n        sb.append((char)m);\n    }\n    return k+2;\n}", "errormessage": "compile error", "error_detail_message": "UriComponent.java:812: error: cannot find symbol\n        int m=decodeHex(s.charAt(k+l),k+l);\n                        ^\n  symbol:   variable s\n  location: class UriComponent\nUriComponent.java:814: error: cannot find symbol\n            throw new IllegalArgumentException(\"Invalid hexadecimal character: \"+s.charAt(k+l));\n                                                                                 ^\n  symbol:   variable s\n  location: class UriComponent\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Decodes octets to characters using the UTF-8 decoding and appends the characters to a StringBuffer.\n * @return the index to the next unchecked character in the string to decode\n */\n", "method_name": "decodeOctets", "codes": ["private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    if(i>=HEX_TABLE.length){\n        throw new IllegalArgumentException(\"Invalid index: \"+i);\n    }\n    int j=HEX_TABLE[i];\n    if(j<0){\n        throw new IllegalArgumentException(\"Invalid index: \"+i);\n    }\n    int k=j*2;\n    if(bb.position()+k>bb.limit()){\n        throw new IllegalArgumentException(\"Invalid index: \"+i);\n    }\n    for(int l=0;l<2;l++){\n        int m=decodeHex(s.charAt(k+l),k+l);\n        if(m<0){\n            throw new IllegalArgumentException(\"Invalid hexadecimal character: \"+s.charAt(k+l));\n        }\n        sb.append((char)m);\n    }\n    return k+2;\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017457", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/uri/UriComponent_decodeOctets.java"}
{"generate_results": [{"generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    List<PathSegmentImpl> segments = new ArrayList<>();\n    String path = u.getPath();\n    if(decode){\n        String[] pathSegments = path.split(\"/\");\n        for(String segment : pathSegments){\n            if(!segment.isEmpty()){\n                segments.add(new PathSegmentImpl(segment,true));\n            }\n        }\n    }else{\n        segments.add(new PathSegmentImpl(path,false));\n    }\n    return segments;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Decode the path component of a URI as path segments.\n * @param u the URI. If the path component is an absolute path componentthen the leading '/' is ignored and is not considered a delimiator of a path segment.\n * @param decode true if the path segments of the path componentshould be in decoded form.\n * @return the list of path segments.\n */\n", "method_name": "decodePath", "codes": ["public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    List<PathSegmentImpl> segments = new ArrayList<>();\n    String path = u.getPath();\n    if(decode){\n        String[] pathSegments = path.split(\"/\");\n        for(String segment : pathSegments){\n            if(!segment.isEmpty()){\n                segments.add(new PathSegmentImpl(segment,true));\n            }\n        }\n    }else{\n        segments.add(new PathSegmentImpl(path,false));\n    }\n    return segments;\n}"], "code_level": "slib_runnable", "_id": "6367667f1a6d9265ec01745d", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_decodePath.class"}
{"generate_results": [{"generate_code": "public final MatchResult match(CharSequence uri){\n    if(uri == null){\n        throw new NullPointerException(\"uri is marked non-null but is null\");\n    }\n    if(regexPattern == null){\n        regexPattern = compile(uri.toString());\n    }\n    if(regexPattern == null){\n        return null;\n    }\n    Matcher matcher = regexPattern.matcher(uri);\n    if(matcher.find()){\n        return new GroupIndexMatchResult(matcher);\n    }\n    return null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Match a URI against the pattern.\n * @param uri the uri to match against the template.\n * @return the match result, otherwise null if no match occurs.\n */\n", "method_name": "match", "codes": ["public final MatchResult match(CharSequence uri){\n    if(uri == null){\n        throw new NullPointerException(\"uri is marked non-null but is null\");\n    }\n    if(regexPattern == null){\n        regexPattern = compile(uri.toString());\n    }\n    if(regexPattern == null){\n        return null;\n    }\n    Matcher matcher = regexPattern.matcher(uri);\n    if(matcher.find()){\n        return new GroupIndexMatchResult(matcher);\n    }\n    return null;\n}"], "code_level": "project_runnable", "_id": "636766861a6d9265ec01755a", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriPattern_match.class"}
{"generate_results": [{"generate_code": "public final boolean isTemplateVariablePresent(String name){\n    return templateVariables.contains(name);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Ascertain if a template variable is a member of this template.\n * @param name name The template variable.\n * @return true if the template variable is a member of the template, otherwisefalse.\n */\n", "method_name": "isTemplateVariablePresent", "codes": ["public final boolean isTemplateVariablePresent(String name){\n    return templateVariables.contains(name);\n}"], "code_level": "class_runnable", "_id": "636766861a6d9265ec017553", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriTemplate_isTemplateVariablePresent.class"}
{"generate_results": [{"generate_code": "public static String encodeTemplateNames(String s){\n    if(s == null){\n        return null;\n    }\n    return s.replace(\"{\", \"{\").replace(\"}\", \"}\");\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Encodes a string with template parameters names present, specifically the characters '{' and '}' will be percent-encoded.\n * @param s the string with zero or more template parameters names\n * @return the string with encoded template parameters names.\n */\n", "method_name": "encodeTemplateNames", "codes": ["public static String encodeTemplateNames(String s){\n    if(s == null){\n        return null;\n    }\n    return s.replace(\"{\", \"{\").replace(\"}\", \"}\");\n}"], "code_level": "self_contained", "_id": "636766801a6d9265ec017487", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/uri/UriComponent_encodeTemplateNames.class"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    try{\n        File f = new File(dir);\n        if(f.exists()){\n            File[] files = f.listFiles(new FilenameFilter(){\n                public boolean accept(File dir,String name){\n                    if(name.endsWith(\".jar\")){\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            if(files != null){\n                for(int i = 0; i < files.length; i++){\n                    cpV.add(files[i].toURI().toURL());\n                }\n            }\n        }\n    }catch(MalformedURLException e){\n        logger.error(\"Malformed URL\",e);\n    }catch(IOException e){\n        logger.error(\"IOException\",e);\n    }\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nException in thread \"main\" java.lang.NoSuchMethodError: org.atmosphere.util.IntrospectionUtils$1: method 'void <init>()' not found\n\tat org.atmosphere.util.IntrospectionUtils.addToClassPath(IntrospectionUtils.java:401)\n\tat org.atmosphere.util.IntrospectionUtils_addToClassPath.main(IntrospectionUtils_addToClassPath.java:15)\n", "is_pass": false}], "docstring": "/** \n * Add all the jar files in a dir to the classpath, represented as a Vector of URLs.\n */\n", "method_name": "addToClassPath", "codes": ["@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    try{\n        File f = new File(dir);\n        if(f.exists()){\n            File[] files = f.listFiles(new FilenameFilter(){\n                public boolean accept(File dir,String name){\n                    if(name.endsWith(\".jar\")){\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            if(files != null){\n                for(int i = 0; i < files.length; i++){\n                    cpV.add(files[i].toURI().toURL());\n                }\n            }\n        }\n    }catch(MalformedURLException e){\n        logger.error(\"Malformed URL\",e);\n    }catch(IOException e){\n        logger.error(\"IOException\",e);\n    }\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec01745c", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/IntrospectionUtils_addToClassPath.class"}
{"generate_results": [{"generate_code": "public static String capitalize(String name){\n    if(name == null || name.length() == 0){\n        return name;\n    }\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Reverse of Introspector.decapitalize\n */\n", "method_name": "capitalize", "codes": ["public static String capitalize(String name){\n    if(name == null || name.length() == 0){\n        return name;\n    }\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174bf", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/IntrospectionUtils_capitalize.class"}
{"generate_results": [{"generate_code": "public static String unescapeJava(String str) throws Exception {\n    if (str == null) {\n        return null;\n    }\n    StringWriter writer = new StringWriter();\n    unescapeJava(writer, str);\n    return writer.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code> into a newline character, unless the <code>'\\'</code> is preceded by another <code>'\\'</code>.</p>\n * @param str the <code>String</code> to unescape, may be null\n * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n */\n", "method_name": "unescapeJava", "codes": ["public static String unescapeJava(String str) throws Exception {\n    if (str == null) {\n        return null;\n    }\n    StringWriter writer = new StringWriter();\n    unescapeJava(writer, str);\n    return writer.toString();\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec017401", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/StringEscapeUtils_unescapeJava.class"}
{"generate_results": [{"generate_code": "private static char decodeHexNibble(final char c){\n    if(c >= '0' && c <= '9'){\n        return (char)(c - '0');\n    }\n    if(c >= 'A' && c <= 'F'){\n        return (char)(c - 'A' + 10);\n    }\n    if(c >= 'a' && c <= 'f'){\n        return (char)(c - 'a' + 10);\n    }\n    throw new IllegalArgumentException(\"Invalid hexadecimal character: \" + c);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid hexadecimal character: &\n\tat org.atmosphere.util.QueryStringDecoder.decodeHexNibble(QueryStringDecoder.java:418)\n\tat org.atmosphere.util.QueryStringDecoder_decodeHexNibble.main(QueryStringDecoder_decodeHexNibble.java:8)\n", "is_pass": false}], "docstring": "/** \n * Helper to decode half of a hexadecimal number from a string.\n * @param c The ASCII character of the hexadecimal number to decode.Must be in the range  {@code [0-9a-fA-F]}.\n * @return The hexadecimal value represented in the ASCII charactergiven, or  {@link Character#MAX_VALUE} if the character is invalid.\n */\n", "method_name": "decodeHexNibble", "codes": ["private static char decodeHexNibble(final char c){\n    if(c >= '0' && c <= '9'){\n        return (char)(c - '0');\n    }\n    if(c >= 'A' && c <= 'F'){\n        return (char)(c - 'A' + 10);\n    }\n    if(c >= 'a' && c <= 'f'){\n        return (char)(c - 'a' + 10);\n    }\n    throw new IllegalArgumentException(\"Invalid hexadecimal character: \" + c);\n}"], "code_level": "slib_runnable", "_id": "636766851a6d9265ec01751b", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/QueryStringDecoder_decodeHexNibble.class"}
{"generate_results": [{"generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType parameterizedType = (ParameterizedType)genericType;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Map<TypeVariable<?>,Type> typeVariableMap = getTypeVariableMap(targetType);\n        if(typeVariableMap == null){\n            typeVariableMap = buildTypeVariableMap(actualTypeArguments, new HashMap<TypeVariable<?>,Type>());\n        }\n        Class<?>[] resolvedArguments = new Class[actualTypeArguments.length];\n        for(int i = 0; i < actualTypeArguments.length; i++){\n            resolvedArguments[i] = resolveArgument(actualTypeArguments[i], targetType);\n        }\n        return resolvedArguments;\n    }\n    return null;\n}", "errormessage": "compile error", "error_detail_message": "TypeResolver.java:144: error: incompatible types: void cannot be converted to Map<TypeVariable<?>,Type>\n            typeVariableMap = buildTypeVariableMap(actualTypeArguments, new HashMap<TypeVariable<?>,Type>());\n                                                  ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Resolves the arguments for the  {@code genericType} using the type variable information for the{@code targetType}. Returns  {@code null} if {@code genericType} is not parameterized or ifarguments cannot be resolved.\n */\n", "method_name": "resolveArguments", "codes": ["public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType parameterizedType = (ParameterizedType)genericType;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Map<TypeVariable<?>,Type> typeVariableMap = getTypeVariableMap(targetType);\n        if(typeVariableMap == null){\n            typeVariableMap = buildTypeVariableMap(actualTypeArguments, new HashMap<TypeVariable<?>,Type>());\n        }\n        Class<?>[] resolvedArguments = new Class[actualTypeArguments.length];\n        for(int i = 0; i < actualTypeArguments.length; i++){\n            resolvedArguments[i] = resolveArgument(actualTypeArguments[i], targetType);\n        }\n        return resolvedArguments;\n    }\n    return null;\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174b6", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver_resolveArguments.java"}
{"generate_results": [{"generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n    if(typeVariable.getBounds().length==0)\n        return Unknown.class;\n    else if(typeVariable.getBounds().length==1){\n        Type bound=typeVariable.getBounds()[0];\n        if(bound instanceof Class){\n            if(cacheEnabled){\n                if(typeVariableCache.containsKey(bound.getClass())){\n                    return typeVariableCache.get(bound.getClass()).get();\n                }\n            }\n            return bound;\n        }\n        else if(bound instanceof ParameterizedType){\n            if(cacheEnabled){\n                if(typeVariableCache.containsKey(bound.getClass())){\n                    return typeVariableCache.get(bound.getClass()).get();\n                }\n            }\n            return bound;\n        }\n        else if(bound instanceof TypeVariable){\n            if(cacheEnabled){\n                if(typeVariableCache.containsKey(bound.getClass())){\n                    return typeVariableCache.get(bound.getClass()).get();\n                }\n            }\n            return bound;\n        }\n    }\n    else{\n        Type[] bounds=new Type[typeVariable.getBounds().length];\n        for(int i=0;i<typeVariable.getBounds().length;i++){\n            bounds[i]=resolveBound((TypeVariable<?>)typeVariable.getBounds()[i]);\n        }\n        return bounds;\n    }\n    return Unknown.class;\n}", "errormessage": "compile error", "error_detail_message": "TypeResolver.java:308: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type\n                    return typeVariableCache.get(bound.getClass()).get();\n                                                                      ^\nTypeResolver.java:316: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type\n                    return typeVariableCache.get(bound.getClass()).get();\n                                                                      ^\nTypeResolver.java:324: error: incompatible types: Map<TypeVariable<?>,Type> cannot be converted to Type\n                    return typeVariableCache.get(bound.getClass()).get();\n                                                                      ^\nTypeResolver.java:335: error: incompatible types: Type[] cannot be converted to Type\n        return bounds;\n               ^\n4 errors\n", "is_pass": false}], "docstring": "/** \n * Resolves the first bound for the  {@code typeVariable}, returning  {@code Unknown.class} if nonecan be resolved.\n */\n", "method_name": "resolveBound", "codes": ["public static Type resolveBound(TypeVariable<?> typeVariable){\n    if(typeVariable.getBounds().length==0)\n        return Unknown.class;\n    else if(typeVariable.getBounds().length==1){\n        Type bound=typeVariable.getBounds()[0];\n        if(bound instanceof Class){\n            if(cacheEnabled){\n                if(typeVariableCache.containsKey(bound.getClass())){\n                    return typeVariableCache.get(bound.getClass()).get();\n                }\n            }\n            return bound;\n        }\n        else if(bound instanceof ParameterizedType){\n            if(cacheEnabled){\n                if(typeVariableCache.containsKey(bound.getClass())){\n                    return typeVariableCache.get(bound.getClass()).get();\n                }\n            }\n            return bound;\n        }\n        else if(bound instanceof TypeVariable){\n            if(cacheEnabled){\n                if(typeVariableCache.containsKey(bound.getClass())){\n                    return typeVariableCache.get(bound.getClass()).get();\n                }\n            }\n            return bound;\n        }\n    }\n    else{\n        Type[] bounds=new Type[typeVariable.getBounds().length];\n        for(int i=0;i<typeVariable.getBounds().length;i++){\n            bounds[i]=resolveBound((TypeVariable<?>)typeVariable.getBounds()[i]);\n        }\n        return bounds;\n    }\n    return Unknown.class;\n}"], "code_level": "slib_runnable", "_id": "6367667d1a6d9265ec01741d", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/config/managed/TypeResolver_resolveBound.java"}
{"generate_results": [{"generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequest(request);\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereRequestImpl.java:1404: error: AtmosphereRequest is abstract; cannot be instantiated\n    return new AtmosphereRequest(request);\n           ^\nNote: AtmosphereRequestImpl.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: AtmosphereRequestImpl.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Wrap an  {@link HttpServletRequest}.\n * @param request {@link HttpServletRequest}\n * @return an {@link AtmosphereRequest}\n */\n", "method_name": "wrap", "codes": ["public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequest(request);\n}"], "code_level": "class_runnable", "_id": "636766821a6d9265ec0174d2", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl_wrap.java"}
{"generate_results": [{"generate_code": "public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    //...\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereFramework.java:2053: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    public AsyncSupport getCometSupport() {\n                        ^\nAtmosphereFramework.java:748: error: missing return statement\n}\n^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:163: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                            params[0] = new Integer(value);\n                                        ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:171: warning: [removal] Long(String) in Long has been deprecated and marked for removal\n                            params[0] = new Long(value);\n                                        ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:179: warning: [removal] Boolean(String) in Boolean has been deprecated and marked for removal\n                        params[0] = new Boolean(value);\n                                    ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:826: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                result = new Integer(object);\n                         ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:832: warning: [removal] Boolean(String) in Boolean has been deprecated and marked for removal\n            result = new Boolean(object);\n                     ^\nNote: AtmosphereFramework.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n6 warnings\n", "is_pass": false}], "docstring": "/** \n * Remove an  {@link AtmosphereHandler}.\n * @param mapping the mapping used when invoking {@link #addAtmosphereHandler(String,AtmosphereHandler)};\n * @return true if removed\n */\n", "method_name": "removeAtmosphereHandler", "codes": ["public AtmosphereFramework removeAtmosphereHandler(String mapping){\n    //...\n}"], "code_level": "class_runnable", "_id": "6367667f1a6d9265ec017458", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework_removeAtmosphereHandler.java"}
{"generate_results": [{"generate_code": "protected Object filter(Object msg){\n    if(msg == null){\n        return null;\n    }\n    if(msg instanceof CacheMessage){\n        return ((CacheMessage)msg).getAction();\n    }\n    return msg;\n}", "errormessage": "compile error", "error_detail_message": "DefaultBroadcaster.java:1237: error: cannot find symbol\n        return ((CacheMessage)msg).getAction();\n                                  ^\n  symbol:   method getAction()\n  location: class CacheMessage\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java:2066: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n    public AsyncSupport getCometSupport() {\n                        ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:163: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                            params[0] = new Integer(value);\n                                        ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:171: warning: [removal] Long(String) in Long has been deprecated and marked for removal\n                            params[0] = new Long(value);\n                                        ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:179: warning: [removal] Boolean(String) in Boolean has been deprecated and marked for removal\n                        params[0] = new Boolean(value);\n                                    ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:826: warning: [removal] Integer(String) in Integer has been deprecated and marked for removal\n                result = new Integer(object);\n                         ^\n/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java:832: warning: [removal] Boolean(String) in Boolean has been deprecated and marked for removal\n            result = new Boolean(object);\n                     ^\nNote: /home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: Some input files use unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n6 warnings\n", "is_pass": false}], "docstring": "/** \n * Invoke the  {@link BroadcastFilter}\n * @param msg\n * @return\n */\n", "method_name": "filter", "codes": ["protected Object filter(Object msg){\n    if(msg == null){\n        return null;\n    }\n    if(msg instanceof CacheMessage){\n        return ((CacheMessage)msg).getAction();\n    }\n    return msg;\n}"], "code_level": "project_runnable", "_id": "636766821a6d9265ec0174b3", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster_filter.java"}
{"generate_results": [{"generate_code": "private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    for(AtmosphereInterceptor interceptor : interceptorList){\n        if(interceptor.getClass().equals(c)){\n            return true;\n        }\n    }\n    return false;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * <p> Checks in the specified list if there is at least one instance of the given {@link AtmosphereInterceptor interceptor} implementation class.</p>\n * @param interceptorList the interceptors\n * @param c               the interceptor class\n * @return {@code false} if an instance of the class already exists in the list, {@code true} otherwise\n */\n", "method_name": "checkDuplicate", "codes": ["private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){\n    for(AtmosphereInterceptor interceptor : interceptorList){\n        if(interceptor.getClass().equals(c)){\n            return true;\n        }\n    }\n    return false;\n}"], "code_level": "project_runnable", "_id": "636766811a6d9265ec017499", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereFramework_checkDuplicate.class"}
{"generate_results": [{"generate_code": "public boolean hasBytes(){\n    if(dataBytes == null){\n        return false;\n    }else{\n        return true;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * True is the body is a byte array\n * @return True is the body is a byte array\n */\n", "method_name": "hasBytes", "codes": ["public boolean hasBytes(){\n    if(dataBytes == null){\n        return false;\n    }else{\n        return true;\n    }\n}"], "code_level": "class_runnable", "_id": "6367667c1a6d9265ec0173f7", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereRequestImpl_hasBytes.class"}
{"generate_results": [{"generate_code": "public static Meteor lookup(HttpServletRequest r){\n    //TODO: Implement this method\n    return null;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * Retrieve an instance of  {@link Meteor} based on the {@link HttpServletRequest}.\n * @param r {@link HttpServletRequest}\n * @return a {@link Meteor} or null if not found\n */\n", "method_name": "lookup", "codes": ["public static Meteor lookup(HttpServletRequest r){\n    //TODO: Implement this method\n    return null;\n}"], "code_level": "class_runnable", "_id": "6367667d1a6d9265ec0173ff", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/Meteor_lookup.class"}
{"generate_results": [{"generate_code": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n  if(e==null) throw new IllegalArgumentException(\"EventListener cannot be null\");\n  listeners.add(e);\n  return this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add a  {@link AtmosphereResourceEventListener}.\n * @param e an instance of AtmosphereResourceEventListener\n */\n", "method_name": "addEventListener", "codes": ["@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n  if(e==null) throw new IllegalArgumentException(\"EventListener cannot be null\");\n  listeners.add(e);\n  return this;\n}"], "code_level": "project_runnable", "_id": "6367667c1a6d9265ec0173fb", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/cpr/AtmosphereResourceImpl_addEventListener.class"}
{"generate_results": [{"generate_code": "public InputStream next() throws IOException {\n    if (!stack.isEmpty()) {\n        current = stack.pop();\n        return current;\n    }\n    return null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return the next  {@link java.io.File} object or {@code null} if no more files areavailable.\n */\n", "method_name": "next", "codes": ["public InputStream next() throws IOException {\n    if (!stack.isEmpty()) {\n        current = stack.pop();\n        return current;\n    }\n    return null;\n}"], "code_level": "class_runnable", "_id": "636766811a6d9265ec017496", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/InputStreamIterator_next.class"}
{"generate_results": [{"generate_code": "private static File[] classPath(){\n    return sun.misc.Launcher.loadClassPath().getFiles();\n}", "errormessage": "compile error", "error_detail_message": "ClassFileIterator.java:195: error: cannot find symbol\n    return sun.misc.Launcher.loadClassPath().getFiles();\n                   ^\n  symbol:   class Launcher\n  location: package sun.misc\n1 error\n", "is_pass": false}], "docstring": "/** \n * Returns the class path of the current JVM instance as an array of  {@link File} objects.\n */\n", "method_name": "classPath", "codes": ["private static File[] classPath(){\n    return sun.misc.Launcher.loadClassPath().getFiles();\n}"], "code_level": "slib_runnable", "_id": "636766821a6d9265ec0174c9", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator_classPath.java"}
{"generate_results": [{"generate_code": "public void readFrom(final InputStream in) throws IOException {\n    if (buffer == null) {\n        buffer = new byte[1024];\n    }\n    int bytesRead = 0;\n    while (bytesRead < size && pointer < size) {\n        int n = in.read(buffer, pointer, size - pointer);\n        if (n < 0) {\n            throw new EOFException(\"Unexpected EOF\");\n        }\n        bytesRead += n;\n        pointer += n;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Clear and fill the buffer of this  {@code ClassFileBuffer} with thesupplied byte stream. The read pointer is reset to the start of the byte array.\n */\n", "method_name": "readFrom", "codes": ["public void readFrom(final InputStream in) throws IOException {\n    if (buffer == null) {\n        buffer = new byte[1024];\n    }\n    int bytesRead = 0;\n    while (bytesRead < size && pointer < size) {\n        int n = in.read(buffer, pointer, size - pointer);\n        if (n < 0) {\n            throw new EOFException(\"Unexpected EOF\");\n        }\n        bytesRead += n;\n        pointer += n;\n    }\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017482", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/ClassFileBuffer_readFrom.class"}
{"generate_results": [{"generate_code": "private void addReverse(final InputStream[] files){\n    if(files != null){\n        for(final InputStream file : files){\n            if(file != null){\n                stack.addFirst(file);\n            }\n        }\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final InputStream[] files){\n    if(files != null){\n        for(final InputStream file : files){\n            if(file != null){\n                stack.addFirst(file);\n            }\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636766801a6d9265ec017477", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/util/annotation/InputStreamIterator_addReverse.class"}
{"generate_results": [{"generate_code": "private void addReverse(final File[] files){\n    stack = new LinkedList<>();\n    for(int i = files.length - 1; i >= 0; i--){\n        stack.push(files[i]);\n    }\n}", "errormessage": "compile error", "error_detail_message": "FileIterator.java:131: error: cannot assign a value to final variable stack\n    stack = new LinkedList<>();\n    ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Add the specified files in reverse order.\n */\n", "method_name": "addReverse", "codes": ["private void addReverse(final File[] files){\n    stack = new LinkedList<>();\n    for(int i = files.length - 1; i >= 0; i--){\n        stack.push(files[i]);\n    }\n}"], "code_level": "class_runnable", "_id": "636766831a6d9265ec0174eb", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator_addReverse.java"}
{"generate_results": [{"generate_code": "public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == -1){\n        return -1;\n    }else{\n        return System.currentTimeMillis();\n    }\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * The last time, in milliseconds, a write operation occurred.\n * @return this\n */\n", "method_name": "lastWriteTimeStampInMilliseconds", "codes": ["public long lastWriteTimeStampInMilliseconds(){\n    if(lastWrite == -1){\n        return -1;\n    }else{\n        return System.currentTimeMillis();\n    }\n}"], "code_level": "class_runnable", "_id": "6367667e1a6d9265ec01743a", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/target/classes/org/atmosphere/websocket/WebSocket_lastWriteTimeStampInMilliseconds.class"}
{"generate_results": [{"generate_code": "@Override public Action inspect(AtmosphereResource r){\n  if(r.getTransport() == UNDEFINED){\n    r.suspend();\n  }\n  return null;\n}", "errormessage": "compile error", "error_detail_message": "AtmosphereResourceLifecycleInterceptor.java:113: error: cannot find symbol\n  if(r.getTransport() == UNDEFINED){\n      ^\n  symbol:   method getTransport()\n  location: variable r of type AtmosphereResource\n1 error\n", "is_pass": false}], "docstring": "/** \n * Automatically suspend the  {@link AtmosphereResource} based on {@link AtmosphereResource.TRANSPORT} value.\n * @param r a {@link AtmosphereResource}\n * @return {@link Action#CONTINUE}\n */\n", "method_name": "inspect", "codes": ["@Override public Action inspect(AtmosphereResource r){\n  if(r.getTransport() == UNDEFINED){\n    r.suspend();\n  }\n  return null;\n}"], "code_level": "project_runnable", "_id": "636766851a6d9265ec017515", "project_name": "atmosphere-atmosphere-2.7.x", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/atmosphere/modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor_inspect.java"}
{"generate_results": [{"generate_code": "public static String[] trimArrayElements(String[] array){\n    String[] trimmedArray = new String[array.length];\n    for(int i = 0; i < array.length; i++){\n        trimmedArray[i] = trimWhitespace(array[i]);\n    }\n    return trimmedArray;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read the array length because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.trimArrayElements(Strings.java:827)\n\tat io.jsonwebtoken.lang.Strings_trimArrayElements.main(Strings_trimArrayElements.java:12)\n", "is_pass": false}], "docstring": "/** \n * Trim the elements of the given String array, calling <code>String.trim()</code> on each of them.\n * @param array the original String array\n * @return the resulting array (of the same size) with trimmed elements\n */\n", "method_name": "trimArrayElements", "codes": ["public static String[] trimArrayElements(String[] array){\n    String[] trimmedArray = new String[array.length];\n    for(int i = 0; i < array.length; i++){\n        trimmedArray[i] = trimWhitespace(array[i]);\n    }\n    return trimmedArray;\n}"], "code_level": "self_contained", "_id": "6367676d1a6d9265ec018229", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimArrayElements.class"}
{"generate_results": [{"generate_code": "public static int nullSafeHashCode(long[] array){\n    if(array == null){\n        return 0;\n    }\n    int hash = INITIAL_HASH;\n    for(long l : array){\n        hash = hash * MULTIPLIER + (int)l;\n    }\n    return hash;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Return a hash code based on the contents of the specified array. If <code>array</code> is <code>null</code>, this method returns 0.\n * @param array the long array to obtain a hashcode\n * @return the long array's hashcode, which could be 0 if the array is null.\n */\n", "method_name": "nullSafeHashCode", "codes": ["public static int nullSafeHashCode(long[] array){\n    if(array == null){\n        return 0;\n    }\n    int hash = INITIAL_HASH;\n    for(long l : array){\n        hash = hash * MULTIPLIER + (int)l;\n    }\n    return hash;\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181aa", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Objects_nullSafeHashCode.class"}
{"generate_results": [{"generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n    if(str == null || prefix == null){\n        throw new NullPointerException();\n    }\n    return str.toLowerCase().startsWith(prefix.toLowerCase());\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat io.jsonwebtoken.lang.Strings.startsWithIgnoreCase(Strings.java:292)\n\tat io.jsonwebtoken.lang.Strings_startsWithIgnoreCase.main(Strings_startsWithIgnoreCase.java:8)\n", "is_pass": false}], "docstring": "/** \n * Returns  {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @param str the String to check\n * @param prefix the prefix to look for\n * @return {@code true} if the given string starts with the specified case-insensitive prefix, {@code false} otherwise.\n * @see java.lang.String#startsWith\n */\n", "method_name": "startsWithIgnoreCase", "codes": ["public static boolean startsWithIgnoreCase(String str,String prefix){\n    if(str == null || prefix == null){\n        throw new NullPointerException();\n    }\n    return str.toLowerCase().startsWith(prefix.toLowerCase());\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181df", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_startsWithIgnoreCase.class"}
{"generate_results": [{"generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n    if(source==null || candidates==null || source.isEmpty()){\n        throw new IllegalArgumentException(\"source and candidates must not be null and must not be empty\");\n    }\n    for(Object candidate : candidates){\n        if(source.contains(candidate)){\n            return candidate;\n        }\n    }\n    return null;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: source and candidates must not be null and must not be empty\n\tat io.jsonwebtoken.lang.Collections.findFirstMatch(Collections.java:205)\n\tat io.jsonwebtoken.lang.Collections_findFirstMatch.main(Collections_findFirstMatch.java:23)\n", "is_pass": false}], "docstring": "/** \n * Return the first element in '<code>candidates</code>' that is contained in '<code>source</code>'. If no element in '<code>candidates</code>' is present in '<code>source</code>' returns <code>null</code>. Iteration order is {@link Collection} implementation specific.\n * @param source the source Collection\n * @param candidates the candidates to search for\n * @return the first present object, or <code>null</code> if not found\n */\n", "method_name": "findFirstMatch", "codes": ["public static Object findFirstMatch(Collection source,Collection candidates){\n    if(source==null || candidates==null || source.isEmpty()){\n        throw new IllegalArgumentException(\"source and candidates must not be null and must not be empty\");\n    }\n    for(Object candidate : candidates){\n        if(source.contains(candidate)){\n            return candidate;\n        }\n    }\n    return null;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181e2", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Collections_findFirstMatch.class"}
{"generate_results": [{"generate_code": "public static String trimTrailingWhitespace(String str){\n    if(str == null){\n        return null;\n    }\n    int strLen = str.length();\n    if(strLen == 0){\n        return str;\n    }\n    char lastChar = str.charAt(strLen - 1);\n    if(lastChar == ' ' || lastChar == '\\t' || lastChar == '\\n' || lastChar == '\\r'){\n        return str.substring(0, strLen - 1);\n    }\n    return str;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Trim trailing whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimTrailingWhitespace", "codes": ["public static String trimTrailingWhitespace(String str){\n    if(str == null){\n        return null;\n    }\n    int strLen = str.length();\n    if(strLen == 0){\n        return str;\n    }\n    char lastChar = str.charAt(strLen - 1);\n    if(lastChar == ' ' || lastChar == '\\t' || lastChar == '\\n' || lastChar == '\\r'){\n        return str.substring(0, strLen - 1);\n    }\n    return str;\n}"], "code_level": "class_runnable", "_id": "6367676b1a6d9265ec0181ee", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimTrailingWhitespace.class"}
{"generate_results": [{"generate_code": "public static Object quoteIfString(Object obj){\n    if(obj instanceof String){\n        return \"\\\"\" + obj + \"\\\"\";\n    }\n    return obj;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Turn the given Object into a String with single quotes if it is a String; keeping the Object as-is else.\n * @param obj the input Object (e.g. \"myString\")\n * @return the quoted String (e.g. \"'myString'\"),or the input object as-is if not a String\n */\n", "method_name": "quoteIfString", "codes": ["public static Object quoteIfString(Object obj){\n    if(obj instanceof String){\n        return \"\\\"\" + obj + \"\\\"\";\n    }\n    return obj;\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181bf", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_quoteIfString.class"}
{"generate_results": [{"generate_code": "public static String trimLeadingWhitespace(String str){\n    int i = 0;\n    while(i < str.length() && Character.isWhitespace(str.charAt(i))){\n        i++;\n    }\n    return str.substring(i);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.length()\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.trimLeadingWhitespace(Strings.java:223)\n\tat io.jsonwebtoken.lang.Strings_trimLeadingWhitespace.main(Strings_trimLeadingWhitespace.java:17)\n", "is_pass": false}], "docstring": "/** \n * Trim leading whitespace from the given String.\n * @param str the String to check\n * @return the trimmed String\n * @see java.lang.Character#isWhitespace\n */\n", "method_name": "trimLeadingWhitespace", "codes": ["public static String trimLeadingWhitespace(String str){\n    int i = 0;\n    while(i < str.length() && Character.isWhitespace(str.charAt(i))){\n        i++;\n    }\n    return str.substring(i);\n}"], "code_level": "class_runnable", "_id": "6367676a1a6d9265ec0181cd", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimLeadingWhitespace.class"}
{"generate_results": [{"generate_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = new ArrayList<String>();\n    while(enumeration.hasMoreElements()){\n        list.add(enumeration.nextElement());\n    }\n    return list.toArray(new String[0]);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Copy the given Enumeration into a String array. The Enumeration must contain String elements only.\n * @param enumeration the Enumeration to copy\n * @return the String array (<code>null</code> if the passed-inEnumeration was <code>null</code>)\n */\n", "method_name": "toStringArray", "codes": ["public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = new ArrayList<String>();\n    while(enumeration.hasMoreElements()){\n        list.add(enumeration.nextElement());\n    }\n    return list.toArray(new String[0]);\n}"], "code_level": "slib_runnable", "_id": "636767691a6d9265ec0181ae", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_toStringArray.class"}
{"generate_results": [{"generate_code": "public static String deleteAny(String inString,String charsToDelete){\n    if(inString == null || charsToDelete == null){\n        return inString;\n    }\n    StringBuilder result = new StringBuilder();\n    for(char c : inString.toCharArray()){\n        if(!charsToDelete.contains(String.valueOf(c))){\n            result.append(c);\n        }\n    }\n    return result.toString();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Delete any character in a given String.\n * @param inString the original String\n * @param charsToDelete a set of characters to delete.E.g. \"az\\n\" will delete 'a's, 'z's and new lines.\n * @return the resulting String\n */\n", "method_name": "deleteAny", "codes": ["public static String deleteAny(String inString,String charsToDelete){\n    if(inString == null || charsToDelete == null){\n        return inString;\n    }\n    StringBuilder result = new StringBuilder();\n    for(char c : inString.toCharArray()){\n        if(!charsToDelete.contains(String.valueOf(c))){\n            result.append(c);\n        }\n    }\n    return result.toString();\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec01820b", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_deleteAny.class"}
{"generate_results": [{"generate_code": "public static boolean containsInstance(Collection collection,Object element){\n    return collection.contains(element);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Check whether the given Collection contains the given element instance. <p>Enforces the given instance to be present, rather than returning <code>true</code> for an equal element as well.\n * @param collection the Collection to check\n * @param element the element to look for\n * @return <code>true</code> if found, <code>false</code> else\n */\n", "method_name": "containsInstance", "codes": ["public static boolean containsInstance(Collection collection,Object element){\n    return collection.contains(element);\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018223", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Collections_containsInstance.class"}
{"generate_results": [{"generate_code": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(array1));\n    list.addAll(Arrays.asList(array2));\n    return list.toArray(new String[0]);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException\n\tat java.base/java.util.Objects.requireNonNull(Objects.java:209)\n\tat java.base/java.util.Arrays$ArrayList.<init>(Arrays.java:4137)\n\tat java.base/java.util.Arrays.asList(Arrays.java:4122)\n\tat io.jsonwebtoken.lang.Strings.concatenateStringArrays(Strings.java:739)\n\tat io.jsonwebtoken.lang.Strings_concatenateStringArrays.main(Strings_concatenateStringArrays.java:14)\n", "is_pass": false}], "docstring": "/** \n * Concatenate the given String arrays into one, with overlapping array elements included twice. <p>The order of elements in the original arrays is preserved.\n * @param array1 the first array (can be <code>null</code>)\n * @param array2 the second array (can be <code>null</code>)\n * @return the new array (<code>null</code> if both given arrays were <code>null</code>)\n */\n", "method_name": "concatenateStringArrays", "codes": ["public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(array1));\n    list.addAll(Arrays.asList(array2));\n    return list.toArray(new String[0]);\n}"], "code_level": "slib_runnable", "_id": "6367676c1a6d9265ec018204", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_concatenateStringArrays.class"}
{"generate_results": [{"generate_code": "public static String[] addStringToArray(String[] array,String str){\n    String[] newArray = new String[array.length + 1];\n    System.arraycopy(array, 0, newArray, 0, array.length);\n    newArray[newArray.length - 1] = str;\n    return newArray;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Append the given String to the given String array, returning a new array consisting of the input array contents plus the given String.\n * @param array the array to append to (can be <code>null</code>)\n * @param str the String to append\n * @return the new array (never <code>null</code>)\n */\n", "method_name": "addStringToArray", "codes": ["public static String[] addStringToArray(String[] array,String str){\n    String[] newArray = new String[array.length + 1];\n    System.arraycopy(array, 0, newArray, 0, array.length);\n    newArray[newArray.length - 1] = str;\n    return newArray;\n}"], "code_level": "slib_runnable", "_id": "6367676a1a6d9265ec0181d4", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_addStringToArray.class"}
{"generate_results": [{"generate_code": "public static int countOccurrencesOf(String str,String sub){\n    int count = 0;\n    int index = 0;\n    while(index != -1){\n        index = str.indexOf(sub,index);\n        if(index != -1){\n            count++;\n            index += sub.length();\n        }\n    }\n    return count;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot read field \"value\" because \"tgtStr\" is null\n\tat java.base/java.lang.String.indexOf(String.java:2553)\n\tat java.base/java.lang.String.indexOf(String.java:2537)\n\tat io.jsonwebtoken.lang.Strings.countOccurrencesOf(Strings.java:356)\n\tat io.jsonwebtoken.lang.Strings_countOccurrencesOf.main(Strings_countOccurrencesOf.java:11)\n", "is_pass": false}], "docstring": "/** \n * Returns the number of occurrences the substring  {@code sub} appears in string {@code str}.\n * @param str string to search in. Return 0 if this is null.\n * @param sub string to search for. Return 0 if this is null.\n * @return the number of occurrences the substring {@code sub} appears in string {@code str}.\n */\n", "method_name": "countOccurrencesOf", "codes": ["public static int countOccurrencesOf(String str,String sub){\n    int count = 0;\n    int index = 0;\n    while(index != -1){\n        index = str.indexOf(sub,index);\n        if(index != -1){\n            count++;\n            index += sub.length();\n        }\n    }\n    return count;\n}"], "code_level": "self_contained", "_id": "6367676b1a6d9265ec0181dd", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_countOccurrencesOf.class"}
{"generate_results": [{"generate_code": "public static String stripFilenameExtension(String path){\n    if(path == null){\n        return null;\n    }\n    int extPos = path.lastIndexOf(\".\");\n    if(extPos == -1){\n        return path;\n    }\n    return path.substring(0, extPos);\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Strip the filename extension from the given path, e.g. \"mypath/myfile.txt\" -&gt; \"mypath/myfile\".\n * @param path the file path (may be <code>null</code>)\n * @return the path with stripped filename extension,or <code>null</code> if none\n */\n", "method_name": "stripFilenameExtension", "codes": ["public static String stripFilenameExtension(String path){\n    if(path == null){\n        return null;\n    }\n    int extPos = path.lastIndexOf(\".\");\n    if(extPos == -1){\n        return path;\n    }\n    return path.substring(0, extPos);\n}"], "code_level": "class_runnable", "_id": "6367676c1a6d9265ec018220", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_stripFilenameExtension.class"}
{"generate_results": [{"generate_code": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n    int i = 0;\n    while(i < str.length() && str.charAt(i) == leadingCharacter){\n        i++;\n    }\n    return str.substring(i);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"String.length()\" because \"<parameter1>\" is null\n\tat io.jsonwebtoken.lang.Strings.trimLeadingCharacter(Strings.java:257)\n\tat io.jsonwebtoken.lang.Strings_trimLeadingCharacter.main(Strings_trimLeadingCharacter.java:10)\n", "is_pass": false}], "docstring": "/** \n * Trim all occurrences of the supplied leading character from the given String.\n * @param str the String to check\n * @param leadingCharacter the leading character to be trimmed\n * @return the trimmed String\n */\n", "method_name": "trimLeadingCharacter", "codes": ["public static String trimLeadingCharacter(String str,char leadingCharacter){\n    int i = 0;\n    while(i < str.length() && str.charAt(i) == leadingCharacter){\n        i++;\n    }\n    return str.substring(i);\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a7", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_trimLeadingCharacter.class"}
{"generate_results": [{"generate_code": "public static String[] split(String toSplit,String delimiter){\n    if(toSplit==null || delimiter==null){\n        throw new IllegalArgumentException(\"Null arguments are not allowed\");\n    }\n    int index = toSplit.indexOf(delimiter);\n    if(index==-1){\n        return new String[]{toSplit};\n    }\n    return new String[]{toSplit.substring(0,index),toSplit.substring(index+delimiter.length())};\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Null arguments are not allowed\n\tat io.jsonwebtoken.lang.Strings.split(Strings.java:863)\n\tat io.jsonwebtoken.lang.Strings_split.main(Strings_split.java:12)\n", "is_pass": false}], "docstring": "/** \n * Split a String at the first occurrence of the delimiter. Does not include the delimiter in the result.\n * @param toSplit the string to split\n * @param delimiter to split the string up with\n * @return a two element array with index 0 being before the delimiter, andindex 1 being after the delimiter (neither element includes the delimiter); or <code>null</code> if the delimiter wasn't found in the given input String\n */\n", "method_name": "split", "codes": ["public static String[] split(String toSplit,String delimiter){\n    if(toSplit==null || delimiter==null){\n        throw new IllegalArgumentException(\"Null arguments are not allowed\");\n    }\n    int index = toSplit.indexOf(delimiter);\n    if(index==-1){\n        return new String[]{toSplit};\n    }\n    return new String[]{toSplit.substring(0,index),toSplit.substring(index+delimiter.length())};\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181a6", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_split.class"}
{"generate_results": [{"generate_code": "public static String applyRelativePath(String path,String relativePath){\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n    if(folderIndex == -1){\n        return path + FOLDER_SEPARATOR + relativePath;\n    }else{\n        return path.substring(0,folderIndex) + FOLDER_SEPARATOR + relativePath;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Apply the given relative path to the given path, assuming standard Java folder separation (i.e. \"/\" separators).\n * @param path the path to start from (usually a full file path)\n * @param relativePath the relative path to apply(relative to the full file path above)\n * @return the full file path that results from applying the relative path\n */\n", "method_name": "applyRelativePath", "codes": ["public static String applyRelativePath(String path,String relativePath){\n    int folderIndex = path.lastIndexOf(FOLDER_SEPARATOR);\n    if(folderIndex == -1){\n        return path + FOLDER_SEPARATOR + relativePath;\n    }else{\n        return path.substring(0,folderIndex) + FOLDER_SEPARATOR + relativePath;\n    }\n}"], "code_level": "class_runnable", "_id": "636767691a6d9265ec0181ac", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_applyRelativePath.class"}
{"generate_results": [{"generate_code": "public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n    if(str.length() <= index || substring.length() > str.length() - index)\n        return false;\n    return str.subSequence(index, index + substring.length()).equals(substring);\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns  {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n * @param str the original string (or StringBuilder)\n * @param index the index in the original string to start matching against\n * @param substring the substring to match at the given index\n * @return {@code true} if the given string matches the given substring at the given index, {@code false} otherwise.\n */\n", "method_name": "substringMatch", "codes": ["public static boolean substringMatch(CharSequence str,int index,CharSequence substring){\n    if(str.length() <= index || substring.length() > str.length() - index)\n        return false;\n    return str.subSequence(index, index + substring.length()).equals(substring);\n}"], "code_level": "slib_runnable", "_id": "6367676b1a6d9265ec0181e9", "project_name": "jjwt-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/jjwt/api/target/classes/io/jsonwebtoken/lang/Strings_substringMatch.class"}
{"generate_results": [{"generate_code": "protected static void deleteFile(String fileName){\n    File file = new File(fileName);\n    if(file.exists()){\n        file.delete();\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Delete's the specified file if it exists \n */\n", "method_name": "deleteFile", "codes": ["protected static void deleteFile(String fileName){\n    File file = new File(fileName);\n    if(file.exists()){\n        file.delete();\n    }\n}"], "code_level": "slib_runnable", "_id": "636767821a6d9265ec0183a0", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/CompositeRollingAppender_deleteFile.class"}
{"generate_results": [{"generate_code": "public String format(LoggingEvent event){\n    if (pattern == null) {\n        pattern = DEFAULT_CONVERSION_PATTERN;\n    }\n    if (head == null) {\n        head = PatternParser.createPatternConverter(pattern, this);\n    }\n    if (sbuf == null) {\n        sbuf = new StringBuffer();\n    }\n    head.format(event, sbuf);\n    return sbuf.toString();\n}", "errormessage": "compile error", "error_detail_message": "PatternLayout.java:497: error: cannot find symbol\n        head = PatternParser.createPatternConverter(pattern, this);\n                            ^\n  symbol:   method createPatternConverter(String,PatternLayout)\n  location: class PatternParser\nPatternLayout.java:502: error: incompatible types: LoggingEvent cannot be converted to StringBuffer\n    head.format(event, sbuf);\n                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Produces a formatted string as specified by the conversion pattern.\n */\n", "method_name": "format", "codes": ["public String format(LoggingEvent event){\n    if (pattern == null) {\n        pattern = DEFAULT_CONVERSION_PATTERN;\n    }\n    if (head == null) {\n        head = PatternParser.createPatternConverter(pattern, this);\n    }\n    if (sbuf == null) {\n        sbuf = new StringBuffer();\n    }\n    head.format(event, sbuf);\n    return sbuf.toString();\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01830f", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/PatternLayout_format.java"}
{"generate_results": [{"generate_code": "protected void subAppend(LoggingEvent event){\n    if(dir == null){\n        checkEntryConditions();\n    }\n    if(requiresLayout()){\n        event.getLogger().log(event.getLevel(), event.getMessage(), event.getThrowableInformation());\n    }else{\n        event.getLogger().log(event.getLevel(), event.getMessage());\n    }\n}", "errormessage": "compile error", "error_detail_message": "TempFileAppender.java:173: error: class, interface, enum, or record expected\n  public boolean requiresLayout() {\n         ^\nTempFileAppender.java:175: error: class, interface, enum, or record expected\n  }\n  ^\nTempFileAppender.java:177: error: class, interface, enum, or record expected\n  public void close() {\n         ^\n3 errors\n", "is_pass": false}], "docstring": "/** \n * This method does actual writing\n */\n", "method_name": "subAppend", "codes": ["protected void subAppend(LoggingEvent event){\n    if(dir == null){\n        checkEntryConditions();\n    }\n    if(requiresLayout()){\n        event.getLogger().log(event.getLevel(), event.getMessage(), event.getThrowableInformation());\n    }else{\n        event.getLogger().log(event.getLevel(), event.getMessage());\n    }\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/TempFileAppender_subAppend.java"}
{"generate_results": [{"generate_code": "public static String peek(){\n    return stack.peek();\n}", "errormessage": "compile error", "error_detail_message": "NDC.java:309: error: cannot find symbol\n    return stack.peek();\n           ^\n  symbol:   variable stack\n  location: class NDC\nNote: NDC.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * Looks at the last diagnostic context at the top of this NDC without removing it. <p>The returned value is the value that was pushed last. If no context is available, then the empty string \"\" is returned.\n * @return String The innermost diagnostic context.\n */\n", "method_name": "peek", "codes": ["public static String peek(){\n    return stack.peek();\n}"], "code_level": "class_runnable", "_id": "636767831a6d9265ec0183c9", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/NDC_peek.java"}
{"generate_results": [{"generate_code": "public Logger exists(String name){\n    if(ht.containsKey(name)){\n        return ht.get(name);\n    }\n    return null;\n}", "errormessage": "compile error", "error_detail_message": "Hierarchy.java:147: error: incompatible types: Object cannot be converted to Logger\n        return ht.get(name);\n                     ^\nHierarchy.java:314: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  Enumeration getCurrentCategories() {\n              ^\nHierarchy.java:352: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  void overrideAsNeeded(String override) {\n       ^\nHierarchy.java:400: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  void setDisableOverride(String override) {\n       ^\nNote: Hierarchy.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n3 warnings\n", "is_pass": false}], "docstring": "/** \n * Check if the named logger exists in the hierarchy. If so return its reference, otherwise returns <code>null</code>.\n * @param name The name of the logger to search for.\n */\n", "method_name": "exists", "codes": ["public Logger exists(String name){\n    if(ht.containsKey(name)){\n        return ht.get(name);\n    }\n    return null;\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec01832e", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/Hierarchy_exists.java"}
{"generate_results": [{"generate_code": "public String format(final LoggingEvent event){\n    if (conversionPattern == null) {\n        conversionPattern = getConversionPattern();\n    }\n    if (conversionPattern == null) {\n        conversionPattern = DEFAULT_CONVERSION_PATTERN;\n    }\n    if (head == null) {\n        head = createPatternParser(conversionPattern);\n    }\n    return head.convert(event);\n}", "errormessage": "compile error", "error_detail_message": "EnhancedPatternLayout.java:435: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected final int BUF_SIZE = 256;\n                      ^\nEnhancedPatternLayout.java:441: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected final int MAX_CAPACITY = 1024;\n                      ^\nEnhancedPatternLayout.java:545: error: incompatible types: PatternParser cannot be converted to PatternConverter\n        head = createPatternParser(conversionPattern);\n                                  ^\nEnhancedPatternLayout.java:547: error: convert(LoggingEvent) has protected access in PatternConverter\n    return head.convert(event);\n               ^\n2 errors\n2 warnings\n", "is_pass": false}], "docstring": "/** \n * Formats a logging event to a writer.\n * @param event logging event to be formatted.\n */\n", "method_name": "format", "codes": ["public String format(final LoggingEvent event){\n    if (conversionPattern == null) {\n        conversionPattern = getConversionPattern();\n    }\n    if (conversionPattern == null) {\n        conversionPattern = DEFAULT_CONVERSION_PATTERN;\n    }\n    if (head == null) {\n        head = createPatternParser(conversionPattern);\n    }\n    return head.convert(event);\n}"], "code_level": "project_runnable", "_id": "6367677b1a6d9265ec0182bd", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/EnhancedPatternLayout_format.java"}
{"generate_results": [{"generate_code": "private Class findClass(final String className) throws ClassNotFoundException {\n    Class clazz = Class.forName(className);\n    return clazz;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Find class given class name.\n * @param className class name, may not be null.\n * @return class, will not be null.\n * @throws ClassNotFoundException thrown if class can not be found.\n */\n", "method_name": "findClass", "codes": ["private Class findClass(final String className) throws ClassNotFoundException {\n    Class clazz = Class.forName(className);\n    return clazz;\n}"], "code_level": "slib_runnable", "_id": "636767791a6d9265ec018263", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/EnhancedThrowableRenderer_findClass.class"}
{"generate_results": [{"generate_code": "public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable() {\n        public void run() {\n            _table.addMessage(lr);\n        }\n    });\n}", "errormessage": "compile error", "error_detail_message": "LogBrokerMonitor.java:249: error: cannot find symbol\n            _table.addMessage(lr);\n                  ^\n  symbol:   method addMessage(LogRecord)\n  location: variable _table of type LogTable\nLogBrokerMonitor.java:1387: warning: [dep-ann] deprecated item is not annotated with @Deprecated\n  protected void trackTableScrollPane() {\n                 ^\nNote: LogBrokerMonitor.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: LogBrokerMonitor.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n1 warning\n", "is_pass": false}], "docstring": "/** \n * Add a log record message to be displayed in the LogTable. This method is thread-safe as it posts requests to the SwingThread rather than processing directly.\n */\n", "method_name": "addMessage", "codes": ["public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable() {\n        public void run() {\n            _table.addMessage(lr);\n        }\n    });\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec018257", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/LogBrokerMonitor_addMessage.java"}
{"generate_results": [{"generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n    if(row<0 || row>=table.getRowCount()){\n        throw new IllegalArgumentException(\"Invalid row number\");\n    }\n    table.setRowSelectionInterval(row,row);\n    pane.setViewportView(table);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid row number\n\tat org.apache.log4j.lf5.viewer.LF5SwingUtils.selectRow(LF5SwingUtils.java:61)\n\tat org.apache.log4j.lf5.viewer.LF5SwingUtils_selectRow.main(LF5SwingUtils_selectRow.java:28)\n", "is_pass": false}], "docstring": "/** \n * Selects a the specified row in the specified JTable and scrolls the specified JScrollpane to the newly selected row. More importantly, the call to repaint() delayed long enough to have the table properly paint the newly selected row which may be offscre\n * @param table should belong to the specified JScrollPane\n */\n", "method_name": "selectRow", "codes": ["public static void selectRow(int row,JTable table,JScrollPane pane){\n    if(row<0 || row>=table.getRowCount()){\n        throw new IllegalArgumentException(\"Invalid row number\");\n    }\n    table.setRowSelectionInterval(row,row);\n    pane.setViewportView(table);\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183ff", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/viewer/LF5SwingUtils_selectRow.class"}
{"generate_results": [{"generate_code": "public static void createConfigurationDirectory(){\n  if(System.getProperty(\"os.name\").startsWith(\"Windows\")){\n    String dir = System.getProperty(\"user.home\") + \"\\\\lf5\";\n    File f = new File(dir);\n    if(!f.exists()){\n      f.mkdirs();\n    }\n  }else{\n    String dir = System.getProperty(\"user.home\") + \"/lf5\";\n    File f = new File(dir);\n    if(!f.exists()){\n      f.mkdir();\n    }\n  }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Creates the directory where the MRU file list will be written. The \"lf5\" directory is created in the Documents and Settings directory on Windows 2000 machines and where ever the user.home variable points on all other platforms.\n */\n", "method_name": "createConfigurationDirectory", "codes": ["public static void createConfigurationDirectory(){\n  if(System.getProperty(\"os.name\").startsWith(\"Windows\")){\n    String dir = System.getProperty(\"user.home\") + \"\\\\lf5\";\n    File f = new File(dir);\n    if(!f.exists()){\n      f.mkdirs();\n    }\n  }else{\n    String dir = System.getProperty(\"user.home\") + \"/lf5\";\n    File f = new File(dir);\n    if(!f.exists()){\n      f.mkdir();\n    }\n  }\n}"], "code_level": "slib_runnable", "_id": "636767871a6d9265ec01846d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/viewer/configure/MRUFileManager_createConfigurationDirectory.class"}
{"generate_results": [{"generate_code": "public synchronized void send(final String message){\n    if(message == null){\n        LogLog.error(\"Null message passed to send method\");\n        return;\n    }\n    if(writers == null){\n        LogLog.error(\"No writers to send message to\");\n        return;\n    }\n    try{\n        for(int i = 0; i < writers.size(); i++){\n            PrintWriter out = (PrintWriter)writers.elementAt(i);\n            out.println(message);\n            out.flush();\n        }\n    }catch(InterruptedIOException e){\n        LogLog.warn(\"Thread was interrupted while sending message\", e);\n    }catch(IOException e){\n        LogLog.error(\"IOException occurred while sending message\", e);\n    }\n}", "errormessage": "compile error", "error_detail_message": "TelnetAppender.java:190: error: exception InterruptedIOException is never thrown in body of corresponding try statement\n    }catch(InterruptedIOException e){\n     ^\nTelnetAppender.java:192: error: exception IOException is never thrown in body of corresponding try statement\n    }catch(IOException e){\n     ^\nNote: TelnetAppender.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: TelnetAppender.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n2 errors\n", "is_pass": false}], "docstring": "/** \n * sends a message to each of the clients in telnet-friendly output. \n */\n", "method_name": "send", "codes": ["public synchronized void send(final String message){\n    if(message == null){\n        LogLog.error(\"Null message passed to send method\");\n        return;\n    }\n    if(writers == null){\n        LogLog.error(\"No writers to send message to\");\n        return;\n    }\n    try{\n        for(int i = 0; i < writers.size(); i++){\n            PrintWriter out = (PrintWriter)writers.elementAt(i);\n            out.println(message);\n            out.flush();\n        }\n    }catch(InterruptedIOException e){\n        LogLog.warn(\"Thread was interrupted while sending message\", e);\n    }catch(IOException e){\n        LogLog.error(\"IOException occurred while sending message\", e);\n    }\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec018347", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/net/TelnetAppender_send.java"}
{"generate_results": [{"generate_code": "protected void append(LoggingEvent event){\n    if(requiresLayout()){\n        String formatted = layout.format(event);\n        if(layout.ignoresThrowable()){\n            send(formatted);\n        }else{\n            send(formatted + (event.getThrowableInformation() != null ? event.getThrowableInformation().getThrowable().toString() : \"\"));\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "TelnetAppender.java:227: error: class, interface, enum, or record expected\n}\n^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Handles a log event.  For this appender, that means writing the message to each connected client.  \n */\n", "method_name": "append", "codes": ["protected void append(LoggingEvent event){\n    if(requiresLayout()){\n        String formatted = layout.format(event);\n        if(layout.ignoresThrowable()){\n            send(formatted);\n        }else{\n            send(formatted + (event.getThrowableInformation() != null ? event.getThrowableInformation().getThrowable().toString() : \"\"));\n        }\n    }\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec01823e", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/net/TelnetAppender_append.java"}
{"generate_results": [{"generate_code": "public void put(LoggingEvent o){\n    if(isFull()){\n        resize(maxSize*2);\n    }\n    buf[next] = o;\n    next = (next + 1) % maxSize;\n    numElements++;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Place a  {@link LoggingEvent} in the buffer. If the buffer is fullthen the event is <b>silently dropped</b>. It is the caller's responsability to make sure that the buffer has free space.  \n */\n", "method_name": "put", "codes": ["public void put(LoggingEvent o){\n    if(isFull()){\n        resize(maxSize*2);\n    }\n    buf[next] = o;\n    next = (next + 1) % maxSize;\n    numElements++;\n}"], "code_level": "class_runnable", "_id": "6367677f1a6d9265ec01834b", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/BoundedFIFO_put.class"}
{"generate_results": [{"generate_code": "public static String findAndSubst(String key,Properties props){\n    String value = props.getProperty(key);\n    if(value != null){\n        value = substVars(value,props);\n    }\n    return value;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Find the value corresponding to <code>key</code> in <code>props</code>. Then perform variable substitution on the found value.\n */\n", "method_name": "findAndSubst", "codes": ["public static String findAndSubst(String key,Properties props){\n    String value = props.getProperty(key);\n    if(value != null){\n        value = substVars(value,props);\n    }\n    return value;\n}"], "code_level": "project_runnable", "_id": "636767791a6d9265ec01826d", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/OptionConverter_findAndSubst.class"}
{"generate_results": [{"generate_code": "public boolean isAttached(Appender appender){\n    if(appenderList.contains(appender)){\n        return true;\n    }else{\n        return false;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Returns <code>true</code> if the specified appender is in the list of attached appenders, <code>false</code> otherwise.\n * @since 1.2 \n */\n", "method_name": "isAttached", "codes": ["public boolean isAttached(Appender appender){\n    if(appenderList.contains(appender)){\n        return true;\n    }else{\n        return false;\n    }\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018238", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_isAttached.class"}
{"generate_results": [{"generate_code": "public static boolean toBoolean(String value,boolean dEfault){\n    if(value==null)\n        return dEfault;\n    value=value.toLowerCase().trim();\n    if(value.equals(\"true\")||value.equals(\"yes\")||value.equals(\"1\"))\n        return true;\n    if(value.equals(\"false\")||value.equals(\"no\")||value.equals(\"0\"))\n        return false;\n    return dEfault;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * If <code>value</code> is \"true\", then <code>true</code> is returned. If <code>value</code> is \"false\", then <code>true</code> is returned. Otherwise, <code>default</code> is returned. <p>Case of value is unimportant.  \n */\n", "method_name": "toBoolean", "codes": ["public static boolean toBoolean(String value,boolean dEfault){\n    if(value==null)\n        return dEfault;\n    value=value.toLowerCase().trim();\n    if(value.equals(\"true\")||value.equals(\"yes\")||value.equals(\"1\"))\n        return true;\n    if(value.equals(\"false\")||value.equals(\"no\")||value.equals(\"0\"))\n        return false;\n    return dEfault;\n}"], "code_level": "self_contained", "_id": "6367677d1a6d9265ec0182fd", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/OptionConverter_toBoolean.class"}
{"generate_results": [{"generate_code": "public void add(LoggingEvent event){\n    if(numElems == maxSize){\n        resize(maxSize * 2);\n    }\n    ea[last] = event;\n    last = (last + 1) % maxSize;\n    numElems++;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add an <code>event</code> as the last event in the buffer.\n */\n", "method_name": "add", "codes": ["public void add(LoggingEvent event){\n    if(numElems == maxSize){\n        resize(maxSize * 2);\n    }\n    ea[last] = event;\n    last = (last + 1) % maxSize;\n    numElems++;\n}"], "code_level": "class_runnable", "_id": "636767841a6d9265ec0183e8", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/CyclicBuffer_add.class"}
{"generate_results": [{"generate_code": "public void removeAppender(String name){\n    if(appenderList != null){\n        for(Enumeration e = appenderList.elements(); e.hasMoreElements();){\n            Appender appender = (Appender) e.nextElement();\n            if(appender.getName().equals(name)){\n                appenderList.removeElement(appender);\n                break;\n            }\n        }\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Remove the appender with the name passed as parameter form the list of appenders.  \n */\n", "method_name": "removeAppender", "codes": ["public void removeAppender(String name){\n    if(appenderList != null){\n        for(Enumeration e = appenderList.elements(); e.hasMoreElements();){\n            Appender appender = (Appender) e.nextElement();\n            if(appender.getName().equals(name)){\n                appenderList.removeElement(appender);\n                break;\n            }\n        }\n    }\n}"], "code_level": "project_runnable", "_id": "636767861a6d9265ec01844c", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_removeAppender.class"}
{"generate_results": [{"generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n    if(appenderList == null){\n        appenderList = new Vector();\n    }\n    Enumeration e = appenderList.elements();\n    while(e.hasMoreElements()){\n        Appender appender = (Appender) e.nextElement();\n        appender.doAppend(event);\n    }\n    return appenderList.size();\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Call the <code>doAppend</code> method on all attached appenders.  \n */\n", "method_name": "appendLoopOnAppenders", "codes": ["public int appendLoopOnAppenders(LoggingEvent event){\n    if(appenderList == null){\n        appenderList = new Vector();\n    }\n    Enumeration e = appenderList.elements();\n    while(e.hasMoreElements()){\n        Appender appender = (Appender) e.nextElement();\n        appender.doAppend(event);\n    }\n    return appenderList.size();\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018242", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/helpers/AppenderAttachableImpl_appendLoopOnAppenders.class"}
{"generate_results": [{"generate_code": "public boolean hasThrown(){\n    return _thrown != null;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @return true if getThrown().toString() is a non-empty string.\n */\n", "method_name": "hasThrown", "codes": ["public boolean hasThrown(){\n    return _thrown != null;\n}"], "code_level": "class_runnable", "_id": "636767821a6d9265ec0183ab", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/lf5/LogRecord_hasThrown.class"}
{"generate_results": [{"generate_code": "protected int removeUnusedNodes(){\n    int removedNodes = 0;\n    ArrayList<CategoryNode> nodesToRemove = new ArrayList<CategoryNode>();\n    for(Enumeration<CategoryNode> e = _categoryModel.getRootNodes().elements(); e.hasMoreElements();){\n        CategoryNode node = e.nextElement();\n        if(!node.isActive()){\n            nodesToRemove.add(node);\n            removedNodes++;\n        }\n    }\n    for(CategoryNode node : nodesToRemove){\n        _categoryModel.removeNode(node);\n    }\n    return removedNodes;\n}", "errormessage": "compile error", "error_detail_message": "CategoryNodeEditor.java:255: error: cannot find symbol\n    for(Enumeration<CategoryNode> e = _categoryModel.getRootNodes().elements(); e.hasMoreElements();){\n                                                    ^\n  symbol:   method getRootNodes()\n  location: variable _categoryModel of type CategoryExplorerModel\nCategoryNodeEditor.java:257: error: cannot find symbol\n        if(!node.isActive()){\n                ^\n  symbol:   method isActive()\n  location: variable node of type CategoryNode\nCategoryNodeEditor.java:263: error: cannot find symbol\n        _categoryModel.removeNode(node);\n                      ^\n  symbol:   method removeNode(CategoryNode)\n  location: variable _categoryModel of type CategoryExplorerModel\nNote: CategoryNodeEditor.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: CategoryNodeEditor.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Removes any inactive nodes from the Category tree.\n */\n", "method_name": "removeUnusedNodes", "codes": ["protected int removeUnusedNodes(){\n    int removedNodes = 0;\n    ArrayList<CategoryNode> nodesToRemove = new ArrayList<CategoryNode>();\n    for(Enumeration<CategoryNode> e = _categoryModel.getRootNodes().elements(); e.hasMoreElements();){\n        CategoryNode node = e.nextElement();\n        if(!node.isActive()){\n            nodesToRemove.add(node);\n            removedNodes++;\n        }\n    }\n    for(CategoryNode node : nodesToRemove){\n        _categoryModel.removeNode(node);\n    }\n    return removedNodes;\n}"], "code_level": "project_runnable", "_id": "6367677e1a6d9265ec018314", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/lf5/viewer/categoryexplorer/CategoryNodeEditor_removeUnusedNodes.java"}
{"generate_results": [{"generate_code": "public int compare(Object aObj1,Object aObj2){\n    EventDetails aEvent1 = (EventDetails) aObj1;\n    EventDetails aEvent2 = (EventDetails) aObj2;\n    return aEvent1.getTimeStamp().compareTo(aEvent2.getTimeStamp());\n}", "errormessage": "compile error", "error_detail_message": "MyTableModel.java:50: error: long cannot be dereferenced\n    return aEvent1.getTimeStamp().compareTo(aEvent2.getTimeStamp());\n                                 ^\nNote: MyTableModel.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\nNote: MyTableModel.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * @see Comparator \n */\n", "method_name": "compare", "codes": ["public int compare(Object aObj1,Object aObj2){\n    EventDetails aEvent1 = (EventDetails) aObj1;\n    EventDetails aEvent2 = (EventDetails) aObj2;\n    return aEvent1.getTimeStamp().compareTo(aEvent2.getTimeStamp());\n}"], "code_level": "project_runnable", "_id": "636767841a6d9265ec0183f2", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/chainsaw/MyTableModel_compare.java"}
{"generate_results": [{"generate_code": "public int decide(LoggingEvent event){\n    if(stringToMatch == null || stringToMatch.length() == 0){\n        return Filter.NEUTRAL;\n    }\n    if(event.getMessage().toString().matches(stringToMatch)){\n        if(acceptOnMatch){\n            return Filter.ACCEPT;\n        }else{\n            return Filter.DENY;\n        }\n    }else{\n        return Filter.NEUTRAL;\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns  {@link Filter#NEUTRAL} is there is no string match.\n */\n", "method_name": "decide", "codes": ["public int decide(LoggingEvent event){\n    if(stringToMatch == null || stringToMatch.length() == 0){\n        return Filter.NEUTRAL;\n    }\n    if(event.getMessage().toString().matches(stringToMatch)){\n        if(acceptOnMatch){\n            return Filter.ACCEPT;\n        }else{\n            return Filter.DENY;\n        }\n    }else{\n        return Filter.NEUTRAL;\n    }\n}"], "code_level": "project_runnable", "_id": "636767781a6d9265ec018250", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/target/classes/org/apache/log4j/varia/StringMatchFilter_decide.class"}
{"generate_results": [{"generate_code": "public void abbreviate(final int nameStart,final StringBuffer buf){\n    if(nameStart<0){\n        throw new IllegalArgumentException(\"nameStart must be greater than or equal to 0\");\n    }\n    if(buf==null){\n        throw new IllegalArgumentException(\"buffer must not be null\");\n    }\n    if(fragments==null){\n        throw new IllegalArgumentException(\"fragments must not be null\");\n    }\n    if(count<0){\n        throw new IllegalArgumentException(\"count must be greater than or equal to 0\");\n    }\n    if(charCount<0){\n        throw new IllegalArgumentException(\"charCount must be greater than or equal to 0\");\n    }\n    if(ellipsis<0){\n        throw new IllegalArgumentException(\"ellipsis must be greater than or equal to 0\");\n    }\n    if(fragments.length<count){\n        throw new IllegalArgumentException(\"fragments length must be greater than or equal to count\");\n    }\n    if(fragments[0].getCharCount()<charCount){\n        throw new IllegalArgumentException(\"fragments[0].getCharCount() must be greater than or equal to charCount\");\n    }\n    buf.setLength(nameStart);\n    for(int i=0;i<count;i++){\n        if(i==0){\n            buf.append(fragments[i].getEllipsis());\n        }\n        buf.append(fragments[i].getCharCount());\n    }\n}", "errormessage": "compile error", "error_detail_message": "NameAbbreviator.java:230: error: cannot find symbol\n    if(fragments==null){\n       ^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNameAbbreviator.java:236: error: cannot find symbol\n    if(charCount<0){\n       ^\n  symbol:   variable charCount\n  location: class DropElementAbbreviator\nNameAbbreviator.java:239: error: cannot find symbol\n    if(ellipsis<0){\n       ^\n  symbol:   variable ellipsis\n  location: class DropElementAbbreviator\nNameAbbreviator.java:242: error: cannot find symbol\n    if(fragments.length<count){\n       ^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNameAbbreviator.java:245: error: cannot find symbol\n    if(fragments[0].getCharCount()<charCount){\n       ^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNameAbbreviator.java:245: error: cannot find symbol\n    if(fragments[0].getCharCount()<charCount){\n                                   ^\n  symbol:   variable charCount\n  location: class DropElementAbbreviator\nNameAbbreviator.java:251: error: cannot find symbol\n            buf.append(fragments[i].getEllipsis());\n                       ^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNameAbbreviator.java:253: error: cannot find symbol\n        buf.append(fragments[i].getCharCount());\n                   ^\n  symbol:   variable fragments\n  location: class DropElementAbbreviator\nNote: NameAbbreviator.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Abbreviate name.\n * @param buf buffer to append abbreviation.\n * @param nameStart start of name to abbreviate.\n */\n", "method_name": "abbreviate", "codes": ["public void abbreviate(final int nameStart,final StringBuffer buf){\n    if(nameStart<0){\n        throw new IllegalArgumentException(\"nameStart must be greater than or equal to 0\");\n    }\n    if(buf==null){\n        throw new IllegalArgumentException(\"buffer must not be null\");\n    }\n    if(fragments==null){\n        throw new IllegalArgumentException(\"fragments must not be null\");\n    }\n    if(count<0){\n        throw new IllegalArgumentException(\"count must be greater than or equal to 0\");\n    }\n    if(charCount<0){\n        throw new IllegalArgumentException(\"charCount must be greater than or equal to 0\");\n    }\n    if(ellipsis<0){\n        throw new IllegalArgumentException(\"ellipsis must be greater than or equal to 0\");\n    }\n    if(fragments.length<count){\n        throw new IllegalArgumentException(\"fragments length must be greater than or equal to count\");\n    }\n    if(fragments[0].getCharCount()<charCount){\n        throw new IllegalArgumentException(\"fragments[0].getCharCount() must be greater than or equal to charCount\");\n    }\n    buf.setLength(nameStart);\n    for(int i=0;i<count;i++){\n        if(i==0){\n            buf.append(fragments[i].getEllipsis());\n        }\n        buf.append(fragments[i].getCharCount());\n    }\n}"], "code_level": "class_runnable", "_id": "636767861a6d9265ec018440", "project_name": "logging-log4j1-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/logging-log4j1/src/main/java/org/apache/log4j/pattern/NameAbbreviator_abbreviate.java"}
{"generate_results": [{"generate_code": "public String id(String entityId){\n    return Const.ID_CONNECTOR + point + entityId;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * @return the row id\n */\n", "method_name": "id", "codes": ["public String id(String entityId){\n    return Const.ID_CONNECTOR + point + entityId;\n}"], "code_level": "project_runnable", "_id": "636767df1a6d9265ec01873c", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/query/PointOfTime_id.class"}
{"generate_results": [{"generate_code": "@Override public void accept(final METRICS data){\n    if(buffer.containsKey(data.getId())){\n        METRICS existing = buffer.get(data.getId());\n        if(isAbandoned(existing, data)){\n            buffer.remove(data.getId());\n        }else{\n            buffer.put(data.getId(), combine(existing, data));\n        }\n    }else{\n        buffer.put(data.getId(), data);\n    }\n}", "errormessage": "compile error", "error_detail_message": "MergableBufferedData.java:41: error: cannot find symbol\n    if(buffer.containsKey(data.getId())){\n                              ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:42: error: cannot find symbol\n        METRICS existing = buffer.get(data.getId());\n                                          ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:43: error: cannot find symbol\n        if(isAbandoned(existing, data)){\n           ^\n  symbol:   method isAbandoned(METRICS,METRICS)\n  location: class MergableBufferedData<METRICS>\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:44: error: cannot find symbol\n            buffer.remove(data.getId());\n                              ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:46: error: cannot find symbol\n            buffer.put(data.getId(), combine(existing, data));\n                           ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:46: error: cannot find symbol\n            buffer.put(data.getId(), combine(existing, data));\n                                     ^\n  symbol:   method combine(METRICS,METRICS)\n  location: class MergableBufferedData<METRICS>\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\nMergableBufferedData.java:49: error: cannot find symbol\n        buffer.put(data.getId(), data);\n                       ^\n  symbol:   method getId()\n  location: variable data of type METRICS\n  where METRICS is a type-variable:\n    METRICS extends Metrics declared in class MergableBufferedData\n7 errors\n", "is_pass": false}], "docstring": "/** \n * Accept the data into the cache and merge with the existing value. This method is not thread safe, should avoid concurrency calling.\n * @param data to be added potentially.\n */\n", "method_name": "accept", "codes": ["@Override public void accept(final METRICS data){\n    if(buffer.containsKey(data.getId())){\n        METRICS existing = buffer.get(data.getId());\n        if(isAbandoned(existing, data)){\n            buffer.remove(data.getId());\n        }else{\n            buffer.put(data.getId(), combine(existing, data));\n        }\n    }else{\n        buffer.put(data.getId(), data);\n    }\n}"], "code_level": "self_contained", "_id": "636767e11a6d9265ec018781", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/data/MergableBufferedData_accept.java"}
{"generate_results": [{"generate_code": "protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> timeRanges = new ArrayList<>();\n    long currentStart = start;\n    while(currentStart <= end){\n        long currentEnd = Math.min(currentStart + FETCH_DATA_DURATION, end);\n        timeRanges.add(new TimeRange(currentStart, currentEnd));\n        currentStart = currentEnd + 1;\n    }\n    return timeRanges;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n", "is_pass": false}], "docstring": "/** \n * Split time ranges to insure the start time and end time is small then  {@link #FETCH_DATA_DURATION}\n */\n", "method_name": "buildTimeRanges", "codes": ["protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> timeRanges = new ArrayList<>();\n    long currentStart = start;\n    while(currentStart <= end){\n        long currentEnd = Math.min(currentStart + FETCH_DATA_DURATION, end);\n        timeRanges.add(new TimeRange(currentStart, currentEnd));\n        currentStart = currentEnd + 1;\n    }\n    return timeRanges;\n}"], "code_level": "self_contained", "_id": "636767df1a6d9265ec018744", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/profiling/ebpf/analyze/EBPFProfilingAnalyzer_buildTimeRanges.class"}
{"generate_results": [{"generate_code": "public void valueAccumulation(String key,Long value){\n    if(data.containsKey(key)){\n        data.put(key,data.get(key)+value);\n    }else{\n        data.put(key,value);\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Accumulate the value with existing value in the same given key.\n */\n", "method_name": "valueAccumulation", "codes": ["public void valueAccumulation(String key,Long value){\n    if(data.containsKey(key)){\n        data.put(key,data.get(key)+value);\n    }else{\n        data.put(key,value);\n    }\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec01871c", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/analysis/metrics/DataTable_valueAccumulation.class"}
{"generate_results": [{"generate_code": "public boolean isExpired(long timestamp,long expiredThreshold){\n    if(timestamp - lastUpdateTimestamp > expiredThreshold){\n        return true;\n    }else{\n        return false;\n    }\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * @param timestamp        of current time\n * @param expiredThreshold represents the duration between last update time and the time point removing from cache.\n * @return true means this metrics should be removed from cache.\n */\n", "method_name": "isExpired", "codes": ["public boolean isExpired(long timestamp,long expiredThreshold){\n    if(timestamp - lastUpdateTimestamp > expiredThreshold){\n        return true;\n    }else{\n        return false;\n    }\n}"], "code_level": "class_runnable", "_id": "636767dd1a6d9265ec0186de", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/target/classes/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics_isExpired.class"}
{"generate_results": [{"generate_code": "private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    content.put(\"msg_type\", \"text\");\n    content.put(\"text\", jsonObject.get(\"content\").getAsString());\n    return content;\n}", "errormessage": "exec error!", "error_detail_message": "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nException in thread \"main\" java.lang.UnsupportedOperationException: JsonObject\n\tat com.google.gson.JsonElement.getAsString(JsonElement.java:179)\n\tat org.apache.skywalking.oap.server.core.alarm.provider.feishu.FeishuHookCallback.buildContent(FeishuHookCallback.java:124)\n\tat org.apache.skywalking.oap.server.core.alarm.provider.feishu.FeishuHookCallback_buildContent.testFeishuWebhookWithoutSign(FeishuHookCallback_buildContent.java:218)\n\tat org.apache.skywalking.oap.server.core.alarm.provider.feishu.FeishuHookCallback_buildContent.main(FeishuHookCallback_buildContent.java:184)\n", "is_pass": false}], "docstring": "/** \n * build content,if it has ats someone set the ats\n */\n", "method_name": "buildContent", "codes": ["private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    content.put(\"msg_type\", \"text\");\n    content.put(\"text\", jsonObject.get(\"content\").getAsString());\n    return content;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018755", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-alarm-plugin/target/classes/org/apache/skywalking/oap/server/core/alarm/provider/feishu/FeishuHookCallback_buildContent.class"}
{"generate_results": [{"generate_code": "private void check(String modelName) throws IllegalStateException {\n    if (modelName == null) {\n        throw new IllegalStateException(\"Model name cannot be null\");\n    }\n    if (models.stream().anyMatch(model -> model.getName().equals(modelName))) {\n        log.info(\"Model {} is already exists\", modelName);\n    } else {\n        throw new IllegalStateException(\"Model \" + modelName + \" does not exist\");\n    }\n}", "errormessage": "compile error", "error_detail_message": "StorageModels.java:335: error: non-static variable models cannot be referenced from a static context\n    if (models.stream().anyMatch(model -> model.getName().equals(modelName))) {\n        ^\nNote: StorageModels.java uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for details.\n1 error\n", "is_pass": false}], "docstring": "/** \n * @param modelName model name of the entity\n * @throws IllegalStateException if sharding key indices are not continuous\n */\n", "method_name": "check", "codes": ["private void check(String modelName) throws IllegalStateException {\n    if (modelName == null) {\n        throw new IllegalStateException(\"Model name cannot be null\");\n    }\n    if (models.stream().anyMatch(model -> model.getName().equals(modelName))) {\n        log.info(\"Model {} is already exists\", modelName);\n    } else {\n        throw new IllegalStateException(\"Model \" + modelName + \" does not exist\");\n    }\n}"], "code_level": "self_contained", "_id": "636767de1a6d9265ec01871e", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels_check.java"}
{"generate_results": [{"generate_code": "public void overrideName(String oldName,String newName){\n    if(indices==null)\n        indices=new ArrayList<>();\n    for(MultiColumnsIndex index:indices){\n        if(index.getMainColumn().equals(oldName)){\n            index.setMainColumn(newName);\n        }\n        for(String column:index.getWithColumns()){\n            if(column.equals(oldName)){\n                index.getWithColumns().set(index.getWithColumns().indexOf(oldName),newName);\n            }\n        }\n    }\n}", "errormessage": "compile error", "error_detail_message": "SQLDatabaseExtension.java:57: error: non-static variable indices cannot be referenced from a static context\n    if(indices==null)\n       ^\nSQLDatabaseExtension.java:58: error: non-static variable indices cannot be referenced from a static context\n        indices=new ArrayList<>();\n        ^\nSQLDatabaseExtension.java:59: error: non-static variable indices cannot be referenced from a static context\n    for(MultiColumnsIndex index:indices){\n                                ^\nSQLDatabaseExtension.java:60: error: cannot find symbol\n        if(index.getMainColumn().equals(oldName)){\n                ^\n  symbol:   method getMainColumn()\n  location: variable index of type MultiColumnsIndex\nSQLDatabaseExtension.java:61: error: cannot find symbol\n            index.setMainColumn(newName);\n                 ^\n  symbol:   method setMainColumn(String)\n  location: variable index of type MultiColumnsIndex\nSQLDatabaseExtension.java:63: error: cannot find symbol\n        for(String column:index.getWithColumns()){\n                               ^\n  symbol:   method getWithColumns()\n  location: variable index of type MultiColumnsIndex\nSQLDatabaseExtension.java:65: error: cannot find symbol\n                index.getWithColumns().set(index.getWithColumns().indexOf(oldName),newName);\n                     ^\n  symbol:   method getWithColumns()\n  location: variable index of type MultiColumnsIndex\nSQLDatabaseExtension.java:65: error: cannot find symbol\n                index.getWithColumns().set(index.getWithColumns().indexOf(oldName),newName);\n                                                ^\n  symbol:   method getWithColumns()\n  location: variable index of type MultiColumnsIndex\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Keep the same name replacement as  {@link ColumnName#overrideName(String,String)}\n * @param oldName to be replaced.\n * @param newName to use in the storage level.\n */\n", "method_name": "overrideName", "codes": ["public void overrideName(String oldName,String newName){\n    if(indices==null)\n        indices=new ArrayList<>();\n    for(MultiColumnsIndex index:indices){\n        if(index.getMainColumn().equals(oldName)){\n            index.setMainColumn(newName);\n        }\n        for(String column:index.getWithColumns()){\n            if(column.equals(oldName)){\n                index.getWithColumns().set(index.getWithColumns().indexOf(oldName),newName);\n            }\n        }\n    }\n}"], "code_level": "self_contained", "_id": "636767dd1a6d9265ec0186f3", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/SQLDatabaseExtension_overrideName.java"}
{"generate_results": [{"generate_code": "public boolean isCompatible(DataTable dataset){\n    if(dataset.getBuckets().length != buckets.length){\n        return false;\n    }\n    for(int i=0;i<buckets.length;i++){\n        if(dataset.getBuckets()[i] != buckets[i]){\n            return false;\n        }\n    }\n    return true;\n}", "errormessage": "compile error", "error_detail_message": "BucketedValues.java:69: error: cannot find symbol\n    if(dataset.getBuckets().length != buckets.length){\n              ^\n  symbol:   method getBuckets()\n  location: variable dataset of type DataTable\nBucketedValues.java:73: error: cannot find symbol\n        if(dataset.getBuckets()[i] != buckets[i]){\n                  ^\n  symbol:   method getBuckets()\n  location: variable dataset of type DataTable\n2 errors\n", "is_pass": false}], "docstring": "/** \n * @return true if the bucket is same.\n */\n", "method_name": "isCompatible", "codes": ["public boolean isCompatible(DataTable dataset){\n    if(dataset.getBuckets().length != buckets.length){\n        return false;\n    }\n    for(int i=0;i<buckets.length;i++){\n        if(dataset.getBuckets()[i] != buckets[i]){\n            return false;\n        }\n    }\n    return true;\n}"], "code_level": "plib_runnable", "_id": "636767e11a6d9265ec018795", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/BucketedValues_isCompatible.java"}
{"generate_results": [{"generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    Map<String,Fields> structures = getMapping(tableName);\n    if(structures == null)\n        return null;\n    Mappings.Source source = structures.get(\"_source\");\n    if(source == null)\n        return null;\n    Map<String,Object> properties = source.getProperties();\n    if(properties == null)\n        return null;\n    Fields fields = new Fields(mappings);\n    Map<String,Object> historyMapping = structures.get(\"_source\");\n    if(historyMapping == null)\n        return null;\n    Map<String,Object> historyProperties = historyMapping.getProperties();\n    if(historyProperties == null)\n        return null;\n    Map<String,Object> diff = new HashMap<>();\n    for(Map.Entry<String,Object> entry : historyProperties.entrySet()){\n        if(!properties.containsKey(entry.getKey())){\n            diff.put(entry.getKey(),entry.getValue());\n        }\n    }\n    Mappings newMappings = new Mappings();\n    Mappings.Source newSource = new Mappings.Source();\n    newSource.setProperties(diff);\n    newMappings.setSource(newSource);\n    return newMappings;\n}", "errormessage": "compile error", "error_detail_message": "IndexStructures.java:68: error: incompatible types: Mappings cannot be converted to Map<String,Fields>\n    Map<String,Fields> structures = getMapping(tableName);\n                                              ^\nIndexStructures.java:71: error: incompatible types: Fields cannot be converted to Source\n    Mappings.Source source = structures.get(\"_source\");\n                                           ^\nIndexStructures.java:74: error: cannot find symbol\n    Map<String,Object> properties = source.getProperties();\n                                          ^\n  symbol:   method getProperties()\n  location: variable source of type Source\nIndexStructures.java:78: error: incompatible types: Fields cannot be converted to Map<String,Object>\n    Map<String,Object> historyMapping = structures.get(\"_source\");\n                                                      ^\nIndexStructures.java:81: error: cannot find symbol\n    Map<String,Object> historyProperties = historyMapping.getProperties();\n                                                         ^\n  symbol:   method getProperties()\n  location: variable historyMapping of type Map<String,Object>\nIndexStructures.java:92: error: cannot find symbol\n    newSource.setProperties(diff);\n             ^\n  symbol:   method setProperties(Map<String,Object>)\n  location: variable newSource of type Source\nNote: IndexStructures.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n6 errors\n", "is_pass": false}], "docstring": "/** \n * Returns mappings with fields that not exist in the input mappings. The input mappings should be history mapping from current index. Do not return _source config to avoid current index update conflict.\n */\n", "method_name": "diffStructure", "codes": ["public Mappings diffStructure(String tableName,Mappings mappings){\n    Map<String,Fields> structures = getMapping(tableName);\n    if(structures == null)\n        return null;\n    Mappings.Source source = structures.get(\"_source\");\n    if(source == null)\n        return null;\n    Map<String,Object> properties = source.getProperties();\n    if(properties == null)\n        return null;\n    Fields fields = new Fields(mappings);\n    Map<String,Object> historyMapping = structures.get(\"_source\");\n    if(historyMapping == null)\n        return null;\n    Map<String,Object> historyProperties = historyMapping.getProperties();\n    if(historyProperties == null)\n        return null;\n    Map<String,Object> diff = new HashMap<>();\n    for(Map.Entry<String,Object> entry : historyProperties.entrySet()){\n        if(!properties.containsKey(entry.getKey())){\n            diff.put(entry.getKey(),entry.getValue());\n        }\n    }\n    Mappings newMappings = new Mappings();\n    Mappings.Source newSource = new Mappings.Source();\n    newSource.setProperties(diff);\n    newMappings.setSource(newSource);\n    return newMappings;\n}"], "code_level": "plib_runnable", "_id": "636767de1a6d9265ec018706", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructures_diffStructure.java"}
{"generate_results": [{"generate_code": "static long compressTimeBucket(long timeBucket,int dayStep){\n    long compressedTimeBucket = timeBucket - (timeBucket % (1000 * 60 * 60 * 24 * dayStep));\n    return compressedTimeBucket;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Follow the dayStep to re-format the time bucket literal long value. Such as, in dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123\n */\n", "method_name": "compressTimeBucket", "codes": ["static long compressTimeBucket(long timeBucket,int dayStep){\n    long compressedTimeBucket = timeBucket - (timeBucket % (1000 * 60 * 60 * 24 * dayStep));\n    return compressedTimeBucket;\n}"], "code_level": "project_runnable", "_id": "636767dc1a6d9265ec0186be", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/target/classes/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils_compressTimeBucket.class"}
{"generate_results": [{"generate_code": "private boolean containsAllFields(Fields fields){\n    return properties.entrySet().stream()\n            .allMatch(entry -> fields.contains(entry.getKey()));\n}", "errormessage": "compile error", "error_detail_message": "IndexStructures.java:121: error: class, interface, enum, or record expected\n    public boolean containsMapping(String tableName, Mappings mappings) {\n           ^\nIndexStructures.java:125: error: class, interface, enum, or record expected\n        }\n        ^\nIndexStructures.java:130: error: class, interface, enum, or record expected\n    }\n    ^\nIndexStructures.java:135: error: class, interface, enum, or record expected\n    public boolean compareIndexSetting(String tableName, Map<String, Object> settings) {\n           ^\nIndexStructures.java:139: error: class, interface, enum, or record expected\n        }\n        ^\nIndexStructures.java:144: error: class, interface, enum, or record expected\n    }\n    ^\nIndexStructures.java:228: error: class, interface, enum, or record expected\n}\n^\n7 errors\n", "is_pass": false}], "docstring": "/** \n * Returns ture when the input fields have already been stored in the properties.\n */\n", "method_name": "containsAllFields", "codes": ["private boolean containsAllFields(Fields fields){\n    return properties.entrySet().stream()\n            .allMatch(entry -> fields.contains(entry.getKey()));\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186c6", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/IndexStructures_containsAllFields.java"}
{"generate_results": [{"generate_code": "public void addNewTarget(Channels channels,IConsumer consumer){\n    consumeTargets.add(new Group(channels,consumer));\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Add a new target channels.\n */\n", "method_name": "addNewTarget", "codes": ["public void addNewTarget(Channels channels,IConsumer consumer){\n    consumeTargets.add(new Group(channels,consumer));\n}"], "code_level": "plib_runnable", "_id": "636767dd1a6d9265ec0186e5", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-library/library-datacarrier-queue/target/classes/org/apache/skywalking/oap/server/library/datacarrier/consumer/MultipleChannelsConsumer_addNewTarget.class"}
{"generate_results": [{"generate_code": "public void init(){\n    File dir = new File(analyzeResultDist);\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * initialize config, such as check dist path\n */\n", "method_name": "init", "codes": ["public void init(){\n    File dir = new File(analyzeResultDist);\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n}"], "code_level": "slib_runnable", "_id": "636767dc1a6d9265ec0186cb", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/target/classes/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig_init.class"}
{"generate_results": [{"generate_code": "public List<SequenceRange> buildSequenceRanges(){\n    List<SequenceRange> sequenceRanges = new ArrayList<>();\n    int currentMin = minSequence;\n    int currentMax = currentMin + SEQUENCE_RANGE_BATCH_SIZE - 1;\n    while(currentMax < maxSequence){\n        sequenceRanges.add(new SequenceRange(currentMin,currentMax));\n        currentMin = currentMax + 1;\n        currentMax = currentMin + SEQUENCE_RANGE_BATCH_SIZE - 1;\n        if(currentMax > maxSequence){\n            currentMax = maxSequence;\n        }\n    }\n    sequenceRanges.add(new SequenceRange(currentMin,maxSequence));\n    return sequenceRanges;\n}", "errormessage": "compile error", "error_detail_message": "ProfiledBasicInfo.java:76: error: cannot find symbol\n        List<BasicTrace> taskTraces = taskQueryService.getTaskTraces(config.getTaskId());\n                                                                           ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:77: error: cannot find symbol\n        BasicTrace profiledTrace = taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n                                                                                                  ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:79: error: cannot find symbol\n            throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId()\n                                                                                                         ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:80: error: cannot find symbol\n                    + \", segment id: \" + config.getTraceId() + \", current task total profiled trace count is \" + taskTraces.size());\n                                               ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:93: error: cannot find symbol\n        Trace trace = traceQueryService.queryTrace(config.getTraceId());\n                                                         ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\nProfiledBasicInfo.java:114: error: cannot find symbol\n        File file = new File(config.getAnalyzeResultDist() + File.separator + \"basic.yml\");\n                                   ^\n  symbol:   method getAnalyzeResultDist()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:47: error: cannot find symbol\n        config.setTaskId(args[0]);\n              ^\n  symbol:   method setTaskId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:48: error: cannot find symbol\n        config.setTraceId(args[1]);\n              ^\n  symbol:   method setTraceId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:49: error: cannot find symbol\n        config.setAnalyzeResultDist(args[2]);\n              ^\n  symbol:   method setAnalyzeResultDist(String)\n  location: variable config of type ExporterConfig\n9 errors\n", "is_pass": false}], "docstring": "/** \n * build current profiles segment snapshot search sequence ranges\n */\n", "method_name": "buildSequenceRanges", "codes": ["public List<SequenceRange> buildSequenceRanges(){\n    List<SequenceRange> sequenceRanges = new ArrayList<>();\n    int currentMin = minSequence;\n    int currentMax = currentMin + SEQUENCE_RANGE_BATCH_SIZE - 1;\n    while(currentMax < maxSequence){\n        sequenceRanges.add(new SequenceRange(currentMin,currentMax));\n        currentMin = currentMax + 1;\n        currentMax = currentMin + SEQUENCE_RANGE_BATCH_SIZE - 1;\n        if(currentMax > maxSequence){\n            currentMax = maxSequence;\n        }\n    }\n    sequenceRanges.add(new SequenceRange(currentMin,maxSequence));\n    return sequenceRanges;\n}"], "code_level": "class_runnable", "_id": "636767de1a6d9265ec018726", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo_buildSequenceRanges.java"}
{"generate_results": [{"generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    try (FileInputStream fis = new FileInputStream(file);\n         BufferedInputStream bis = new BufferedInputStream(fis)) {\n        ThreadSnapshot threadSnapshot = new ThreadSnapshot();\n        long lastEndTime = 0;\n        for (ProfileAnalyzeTimeRange range : timeRanges) {\n            long startTime = range.getStartTime();\n            long endTime = range.getEndTime();\n            if (startTime > endTime) {\n                throw new IllegalArgumentException(\"Invalid time range: \" + startTime + \" > \" + endTime);\n            }\n            if (startTime > lastEndTime) {\n                throw new IllegalArgumentException(\"Invalid time range: \" + startTime + \" > \" + lastEndTime);\n            }\n            long filePosition = bis.skip(lastEndTime - startTime);\n            threadSnapshot.readFrom(bis, filePosition);\n            threadSnapshots.add(threadSnapshot);\n            lastEndTime = endTime;\n        }\n    }\n    return threadSnapshots;\n}", "errormessage": "compile error", "error_detail_message": "ProfileSnapshotDumper.java:53: error: cannot find symbol\n        String segmentId = basicInfo.getSegmentId();\n                                    ^\n  symbol:   method getSegmentId()\n  location: variable basicInfo of type ProfiledBasicInfo\nProfileSnapshotDumper.java:54: error: cannot find symbol\n        File snapshotFile = new File(basicInfo.getConfig().getAnalyzeResultDist() + File.separator + \"snapshot.data\");\n                                              ^\n  symbol:   method getConfig()\n  location: variable basicInfo of type ProfiledBasicInfo\nProfileSnapshotDumper.java:86: error: cannot find symbol\n                return threadSnapshotQueryDAO.queryRecords(segmentId, sequenceRange.getMin(), sequenceRange.getMax());\n                                                                                   ^\n  symbol:   method getMin()\n  location: variable sequenceRange of type SequenceRange\nProfileSnapshotDumper.java:86: error: cannot find symbol\n                return threadSnapshotQueryDAO.queryRecords(segmentId, sequenceRange.getMin(), sequenceRange.getMax());\n                                                                                                           ^\n  symbol:   method getMax()\n  location: variable sequenceRange of type SequenceRange\nProfileSnapshotDumper.java:99: error: cannot find symbol\n         BufferedInputStream bis = new BufferedInputStream(fis)) {\n         ^\n  symbol:   class BufferedInputStream\n  location: class ProfileSnapshotDumper\nProfileSnapshotDumper.java:99: error: cannot find symbol\n         BufferedInputStream bis = new BufferedInputStream(fis)) {\n                                       ^\n  symbol:   class BufferedInputStream\n  location: class ProfileSnapshotDumper\nProfileSnapshotDumper.java:100: error: constructor ThreadSnapshot in class ThreadSnapshot cannot be applied to given types;\n        ThreadSnapshot threadSnapshot = new ThreadSnapshot();\n                                        ^\n  required: no arguments\n  found:    no arguments\n  reason: ThreadSnapshot() has private access in ThreadSnapshot\nProfileSnapshotDumper.java:103: error: cannot find symbol\n            long startTime = range.getStartTime();\n                                  ^\n  symbol:   method getStartTime()\n  location: variable range of type ProfileAnalyzeTimeRange\nProfileSnapshotDumper.java:104: error: cannot find symbol\n            long endTime = range.getEndTime();\n                                ^\n  symbol:   method getEndTime()\n  location: variable range of type ProfileAnalyzeTimeRange\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:69: error: cannot find symbol\n        data.setConfig(config);\n            ^\n  symbol:   method setConfig(ExporterConfig)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:76: error: cannot find symbol\n        List<BasicTrace> taskTraces = taskQueryService.getTaskTraces(config.getTaskId());\n                                                                           ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:77: error: cannot find symbol\n        BasicTrace profiledTrace = taskTraces.stream().filter(t -> t.getTraceIds().contains(config.getTraceId())).findFirst().orElse(null);\n                                                                                                  ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:79: error: cannot find symbol\n            throw new IllegalArgumentException(\"Cannot fount profiled segment in current task: \" + config.getTaskId()\n                                                                                                         ^\n  symbol:   method getTaskId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:80: error: cannot find symbol\n                    + \", segment id: \" + config.getTraceId() + \", current task total profiled trace count is \" + taskTraces.size());\n                                               ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:87: error: cannot find symbol\n        data.setSegmentId(segmentId);\n            ^\n  symbol:   method setSegmentId(String)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:88: error: cannot find symbol\n        data.setSegmentStartTime(startTime);\n            ^\n  symbol:   method setSegmentStartTime(long)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:89: error: cannot find symbol\n        data.setSegmentEndTime(endTime);\n            ^\n  symbol:   method setSegmentEndTime(long)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:90: error: cannot find symbol\n        data.setDuration(profiledTrace.getDuration());\n            ^\n  symbol:   method setDuration(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:93: error: cannot find symbol\n        Trace trace = traceQueryService.queryTrace(config.getTraceId());\n                                                         ^\n  symbol:   method getTraceId()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:98: error: cannot find symbol\n        data.setProfiledSegmentSpans(profiledSegmentSpans);\n            ^\n  symbol:   method setProfiledSegmentSpans(List<Span>)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:103: error: cannot find symbol\n        data.setMinSequence(minSequence);\n            ^\n  symbol:   method setMinSequence(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:104: error: cannot find symbol\n        data.setMaxSequence(maxSequence);\n            ^\n  symbol:   method setMaxSequence(int)\n  location: variable data of type ProfiledBasicInfo\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java:114: error: cannot find symbol\n        File file = new File(config.getAnalyzeResultDist() + File.separator + \"basic.yml\");\n                                   ^\n  symbol:   method getAnalyzeResultDist()\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:47: error: cannot find symbol\n        config.setTaskId(args[0]);\n              ^\n  symbol:   method setTaskId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:48: error: cannot find symbol\n        config.setTraceId(args[1]);\n              ^\n  symbol:   method setTraceId(String)\n  location: variable config of type ExporterConfig\n/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ExporterConfig.java:49: error: cannot find symbol\n        config.setAnalyzeResultDist(args[2]);\n              ^\n  symbol:   method setAnalyzeResultDist(String)\n  location: variable config of type ExporterConfig\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n26 errors\n", "is_pass": false}], "docstring": "/** \n * load thread snapshots in appointing time range\n */\n", "method_name": "parseFromFileWithTimeRange", "codes": ["public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    try (FileInputStream fis = new FileInputStream(file);\n         BufferedInputStream bis = new BufferedInputStream(fis)) {\n        ThreadSnapshot threadSnapshot = new ThreadSnapshot();\n        long lastEndTime = 0;\n        for (ProfileAnalyzeTimeRange range : timeRanges) {\n            long startTime = range.getStartTime();\n            long endTime = range.getEndTime();\n            if (startTime > endTime) {\n                throw new IllegalArgumentException(\"Invalid time range: \" + startTime + \" > \" + endTime);\n            }\n            if (startTime > lastEndTime) {\n                throw new IllegalArgumentException(\"Invalid time range: \" + startTime + \" > \" + lastEndTime);\n            }\n            long filePosition = bis.skip(lastEndTime - startTime);\n            threadSnapshot.readFrom(bis, filePosition);\n            threadSnapshots.add(threadSnapshot);\n            lastEndTime = endTime;\n        }\n    }\n    return threadSnapshots;\n}"], "code_level": "project_runnable", "_id": "636767e11a6d9265ec018790", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfileSnapshotDumper_parseFromFileWithTimeRange.java"}
{"generate_results": [{"generate_code": "private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    JsonObject jsonObject = new JsonObject();\n    for(KeyStringValuePair property : properties){\n        jsonObject.addProperty(property.getKey(),property.getValue());\n    }\n    return jsonObject;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Convert process properties to source data\n */\n", "method_name": "convertProperties", "codes": ["private JsonObject convertProperties(List<KeyStringValuePair> properties){\n    JsonObject jsonObject = new JsonObject();\n    for(KeyStringValuePair property : properties){\n        jsonObject.addProperty(property.getKey(),property.getValue());\n    }\n    return jsonObject;\n}"], "code_level": "project_runnable", "_id": "636767e01a6d9265ec018764", "project_name": "skywalking-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/skywalking/oap-server/server-receiver-plugin/skywalking-ebpf-receiver-plugin/target/classes/org/apache/skywalking/oap/server/receiver/ebpf/provider/handler/EBPFProcessServiceHandler_convertProperties.class"}
{"generate_results": [{"generate_code": "private int pop(){\n    int result = outputStack[outputStackTop--];\n    return result;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100\n\tat com.alibaba.fastjson2.internal.asm.Frame.push(Frame.java:517)\n\tat com.alibaba.fastjson2.internal.asm.Frame_pop.main(Frame_pop.java:38)\n", "is_pass": false}], "docstring": "/** \n * Pops an abstract type from the output frame stack and returns its value.\n * @return the abstract type that has been popped from the output frame stack.\n */\n", "method_name": "pop", "codes": ["private int pop(){\n    int result = outputStack[outputStackTop--];\n    return result;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c2", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    currentFrame = new int[3];\n    currentFrame[0] = offset;\n    currentFrame[1] = numLocal;\n    currentFrame[2] = numStack;\n    return 3;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Starts the visit of a new stack map frame, stored in  {@link #currentFrame}.\n * @param offset   the bytecode offset of the instruction to which the frame corresponds.\n * @param numLocal the number of local variables in the frame.\n * @param numStack the number of stack elements in the frame.\n * @return the index of the next element to be written in this frame.\n */\n", "method_name": "visitFrameStart", "codes": ["int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    currentFrame = new int[3];\n    currentFrame[0] = offset;\n    currentFrame[1] = numLocal;\n    currentFrame[2] = numStack;\n    return 3;\n}"], "code_level": "self_contained", "_id": "636766aa1a6d9265ec0175ce", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/MethodWriter_visitFrameStart.class"}
{"generate_results": [{"generate_code": "private void enlarge(final int size){\n    byte[] newData = new byte[data.length + size];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Enlarges this byte vector so that it can receive 'size' more bytes.\n * @param size number of additional bytes that this byte vector should be able to receive.\n */\n", "method_name": "enlarge", "codes": ["private void enlarge(final int size){\n    byte[] newData = new byte[data.length + size];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}"], "code_level": "self_contained", "_id": "636766a91a6d9265ec0175c1", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/ByteVector_enlarge.class"}
{"generate_results": [{"generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if(byteArrayValue == null){\n        throw new IllegalArgumentException(\"byteArrayValue cannot be null\");\n    }\n    if(byteOffset < 0 || byteOffset > byteArrayValue.length){\n        throw new IllegalArgumentException(\"byteOffset must be between 0 and byteArrayValue.length\");\n    }\n    if(byteLength < 0 || byteLength > byteArrayValue.length - byteOffset){\n        throw new IllegalArgumentException(\"byteLength must be between 0 and byteArrayValue.length - byteOffset\");\n    }\n    if(byteLength == 0){\n        return this;\n    }\n    if(data == null){\n        data = new byte[10];\n        length = 0;\n    }else if(length + byteLength > data.length){\n        enlarge(length + byteLength);\n    }\n    System.arraycopy(byteArrayValue,byteOffset,data,length,byteLength);\n    length += byteLength;\n    return this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} nullbytes into this byte vector.\n * @param byteOffset     index of the first byte of byteArrayValue that must be copied.\n * @param byteLength     number of bytes of byteArrayValue that must be copied.\n * @return this byte vector.\n */\n", "method_name": "putByteArray", "codes": ["public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if(byteArrayValue == null){\n        throw new IllegalArgumentException(\"byteArrayValue cannot be null\");\n    }\n    if(byteOffset < 0 || byteOffset > byteArrayValue.length){\n        throw new IllegalArgumentException(\"byteOffset must be between 0 and byteArrayValue.length\");\n    }\n    if(byteLength < 0 || byteLength > byteArrayValue.length - byteOffset){\n        throw new IllegalArgumentException(\"byteLength must be between 0 and byteArrayValue.length - byteOffset\");\n    }\n    if(byteLength == 0){\n        return this;\n    }\n    if(data == null){\n        data = new byte[10];\n        length = 0;\n    }else if(length + byteLength > data.length){\n        enlarge(length + byteLength);\n    }\n    System.arraycopy(byteArrayValue,byteOffset,data,length,byteLength);\n    length += byteLength;\n    return this;\n}"], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175ae", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/ByteVector_putByteArray.class"}
{"generate_results": [{"generate_code": "private void pop(final int elements){\n    if(outputStackTop - outputStackStart < elements){\n        throw new RuntimeException(\"Not enough elements on stack\");\n    }\n    outputStackTop -= elements;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.RuntimeException: Not enough elements on stack\n\tat com.alibaba.fastjson2.internal.asm.Frame.pop(Frame.java:633)\n\tat com.alibaba.fastjson2.internal.asm.Frame.pop(Frame.java:645)\n\tat com.alibaba.fastjson2.internal.asm.Frame_pop.main(Frame_pop.java:16)\n", "is_pass": false}], "docstring": "/** \n * Pops the given number of abstract types from the output frame stack.\n * @param elements the number of abstract types that must be popped.\n */\n", "method_name": "pop", "codes": ["private void pop(final int elements){\n    if(outputStackTop - outputStackStart < elements){\n        throw new RuntimeException(\"Not enough elements on stack\");\n    }\n    outputStackTop -= elements;\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec017586", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/Frame_pop.class"}
{"generate_results": [{"generate_code": "public ByteVector putInt(final int intValue){\n    byte[] bytes = new byte[4];\n    bytes[3] = (byte)((intValue >> 24) & 0xFF);\n    bytes[2] = (byte)((intValue >> 16) & 0xFF);\n    bytes[1] = (byte)((intValue >> 8) & 0xFF);\n    bytes[0] = (byte)(intValue & 0xFF);\n    putByteArray(bytes,0,4);\n    return this;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param intValue an int.\n * @return this byte vector.\n */\n", "method_name": "putInt", "codes": ["public ByteVector putInt(final int intValue){\n    byte[] bytes = new byte[4];\n    bytes[3] = (byte)((intValue >> 24) & 0xFF);\n    bytes[2] = (byte)((intValue >> 16) & 0xFF);\n    bytes[1] = (byte)((intValue >> 8) & 0xFF);\n    bytes[0] = (byte)(intValue & 0xFF);\n    putByteArray(bytes,0,4);\n    return this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017596", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/target/classes/com/alibaba/fastjson2/internal/asm/ByteVector_putInt.class"}
{"generate_results": [{"generate_code": "private void pop(final String descriptor){\n    if(descriptor.charAt(0) == 'B'){\n        pop(Integer.parseInt(descriptor.substring(1), 2));\n    }\n    else if(descriptor.charAt(0) == 'C'){\n        pop(Integer.parseInt(descriptor.substring(1), 2));\n    }\n    else if(descriptor.charAt(0) == 'D'){\n        pop(Double.parseDouble(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'F'){\n        pop(Float.parseFloat(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'J'){\n        pop(Long.parseLong(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'S'){\n        pop(Short.parseShort(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'I'){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'L'){\n        pop(Long.class.cast(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '[' || descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1, descriptor.length()-1)));\n    }\n    else if(descriptor.charAt(0) == 'L'){\n        pop(Long.class.cast(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'M'){\n        pop(new BigDecimal(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'D'){\n        pop(Double.parseDouble(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'F'){\n        pop(Float.parseFloat(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'J'){\n        pop(Long.parseLong(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'S'){\n        pop(Short.parseShort(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'I'){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '[' || descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1, descriptor.length()-1)));\n    }\n    else if(descriptor.charAt(0) == 'L'){\n        pop(Long.class.cast(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'M'){\n        pop(new BigDecimal(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'D'){\n        pop(Double.parseDouble(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'F'){\n        pop(Float.parseFloat(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'J'){\n        pop(Long.parseLong(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'S'){\n        pop(Short.parseShort(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'I'){\n        pop(Integer.parseInt(descriptor.substring(1)));\n   ", "errormessage": "compile error", "error_detail_message": "Frame.java:736: error: illegal start of expression\n    public void addInitializedType(final int abstractType) {\n    ^\n1 error\n", "is_pass": false}], "docstring": "/** \n * Pops as many abstract types from the output frame stack as described by the given descriptor.\n * @param descriptor a type or method descriptor (in which case its argument types are popped).\n */\n", "method_name": "pop", "codes": ["private void pop(final String descriptor){\n    if(descriptor.charAt(0) == 'B'){\n        pop(Integer.parseInt(descriptor.substring(1), 2));\n    }\n    else if(descriptor.charAt(0) == 'C'){\n        pop(Integer.parseInt(descriptor.substring(1), 2));\n    }\n    else if(descriptor.charAt(0) == 'D'){\n        pop(Double.parseDouble(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'F'){\n        pop(Float.parseFloat(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'J'){\n        pop(Long.parseLong(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'S'){\n        pop(Short.parseShort(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'I'){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'L'){\n        pop(Long.class.cast(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '[' || descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1, descriptor.length()-1)));\n    }\n    else if(descriptor.charAt(0) == 'L'){\n        pop(Long.class.cast(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'M'){\n        pop(new BigDecimal(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'D'){\n        pop(Double.parseDouble(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'F'){\n        pop(Float.parseFloat(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'J'){\n        pop(Long.parseLong(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'S'){\n        pop(Short.parseShort(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'I'){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '[' || descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1, descriptor.length()-1)));\n    }\n    else if(descriptor.charAt(0) == 'L'){\n        pop(Long.class.cast(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == '('){\n        pop(Integer.parseInt(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'M'){\n        pop(new BigDecimal(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'D'){\n        pop(Double.parseDouble(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'F'){\n        pop(Float.parseFloat(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'J'){\n        pop(Long.parseLong(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'S'){\n        pop(Short.parseShort(descriptor.substring(1)));\n    }\n    else if(descriptor.charAt(0) == 'I'){\n        pop(Integer.parseInt(descriptor.substring(1)));\n   "], "code_level": "class_runnable", "_id": "636766a91a6d9265ec0175c4", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/Frame_pop.java"}
{"generate_results": [{"generate_code": "final ByteVector put11(final int byteValue1,final int byteValue2){\n    if(data == null){\n        data = new byte[2];\n    }else if(index + 2 > data.length){\n        enlarge(2);\n    }\n    data[index++] = (byte)byteValue1;\n    data[index++] = (byte)byteValue2;\n    return this;\n}", "errormessage": "compile error", "error_detail_message": "ByteVector.java:82: error: cannot find symbol\n    }else if(index + 2 > data.length){\n             ^\n  symbol:   variable index\n  location: class ByteVector\nByteVector.java:85: error: cannot find symbol\n    data[index++] = (byte)byteValue1;\n         ^\n  symbol:   variable index\n  location: class ByteVector\nByteVector.java:86: error: cannot find symbol\n    data[index++] = (byte)byteValue2;\n         ^\n  symbol:   variable index\n  location: class ByteVector\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n * @param byteValue1 a byte.\n * @param byteValue2 another byte.\n * @return this byte vector.\n */\n", "method_name": "put11", "codes": ["final ByteVector put11(final int byteValue1,final int byteValue2){\n    if(data == null){\n        data = new byte[2];\n    }else if(index + 2 > data.length){\n        enlarge(2);\n    }\n    data[index++] = (byte)byteValue1;\n    data[index++] = (byte)byteValue2;\n    return this;\n}"], "code_level": "class_runnable", "_id": "636766a81a6d9265ec017595", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/asm/ByteVector_put11.java"}
{"generate_results": [{"generate_code": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    if(features == null || features.length == 0){\n        features = (JSONWriter.Feature[]) NONE_DIRECT_FEATURES.clone();\n    }\n    if(this.writer == null){\n        this.writer = new JSONWriter(this.buffer,features);\n    }\n    this.writer.write(this.content);\n    return this.buffer.toString();\n}", "errormessage": "compile error", "error_detail_message": "JSONArray.java:894: error: long cannot be dereferenced\n        features = (JSONWriter.Feature[]) NONE_DIRECT_FEATURES.clone();\n                                                              ^\nJSONArray.java:896: error: cannot find symbol\n    if(this.writer == null){\n           ^\n  symbol: variable writer\nJSONArray.java:897: error: cannot find symbol\n        this.writer = new JSONWriter(this.buffer,features);\n            ^\n  symbol: variable writer\nJSONArray.java:897: error: cannot find symbol\n        this.writer = new JSONWriter(this.buffer,features);\n                                         ^\n  symbol: variable buffer\nJSONArray.java:897: error: JSONWriter is abstract; cannot be instantiated\n        this.writer = new JSONWriter(this.buffer,features);\n                      ^\nJSONArray.java:899: error: cannot find symbol\n    this.writer.write(this.content);\n                          ^\n  symbol: variable content\nJSONArray.java:899: error: cannot find symbol\n    this.writer.write(this.content);\n        ^\n  symbol: variable writer\nJSONArray.java:900: error: cannot find symbol\n    return this.buffer.toString();\n               ^\n  symbol: variable buffer\n8 errors\n", "is_pass": false}], "docstring": "/** \n * Serialize to JSON  {@link String}\n * @param features features to be enabled in serialization\n * @return JSON {@link String}\n */\n", "method_name": "toString", "codes": ["@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    if(features == null || features.length == 0){\n        features = (JSONWriter.Feature[]) NONE_DIRECT_FEATURES.clone();\n    }\n    if(this.writer == null){\n        this.writer = new JSONWriter(this.buffer,features);\n    }\n    this.writer.write(this.content);\n    return this.buffer.toString();\n}"], "code_level": "self_contained", "_id": "636766a81a6d9265ec01757b", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/JSONArray_toString.java"}
{"generate_results": [{"generate_code": "public static int nextPrime(int desiredCapacity){\n    if(desiredCapacity < 0 || desiredCapacity >= primeCapacities.length){\n        throw new IllegalArgumentException(\"desiredCapacity out of bounds\");\n    }\n    if(primeCapacities[desiredCapacity] == -1){\n        int nextPrime = largestPrime + 1;\n        while(!isPrime(nextPrime)){\n            nextPrime++;\n        }\n        primeCapacities[desiredCapacity] = nextPrime;\n        largestPrime = nextPrime;\n    }\n    return primeCapacities[desiredCapacity];\n}", "errormessage": "compile error", "error_detail_message": "PrimeFinder.java:153: error: cannot find symbol\n        while(!isPrime(nextPrime)){\n               ^\n  symbol:   method isPrime(int)\n  location: class PrimeFinder\nPrimeFinder.java:157: error: cannot assign a value to final variable largestPrime\n        largestPrime = nextPrime;\n        ^\n2 errors\n", "is_pass": false}], "docstring": "/** \n * Returns a prime number which is <code>&gt;= desiredCapacity</code> and very close to <code>desiredCapacity</code> (within 11% if <code>desiredCapacity &gt;= 1000</code>).\n * @param desiredCapacity the capacity desired by the user.\n * @return the capacity which should be used for a hashtable.\n */\n", "method_name": "nextPrime", "codes": ["public static int nextPrime(int desiredCapacity){\n    if(desiredCapacity < 0 || desiredCapacity >= primeCapacities.length){\n        throw new IllegalArgumentException(\"desiredCapacity out of bounds\");\n    }\n    if(primeCapacities[desiredCapacity] == -1){\n        int nextPrime = largestPrime + 1;\n        while(!isPrime(nextPrime)){\n            nextPrime++;\n        }\n        primeCapacities[desiredCapacity] = nextPrime;\n        largestPrime = nextPrime;\n    }\n    return primeCapacities[desiredCapacity];\n}"], "code_level": "slib_runnable", "_id": "636766a81a6d9265ec01758e", "project_name": "fastjson2-main", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/fastjson2/core/src/main/java/com/alibaba/fastjson2/internal/trove/impl/PrimeFinder_nextPrime.java"}
{"generate_results": [{"generate_code": "private static int digitValue(final char c){\n    if(c >= '0' && c <= '9'){\n        return c - '0';\n    }\n    if(c >= 'a' && c <= 'f'){\n        return c - 'a' + 10;\n    }\n    if(c >= 'A' && c <= 'F'){\n        return c - 'A' + 10;\n    }\n    throw new IllegalArgumentException(\"Invalid character: \" + c);\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid character: !\n\tat io.protostuff.parser.TextFormat.digitValue(TextFormat.java:310)\n\tat io.protostuff.parser.TextFormat_digitValue.main(TextFormat_digitValue.java:11)\n", "is_pass": false}], "docstring": "/** \n * Interpret a character as a digit (in any base up to 36) and return the numeric value. This is like {@code Character.digit()} but we don't accept non-ASCII digits.\n */\n", "method_name": "digitValue", "codes": ["private static int digitValue(final char c){\n    if(c >= '0' && c <= '9'){\n        return c - '0';\n    }\n    if(c >= 'a' && c <= 'f'){\n        return c - 'a' + 10;\n    }\n    if(c >= 'A' && c <= 'F'){\n        return c - 'A' + 10;\n    }\n    throw new IllegalArgumentException(\"Invalid character: \" + c);\n}"], "code_level": "self_contained", "_id": "636767a61a6d9265ec0185b7", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-parser/target/classes/io/protostuff/parser/TextFormat_digitValue.class"}
{"generate_results": [{"generate_code": "private static boolean isHex(final char c){\n    return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Is this a hex digit?\n */\n", "method_name": "isHex", "codes": ["private static boolean isHex(final char c){\n    return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');\n}"], "code_level": "self_contained", "_id": "636767ab1a6d9265ec018676", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-parser/target/classes/io/protostuff/parser/TextFormat_isHex.class"}
{"generate_results": [{"generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    ProtobufOutput protobufOutput = new ProtobufOutput(out,schema,buffer);\n    protobufOutput.writeMessage(message);\n    return protobufOutput.getWrittenBytes();\n}", "errormessage": "compile error", "error_detail_message": "ProtobufIOUtil.java:237: error: no suitable constructor found for ProtobufOutput(OutputStream,Schema<T>,LinkedBuffer)\n    ProtobufOutput protobufOutput = new ProtobufOutput(out,schema,buffer);\n                                    ^\n    constructor ProtobufOutput.ProtobufOutput(LinkedBuffer) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor ProtobufOutput.ProtobufOutput(LinkedBuffer,int) is not applicable\n      (actual and formal argument lists differ in length)\n  where T is a type-variable:\n    T extends Object declared in method <T>writeDelimitedTo(OutputStream,T,Schema<T>,LinkedBuffer)\nProtobufIOUtil.java:238: error: cannot find symbol\n    protobufOutput.writeMessage(message);\n                  ^\n  symbol:   method writeMessage(T)\n  location: variable protobufOutput of type ProtobufOutput\n  where T is a type-variable:\n    T extends Object declared in method <T>writeDelimitedTo(OutputStream,T,Schema<T>,LinkedBuffer)\nProtobufIOUtil.java:239: error: cannot find symbol\n    return protobufOutput.getWrittenBytes();\n                         ^\n  symbol:   method getWrittenBytes()\n  location: variable protobufOutput of type ProtobufOutput\n3 errors\n", "is_pass": false}], "docstring": "/** \n * Serializes the  {@code message}, prefixed with its length, into an  {@link OutputStream}.\n * @return the size of the message\n */\n", "method_name": "writeDelimitedTo", "codes": ["public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    ProtobufOutput protobufOutput = new ProtobufOutput(out,schema,buffer);\n    protobufOutput.writeMessage(message);\n    return protobufOutput.getWrittenBytes();\n}"], "code_level": "project_runnable", "_id": "636767a41a6d9265ec018582", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/ProtobufIOUtil_writeDelimitedTo.java"}
{"generate_results": [{"generate_code": "public boolean equals(final byte[] data,int offset,final int len){\n    if (data == null) {\n        return false;\n    }\n    if (offset < 0 || len < 0 || offset + len > data.length) {\n        throw new IndexOutOfBoundsException();\n    }\n    if (this.data.length != data.length) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (this.data[offset + i] != data[offset + i]) {\n            return false;\n        }\n    }\n    return true;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns true if the contents of the internal array and the provided array match.\n */\n", "method_name": "equals", "codes": ["public boolean equals(final byte[] data,int offset,final int len){\n    if (data == null) {\n        return false;\n    }\n    if (offset < 0 || len < 0 || offset + len > data.length) {\n        throw new IndexOutOfBoundsException();\n    }\n    if (this.data.length != data.length) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (this.data[offset + i] != data[offset + i]) {\n            return false;\n        }\n    }\n    return true;\n}"], "code_level": "class_runnable", "_id": "636767a51a6d9265ec01859d", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/ByteString_equals.class"}
{"generate_results": [{"generate_code": "public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    int size = 0;\n    int i = index;\n    while(i < len){\n        final char c = str.charAt(i);\n        if((c & 0x80) == 0){\n            size++;\n            i++;\n        }else if((c & 0xE0) == 0xC0){\n            size++;\n            i++;\n        }else if((c & 0xF0) == 0xE0){\n            size++;\n            i++;\n        }else if((c & 0xF8) == 0xF0){\n            size++;\n            i++;\n        }else{\n            throw new IllegalArgumentException(\"Invalid character: \" + c);\n        }\n    }\n    return size;\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid character: \u805b\n\tat io.protostuff.StringSerializer.computeUTF8Size(StringSerializer.java:335)\n\tat io.protostuff.StringSerializer_computeUTF8Size.main(StringSerializer_computeUTF8Size.java:10)\n", "is_pass": false}], "docstring": "/** \n * Computes the size of the utf8 string beginning at the specified  {@code index} with the specified {@code length}.\n */\n", "method_name": "computeUTF8Size", "codes": ["public static int computeUTF8Size(final CharSequence str,final int index,final int len){\n    int size = 0;\n    int i = index;\n    while(i < len){\n        final char c = str.charAt(i);\n        if((c & 0x80) == 0){\n            size++;\n            i++;\n        }else if((c & 0xE0) == 0xC0){\n            size++;\n            i++;\n        }else if((c & 0xF0) == 0xE0){\n            size++;\n            i++;\n        }else if((c & 0xF8) == 0xF0){\n            size++;\n            i++;\n        }else{\n            throw new IllegalArgumentException(\"Invalid character: \" + c);\n        }\n    }\n    return size;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01856c", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/StringSerializer_computeUTF8Size.class"}
{"generate_results": [{"generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    if(str == null){\n        throw new NullPointerException(\"str is null\");\n    }\n    if(lb == null){\n        throw new NullPointerException(\"lb is null\");\n    }\n    if(session == null){\n        throw new NullPointerException(\"session is null\");\n    }\n    if(str.length() == 0){\n        return lb;\n    }\n    int len = str.length();\n    if(len == 0){\n        return lb;\n    }\n    if(lb.remaining() < len){\n        lb = lb.allocate(len);\n    }\n    lb.putBytes(0, str.toString().getBytes(StandardCharsets.UTF_8));\n    return lb;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the utf8-encoded bytes from the string into the  {@link LinkedBuffer}.\n */\n", "method_name": "writeUTF8", "codes": ["public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    if(str == null){\n        throw new NullPointerException(\"str is null\");\n    }\n    if(lb == null){\n        throw new NullPointerException(\"lb is null\");\n    }\n    if(session == null){\n        throw new NullPointerException(\"session is null\");\n    }\n    if(str.length() == 0){\n        return lb;\n    }\n    int len = str.length();\n    if(len == 0){\n        return lb;\n    }\n    if(lb.remaining() < len){\n        lb = lb.allocate(len);\n    }\n    lb.putBytes(0, str.toString().getBytes(StandardCharsets.UTF_8));\n    return lb;\n}"], "code_level": "project_runnable", "_id": "636767ab1a6d9265ec01867b", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/StringSerializer_writeUTF8.class"}
{"generate_results": [{"generate_code": "public long readRawVarint64() throws IOException {\n    int shift = 0;\n    long result = 0;\n    while (true) {\n        byte b = readByte();\n        result |= ((long) (b & 0x7F)) << shift;\n        if ((b & 0x80) == 0) {\n            return result;\n        }\n        shift += 7;\n    }\n}", "errormessage": "compile error", "error_detail_message": "CodedInput.java:615: error: cannot find symbol\n        byte b = readByte();\n                 ^\n  symbol:   method readByte()\n  location: class CodedInput\n1 error\n", "is_pass": false}], "docstring": "/** \n * Read a raw Varint from the stream.\n */\n", "method_name": "readRawVarint64", "codes": ["public long readRawVarint64() throws IOException {\n    int shift = 0;\n    long result = 0;\n    while (true) {\n        byte b = readByte();\n        result |= ((long) (b & 0x7F)) << shift;\n        if ((b & 0x80) == 0) {\n            return result;\n        }\n        shift += 7;\n    }\n}"], "code_level": "class_runnable", "_id": "636767a41a6d9265ec018572", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/src/main/java/io/protostuff/CodedInput_readRawVarint64.java"}
{"generate_results": [{"generate_code": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    if (node == null) {\n        throw new IllegalArgumentException(\"node cannot be null\");\n    }\n    if (node.buffer == null) {\n        throw new IllegalStateException(\"buffer is not allocated\");\n    }\n    if (node.offset < 0) {\n        throw new IllegalArgumentException(\"offset cannot be negative\");\n    }\n    if (node.start < 0) {\n        throw new IllegalArgumentException(\"start cannot be negative\");\n    }\n    if (node.offset > node.buffer.length) {\n        throw new IllegalArgumentException(\"offset is out of bounds\");\n    }\n    if (node.start > node.offset) {\n        throw new IllegalArgumentException(\"start is out of bounds\");\n    }\n    if (node.start + node.length > node.buffer.length) {\n        throw new IllegalArgumentException(\"length is out of bounds\");\n    }\n    if (node.next != null) {\n        throw new IllegalStateException(\"next buffer is not null\");\n    }\n    if (node.previous != null) {\n        throw new IllegalStateException(\"previous buffer is not null\");\n    }\n    if (node.length == 0) {\n        return 0;\n    }\n    out.write(node.buffer, node.start, node.length);\n    return node.length;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Writes the contents of the  {@link LinkedBuffer} into the {@link DataOutput}.\n * @return the total content size of the buffer.\n */\n", "method_name": "writeTo", "codes": ["public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    if (node == null) {\n        throw new IllegalArgumentException(\"node cannot be null\");\n    }\n    if (node.buffer == null) {\n        throw new IllegalStateException(\"buffer is not allocated\");\n    }\n    if (node.offset < 0) {\n        throw new IllegalArgumentException(\"offset cannot be negative\");\n    }\n    if (node.start < 0) {\n        throw new IllegalArgumentException(\"start cannot be negative\");\n    }\n    if (node.offset > node.buffer.length) {\n        throw new IllegalArgumentException(\"offset is out of bounds\");\n    }\n    if (node.start > node.offset) {\n        throw new IllegalArgumentException(\"start is out of bounds\");\n    }\n    if (node.start + node.length > node.buffer.length) {\n        throw new IllegalArgumentException(\"length is out of bounds\");\n    }\n    if (node.next != null) {\n        throw new IllegalStateException(\"next buffer is not null\");\n    }\n    if (node.previous != null) {\n        throw new IllegalStateException(\"previous buffer is not null\");\n    }\n    if (node.length == 0) {\n        return 0;\n    }\n    out.write(node.buffer, node.start, node.length);\n    return node.length;\n}"], "code_level": "class_runnable", "_id": "636767aa1a6d9265ec01865a", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/LinkedBuffer_writeTo.class"}
{"generate_results": [{"generate_code": "@Override public String readString() throws IOException {\n  int length = readInt32();\n  byte[] bytes = new byte[length];\n  readBytes(ByteBuffer.wrap(bytes));\n  return new String(bytes, \"UTF-8\");\n}", "errormessage": "exec error!", "error_detail_message": "Exception in thread \"main\" java.lang.IllegalArgumentException: newLimit > capacity: (2 > 1)\n\tat java.base/java.nio.Buffer.createLimitException(Buffer.java:395)\n\tat java.base/java.nio.Buffer.limit(Buffer.java:369)\n\tat java.base/java.nio.ByteBuffer.limit(ByteBuffer.java:1529)\n\tat io.protostuff.CodedInput.readBytes(CodedInput.java:290)\n\tat io.protostuff.CodedInput.readString(CodedInput.java:275)\n\tat io.protostuff.CodedInput_readString.main(CodedInput_readString.java:12)\n", "is_pass": false}], "docstring": "/** \n * Read a  {@code string} field value from the stream.\n */\n", "method_name": "readString", "codes": ["@Override public String readString() throws IOException {\n  int length = readInt32();\n  byte[] bytes = new byte[length];\n  readBytes(ByteBuffer.wrap(bytes));\n  return new String(bytes, \"UTF-8\");\n}"], "code_level": "project_runnable", "_id": "636767a31a6d9265ec018552", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/CodedInput_readString.class"}
{"generate_results": [{"generate_code": "public final byte[] toByteArray(){\n    byte[] array = new byte[getSize()];\n    int offset = 0;\n    for(LinkedBuffer lb : this){\n        byte[] b = lb.toByteArray(offset);\n        System.arraycopy(b, 0, array, offset, b.length);\n        offset += b.length;\n    }\n    return array;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Returns a single byte array containg all the contents written to the buffer(s).\n */\n", "method_name": "toByteArray", "codes": ["public final byte[] toByteArray(){\n    byte[] array = new byte[getSize()];\n    int offset = 0;\n    for(LinkedBuffer lb : this){\n        byte[] b = lb.toByteArray(offset);\n        System.arraycopy(b, 0, array, offset, b.length);\n        offset += b.length;\n    }\n    return array;\n}"], "code_level": "project_runnable", "_id": "636767a21a6d9265ec018517", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/WriteSession_toByteArray.class"}
{"generate_results": [{"generate_code": "private static int compareSigned(long a,long b){\n    if(a > b) return 1;\n    if(a < b) return -1;\n    return 0;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Compares the two specified  {@code long} values. The sign of the value returned is the same as that of{@code ((Long) a).compareTo(b)}. <p> <b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the equivalent {@link Long#compare} method instead.\n * @param a the first  {@code long} to compare\n * @param b the second  {@code long} to compare\n * @return a negative value if {@code a} is less than {@code b}; a positive value if  {@code a} is greater than{@code b}; or zero if they are equal\n */\n", "method_name": "compareSigned", "codes": ["private static int compareSigned(long a,long b){\n    if(a > b) return 1;\n    if(a < b) return -1;\n    return 0;\n}"], "code_level": "self_contained", "_id": "636767a41a6d9265ec01857e", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/UnsignedNumberUtil_compareSigned.class"}
{"generate_results": [{"generate_code": "public byte[] toByteArray(){\n    byte[] bytes = new byte[size()];\n    copyTo(bytes);\n    return bytes;\n}", "errormessage": "", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Copies bytes to a  {@code byte[]}.\n */\n", "method_name": "toByteArray", "codes": ["public byte[] toByteArray(){\n    byte[] bytes = new byte[size()];\n    copyTo(bytes);\n    return bytes;\n}"], "code_level": "self_contained", "_id": "636767aa1a6d9265ec01864a", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-api/target/classes/io/protostuff/ByteString_toByteArray.class"}
{"generate_results": [{"generate_code": "private void checkIfPackedField() throws IOException {\n    if (isCurrentFieldPacked()) {\n        if (decodeNestedMessageAsGroup) {\n            skipField(lastTag);\n        } else {\n            skipField(lastTag);\n        }\n    }\n}", "errormessage": "exec error!", "error_detail_message": "", "is_pass": false}], "docstring": "/** \n * Check if this field have been packed into a length-delimited field. If so, update internal state to reflect that packed fields are being read.\n * @throws IOException\n */\n", "method_name": "checkIfPackedField", "codes": ["private void checkIfPackedField() throws IOException {\n    if (isCurrentFieldPacked()) {\n        if (decodeNestedMessageAsGroup) {\n            skipField(lastTag);\n        } else {\n            skipField(lastTag);\n        }\n    }\n}"], "code_level": "class_runnable", "_id": "636767a31a6d9265ec01854f", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/CodedInput_checkIfPackedField.class"}
{"generate_results": [{"generate_code": "public int readTag() throws IOException {\n    int tag = this.readRawVarint32();\n    if (tag == 0) {\n        throw new IOException(\"Unexpected EOF\");\n    }\n    return tag;\n}", "errormessage": "", "error_detail_message": "", "is_pass": true}], "docstring": "/** \n * Attempt to read a field tag, returning zero if we have reached EOF. Protocol message parsers use this to read tags, since a protocol message may legally end wherever a tag occurs, and zero is not a valid tag number.\n */\n", "method_name": "readTag", "codes": ["public int readTag() throws IOException {\n    int tag = this.readRawVarint32();\n    if (tag == 0) {\n        throw new IOException(\"Unexpected EOF\");\n    }\n    return tag;\n}"], "code_level": "class_runnable", "_id": "636767a81a6d9265ec0185fc", "project_name": "protostuff-master", "test_file": "/home/travis/builds/java/CoderEval-Java-projects/protostuff/protostuff-core/target/classes/io/protostuff/ByteBufferInput_readTag.class"}

{
     "datas": [
          {
               "id": "6367670b1a6d9265ec017a00",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return (array1.length == array2.length);\n}",
               "ground_true": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
          },
          {
               "id": "636767031a6d9265ec0178e6",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static byte[] toPrimitive(final Byte[] array){\n    if(array == null)\n        return null;\n    final byte[] result = new byte[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].byteValue();\n    }\n    return result;\n}",
               "ground_true": "public static byte[] toPrimitive(final Byte[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_BYTE_ARRAY;\n  }\n  final byte[] result=new byte[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].byteValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766ff1a6d9265ec017842",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static double[] toPrimitive(final Double[] array){\n    return (array == null || array.length == 0) ? EMPTY_DOUBLE_ARRAY : new double[array.length];\n}",
               "ground_true": "public static double[] toPrimitive(final Double[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_DOUBLE_ARRAY;\n  }\n  final double[] result=new double[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].doubleValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636767081a6d9265ec0179a2",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "private static boolean isAllZeros(String s){\n    for(int i=0;i<s.length();i++){\n        if(s.charAt(i)!='0'){\n            return false;\n        }\n    }\n    return true;\n}",
               "ground_true": "private static boolean isAllZeros(String s){\n  if (s == null) {\n    return true;\n  }\n  for (int i=s.length() - 1; i >= 0; i--) {\n    if (s.charAt(i) != '0') {\n      return false;\n    }\n  }\n  return s.length() > 0;\n}\n"
          },
          {
               "id": "6367670c1a6d9265ec017a2a",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static int[] toPrimitive(final Integer[] array){\n    return (array == null || array.length == 0) ? EMPTY_INT_ARRAY : new int[array.length];\n}",
               "ground_true": "public static int[] toPrimitive(final Integer[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_INT_ARRAY;\n  }\n  final int[] result=new int[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].intValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017838",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static char[] toPrimitive(final Character[] array){\n    return (array == null) ? null : toPrimitive(array, Character.valueOf('\\0'));\n}",
               "ground_true": "public static char[] toPrimitive(final Character[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_CHAR_ARRAY;\n  }\n  final char[] result=new char[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].charValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec01781c",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static Character toCharacterObject(final char ch){\n    return Character.valueOf(ch);\n}",
               "ground_true": "public static Character toCharacterObject(final char ch){\n  if (ch < CharUtils.CHAR_ARRAY.length) {\n    return CharUtils.CHAR_ARRAY[ch];\n  }\n  return new Character(ch);\n}\n"
          },
          {
               "id": "636766f81a6d9265ec017748",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public static String base64Decode(final String s){\n    byte[] data = Base64.getDecoder().decode(s);\n    return new String(data, StandardCharsets.UTF_8);\n}",
               "ground_true": "public static String base64Decode(final String s){\n  byte[] b=Base64.base64DecodeToArray(s);\n  if (b == null) {\n    return null;\n  }\n  if (b.length == 0) {\n    return \"\";\n  }\n  return new String(b,StandardCharsets.UTF_8);\n}\n"
          },
          {
               "id": "636766f11a6d9265ec017663",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n    return (array1 == null && array2 == null) || (array1 != null && array2 != null && array1.length == array2.length);\n}",
               "ground_true": "public static boolean isSameLength(final double[] array1,final double[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
          },
          {
               "id": "6367670b1a6d9265ec017a05",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static String toString(final char ch){\n\treturn String.valueOf(ch);\n}",
               "ground_true": "public static String toString(final char ch){\n  if (ch < 128) {\n    return CharUtils.CHAR_STRING_ARRAY[ch];\n  }\n  return new String(new char[]{ch});\n}\n"
          },
          {
               "id": "636767191a6d9265ec017c0f",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private void enlarge(final int size){\n    byte[] newData = new byte[data.length + size];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}",
               "ground_true": "private void enlarge(final int size){\n  int doubleCapacity=2 * data.length;\n  int minimalCapacity=length + size;\n  byte[] newData=new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\n  System.arraycopy(data,0,newData,0,length);\n  data=newData;\n}\n"
          },
          {
               "id": "636767021a6d9265ec0178b2",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private void pop(final String descriptor){\n    switch (descriptor.charAt(0)){\n        case 'B':\n        case 'C':\n        case 'D':\n        case 'F':\n        case 'I':\n        case 'J':\n        case 'S':\n        case 'Z':\n            pop();\n            break;\n        case 'V':\n            break;\n        case 'L':\n        case '[':\n            pop(2);\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}",
               "ground_true": "private void pop(final String descriptor){\n  char firstDescriptorChar=descriptor.charAt(0);\n  if (firstDescriptorChar == '(') {\n    pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1);\n  }\n else   if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n    pop(2);\n  }\n else {\n    pop(1);\n  }\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec01782a",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    int utfOffset=readUnsignedShort(constantPoolEntryIndex*3+1);\n    int utfLength=readUnsignedShort(constantPoolEntryIndex*3+3);\n    return readUtf(utfOffset,utfLength,charBuffer);\n}",
               "ground_true": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n  String value=constantUtf8Values[constantPoolEntryIndex];\n  if (value != null) {\n    return value;\n  }\n  int cpInfoOffset=cpInfoOffsets[constantPoolEntryIndex];\n  return constantUtf8Values[constantPoolEntryIndex]=readUtf(cpInfoOffset + 2,readUnsignedShort(cpInfoOffset),charBuffer);\n}\n"
          },
          {
               "id": "636766f81a6d9265ec017758",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "@Override public int hashCode(){\n    return sort ^ valueBuffer.hashCode() ^ valueBegin ^ valueEnd;\n}",
               "ground_true": "@Override public int hashCode(){\n  int hashCode=13 * (sort == INTERNAL ? OBJECT : sort);\n  if (sort >= ARRAY) {\n    for (int i=valueBegin, end=valueEnd; i < end; i++) {\n      hashCode=17 * (hashCode + valueBuffer.charAt(i));\n    }\n  }\n  return hashCode;\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017823",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    2,
                    4
               ],
               "generate_code": "int addConstantNameAndType(final String name,final String descriptor){\n    return addConstantNameAndType(++constantPoolCount,name,descriptor);\n}",
               "ground_true": "int addConstantNameAndType(final String name,final String descriptor){\n  final int tag=Symbol.CONSTANT_NAME_AND_TYPE_TAG;\n  int hashCode=hash(tag,name,descriptor);\n  Entry entry=get(hashCode);\n  while (entry != null) {\n    if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) {\n      return entry.index;\n    }\n    entry=entry.next;\n  }\n  constantPool.put122(tag,addConstantUtf8(name),addConstantUtf8(descriptor));\n  return put(new Entry(constantPoolCount++,tag,name,descriptor,hashCode)).index;\n}\n"
          },
          {
               "id": "636767131a6d9265ec017b23",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "final void addLineNumber(final int lineNumber){\n    if(lineNumber < 0){\n        throw new IllegalArgumentException(\"Line number must be positive\");\n    }\n    if(lineNumber > 65535){\n        throw new IllegalArgumentException(\"Line number must be less than 65536\");\n    }\n    if(this.lineNumber == 0){\n        this.lineNumber = lineNumber;\n    }else{\n        int[] newLineNumbers = new int[this.otherLineNumbers.length + 1];\n        System.arraycopy(this.otherLineNumbers, 0, newLineNumbers, 0, this.otherLineNumbers.length);\n        newLineNumbers[this.otherLineNumbers.length] = lineNumber;\n        this.otherLineNumbers = newLineNumbers;\n    }\n}",
               "ground_true": "final void addLineNumber(final int lineNumber){\n  if (this.lineNumber == 0) {\n    this.lineNumber=(short)lineNumber;\n  }\n else {\n    if (otherLineNumbers == null) {\n      otherLineNumbers=new int[LINE_NUMBERS_CAPACITY_INCREMENT];\n    }\n    int otherLineNumberIndex=++otherLineNumbers[0];\n    if (otherLineNumberIndex >= otherLineNumbers.length) {\n      int[] newLineNumbers=new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT];\n      System.arraycopy(otherLineNumbers,0,newLineNumbers,0,otherLineNumbers.length);\n      otherLineNumbers=newLineNumbers;\n    }\n    otherLineNumbers[otherLineNumberIndex]=lineNumber;\n  }\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017833",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static void forceDeleteOnExit(File file) throws IOException {\n    file.deleteOnExit();\n}",
               "ground_true": "public static void forceDeleteOnExit(File file) throws IOException {\n  if (file.isDirectory()) {\n    deleteDirectoryOnExit(file);\n  }\n else {\n    file.deleteOnExit();\n  }\n}\n"
          },
          {
               "id": "636767001a6d9265ec01787e",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public String toString(){\n    return this.toString(this.getObject());\n}",
               "ground_true": "public String toString(){\n  if (this.getObject() == null) {\n    return this.getStyle().getNullText();\n  }\n  Class<?> clazz=this.getObject().getClass();\n  this.appendFieldsIn(clazz);\n  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {\n    clazz=clazz.getSuperclass();\n    this.appendFieldsIn(clazz);\n  }\n  return super.toString();\n}\n"
          },
          {
               "id": "636767041a6d9265ec017911",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "static void register(Object value){\n    if (value != null) {\n        REGISTRY.get().register(value);\n    }\n}",
               "ground_true": "static void register(Object value){\n  if (value != null) {\n    Map m=getRegistry();\n    if (m == null) {\n      m=new WeakHashMap();\n      REGISTRY.set(m);\n    }\n    m.put(value,null);\n  }\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017821",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n    appendDetail(buffer, fieldName, array, null);\n}",
               "ground_true": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){\n  buffer.append(arrayStart);\n  for (int i=0; i < array.length; i++) {\n    if (i > 0) {\n      buffer.append(arraySeparator);\n    }\n    appendDetail(buffer,fieldName,array[i]);\n  }\n  buffer.append(arrayEnd);\n}\n"
          },
          {
               "id": "636766f11a6d9265ec017641",
               "type": [
                    "Missing Range Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    3,
                    4
               ],
               "generate_code": "@Override public int available() throws IOException {\n    return this.length - this.index;\n}",
               "ground_true": "@Override public int available() throws IOException {\n  return this.index < this.length ? this.length - this.index : this.length >= 0 && this.reader.ready() ? 1 : 0;\n}\n"
          },
          {
               "id": "6367670a1a6d9265ec0179e7",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public Converter lookup(final Class<?> clazz){\n    Converter converter = converters.get(clazz);\n    if (converter == null) {\n        converter = converters.get(clazz.getName());\n    }\n    return converter;\n}",
               "ground_true": "public Converter lookup(final Class<?> clazz){\n  Converter conv=(Converter)this.converters.get(clazz);\n  if (conv != null) {\n    return conv;\n  }\n  for (  Object regType : this.converters.keySet()) {\n    if (((Class<?>)regType).isAssignableFrom(clazz)) {\n      return (Converter)this.converters.get(regType);\n    }\n  }\n  return null;\n}\n"
          },
          {
               "id": "6367670b1a6d9265ec0179f2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public boolean containsKey(final Object key){\n    return map.containsKey(key);\n}",
               "ground_true": "@Override public boolean containsKey(final Object key){\n  if (this.fast) {\n    return this.map.containsKey(key);\n  }\n else {\nsynchronized (this.map) {\n      return this.map.containsKey(key);\n    }\n  }\n}\n"
          },
          {
               "id": "636766f11a6d9265ec01764f",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public Collection<Object> values(){\n    return Collections.unmodifiableCollection(this.values());\n}",
               "ground_true": "public Collection<Object> values(){\n  ArrayList<Object> answer=new ArrayList<>(readMethods.size());\n  for (Iterator<Object> iter=valueIterator(); iter.hasNext(); ) {\n    answer.add(iter.next());\n  }\n  return Collections.unmodifiableList(answer);\n}\n"
          },
          {
               "id": "636767121a6d9265ec017b0a",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "private int parseEndOfLine(String headerPart,int end){\n    int pos = headerPart.indexOf(\"\\r\\n\",end);\n    if (pos == -1) {\n        pos = headerPart.length();\n    }\n    return pos;\n}",
               "ground_true": "private int parseEndOfLine(String headerPart,int end){\n  int index=end;\n  for (; ; ) {\n    int offset=headerPart.indexOf('\\r',index);\n    if (offset == -1 || offset + 1 >= headerPart.length()) {\n      throw new IllegalStateException(\"Expected headers to be terminated by an empty line.\");\n    }\n    if (headerPart.charAt(offset + 1) == '\\n') {\n      return offset;\n    }\n    index=offset + 1;\n  }\n}\n"
          },
          {
               "id": "6367670b1a6d9265ec017a0f",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n    if(str == null || searchStrArray == null){\n        return false;\n    }\n    for(String searchStr : searchStrArray){\n        if(StringUtils.equalsIgnoreCase(str, searchStr)){\n            return true;\n        }\n    }\n    return false;\n}",
               "ground_true": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){\n  if (StringUtils.isEmpty(str) || searchStrArray == null || searchStrArray.isEmpty()) {\n    return false;\n  }\n  for (  String item : searchStrArray) {\n    if (containsIgnoreCase(str,item)) {\n      return true;\n    }\n  }\n  return false;\n}\n"
          },
          {
               "id": "636767021a6d9265ec0178bc",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}",
               "ground_true": "public static int indexOf(String str,String searchStr){\n  if (str == null || searchStr == null) {\n    return StringUtils.INDEX_NOT_FOUND;\n  }\n  return str.indexOf(searchStr);\n}\n"
          },
          {
               "id": "636766fc1a6d9265ec0177da",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "private static boolean isParameterSeparator(final char c){\n    for(char separator : PARAMETER_SEPARATORS){\n        if(c == separator){\n            return true;\n        }\n    }\n    return false;\n}",
               "ground_true": "private static boolean isParameterSeparator(final char c){\n  if (Character.isWhitespace(c)) {\n    return true;\n  }\n  for (  char separator : PARAMETER_SEPARATORS) {\n    if (c == separator) {\n      return true;\n    }\n  }\n  return false;\n}\n"
          },
          {
               "id": "636767031a6d9265ec0178ef",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    final int length=Array.getLength(array);\n    final Object newArray=Array.newInstance(newArrayComponentType,length+1);\n    System.arraycopy(array,0,newArray,0,length);\n    Array.set(newArray,length,0);\n    return newArray;\n}",
               "ground_true": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n  if (array != null) {\n    int arrayLength=Array.getLength(array);\n    Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);\n    System.arraycopy(array,0,newArray,0,arrayLength);\n    return newArray;\n  }\n  return Array.newInstance(newArrayComponentType,1);\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017834",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String sessionId(){\n    HttpSession session = HttpContext.getRequest().getSession();\n    return session.getId();\n}",
               "ground_true": "public static String sessionId(){\n  HttpSession httpSession=servletSession();\n  if (httpSession == null) {\n    return null;\n  }\n  return httpSession.getId();\n}\n"
          },
          {
               "id": "636766ae1a6d9265ec0175dc",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "public Boolean isPartialContentResponse(){\n    return false;\n}",
               "ground_true": "public Boolean isPartialContentResponse(){\n  Integer limit=drc.getLimit() == null ? 0 : drc.getLimit();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return !((limit + 1) >= count);\n}\n"
          },
          {
               "id": "636766ae1a6d9265ec0175d8",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private String buildContentRange(){\n    String contentRange = String.format(\"%d-%d/%d\", offset, offset + limit, count);\n    return contentRange;\n}",
               "ground_true": "private String buildContentRange(){\n  Integer limit=drc.getLimit() == null ? getDefaultNumberPagination() - 1 : drc.getLimit();\n  Integer offset=drc.getOffset() == null ? 0 : drc.getOffset();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return offset + \"-\" + (limit.equals(0) ? count - 1 : limit)+ \"/\"+ count;\n}\n"
          },
          {
               "id": "636766f01a6d9265ec01763e",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private static String javaCharset(String charset){\n    if(MIME2JAVA.containsKey(charset)){\n        return MIME2JAVA.get(charset);\n    }\n    return charset;\n}",
               "ground_true": "private static String javaCharset(String charset){\n  if (charset == null) {\n    return null;\n  }\n  String mappedCharset=MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));\n  if (mappedCharset == null) {\n    return charset;\n  }\n  return mappedCharset;\n}\n"
          },
          {
               "id": "636767501a6d9265ec017e86",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public ListNode<E> previousNode(){\n    return prev;\n}",
               "ground_true": "@Override public ListNode<E> previousNode(){\n  checkForComodification();\n  if (!hasPrevious()) {\n    throw new NoSuchElementException();\n  }\n  last=next=next.prev;\n  nextIndex--;\n  return last;\n}\n"
          },
          {
               "id": "636767581a6d9265ec017fc4",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static long factorial(int n){\n    if(n == 0){\n        return 1;\n    }\n    else{\n        return n * factorial(n - 1);\n    }\n}",
               "ground_true": "public static long factorial(int n){\n  long multi=1;\n  for (int i=1; i <= n; i++) {\n    multi=multi * i;\n  }\n  return multi;\n}\n"
          },
          {
               "id": "636767631a6d9265ec018171",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    2,
                    4
               ],
               "generate_code": "private boolean unlink(ListNodeImpl<E> node){\n    ListNodeImpl<E> prev = node.prev;\n    ListNodeImpl<E> next = node.next;\n    prev.next = next;\n    next.prev = prev;\n    this.size--;\n    node.next = null;\n    node.prev = null;\n    return true;\n}",
               "ground_true": "private boolean unlink(ListNodeImpl<E> node){\n  ListNodeImpl<E> prev=node.prev;\n  ListNodeImpl<E> next=node.next;\n  if (removeListNode(node)) {\n    if (size == 0) {\n      head=null;\n    }\n else {\n      link(prev,next);\n      if (head == node) {\n        head=next;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n"
          },
          {
               "id": "636767641a6d9265ec01817d",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n    for (V v : partitionA) {\n        for (V w : partitionB) {\n            target.addEdge(v, w);\n        }\n    }\n}",
               "ground_true": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){\n  for (int i=0; i < sizeA; i++) {\n    partitionA.add(target.addVertex());\n  }\n  for (int i=0; i < sizeB; i++) {\n    partitionB.add(target.addVertex());\n  }\n  for (  V u : partitionA) {\n    for (    V v : partitionB) {\n      target.addEdge(u,v);\n    }\n  }\n}\n"
          },
          {
               "id": "636767561a6d9265ec017f63",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "@Override public boolean hasNext(){\n    return !bucketList.isEmpty();\n}",
               "ground_true": "@Override public boolean hasNext(){\n  if (current != null) {\n    return true;\n  }\n  current=advance();\n  if (current != null && nListeners != 0) {\n    fireVertexTraversed(createVertexTraversalEvent(current));\n  }\n  return current != null;\n}\n"
          },
          {
               "id": "6367674b1a6d9265ec017dc0",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<V>();\n    for(E e : graph.edgeSet()){\n        visibleVertices.add(graph.getEdgeSource(e));\n        visibleVertices.add(graph.getEdgeTarget(e));\n    }\n    return visibleVertices;\n}",
               "ground_true": "private Set<V> initVisibleVertices(){\n  Set<V> visibleVertex=new HashSet<>();\n  for (  E e : graph.edgeSet()) {\n    V s=graph.getEdgeSource(e);\n    V t=graph.getEdgeTarget(e);\n    if (!s.equals(t)) {\n      visibleVertex.add(s);\n      visibleVertex.add(t);\n    }\n  }\n  return visibleVertex;\n}\n"
          },
          {
               "id": "6367675c1a6d9265ec01805b",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public void removeFromTreeEdgeList(){\n    if(prev != null){\n        prev.next = next;\n    }\n    if(next != null){\n        next.prev = prev;\n    }\n    prev = null;\n    next = null;\n}",
               "ground_true": "public void removeFromTreeEdgeList(){\n  for (int dir=0; dir < 2; dir++) {\n    if (prev[dir] != null) {\n      prev[dir].next[dir]=next[dir];\n    }\n else {\n      head[1 - dir].first[dir]=next[dir];\n    }\n    if (next[dir] != null) {\n      next[dir].prev[dir]=prev[dir];\n    }\n  }\n  head[0]=head[1]=null;\n}\n"
          },
          {
               "id": "636767611a6d9265ec018116",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n    Set<V> intersection = new HashSet<>(set1);\n    intersection.retainAll(set2);\n    return intersection;\n}",
               "ground_true": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n  Set<V> a;\n  Set<V> b;\n  if (set1.size() <= set2.size()) {\n    a=set1;\n    b=set2;\n  }\n else {\n    a=set2;\n    b=set1;\n  }\n  return a.stream().filter(b::contains).collect(Collectors.toSet());\n}\n"
          },
          {
               "id": "6367675d1a6d9265ec018082",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "Edge edgeToNext(){\n    return null;\n}",
               "ground_true": "Edge edgeToNext(){\n  Edge edge=prev.embedded.getFirst();\n  Node target=toExistingNode(current);\n  Node source=toExistingNode(prev);\n  if (edge.getOpposite(source) == target) {\n    return edge;\n  }\n else {\n    return prev.embedded.getLast();\n  }\n}\n"
          },
          {
               "id": "636767641a6d9265ec018190",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    for(Integer vertex : bucketsByLabel.get(minLabel)){\n        bucketsByLabel.get(0).add(vertex);\n    }\n    bucketsByLabel.get(minLabel).clear();\n    labels.set(minLabel,labels.get(minLabel)-1);\n}",
               "ground_true": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n  if (minLabel != 0 && minLabel < bucketsByLabel.size()) {\n    Set<Integer> bucket=bucketsByLabel.get(minLabel);\n    for (    Integer vertex : bucket) {\n      labels.set(vertex,0);\n      bucketsByLabel.get(0).add(vertex);\n    }\n    bucket.clear();\n  }\n}\n"
          },
          {
               "id": "636767611a6d9265ec018112",
               "type": [
                    "Errorous Expression",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    8,
                    4
               ],
               "generate_code": "@Override protected V provideNextVertex(){\n  if (probeIterator.hasNext()) {\n    return probeIterator.next();\n  }\n  return null;\n}",
               "ground_true": "@Override protected V provideNextVertex(){\n  V v=super.provideNextVertex();\n  for (int i=path.size() - 1; i >= 0; --i) {\n    if (graph.containsEdge(path.get(i),v)) {\n      break;\n    }\n    path.remove(i);\n  }\n  path.add(v);\n  return v;\n}\n"
          },
          {
               "id": "636767601a6d9265ec0180e2",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList = new ArrayList<>();\n    for(E edge : graph.edgeSet()){\n        List<Pair<Integer,Integer>> separator = findSeparators(graph,edge);\n        globalSeparatorList.add(new Pair<>(separator,edge));\n    }\n    return globalSeparatorList;\n}",
               "ground_true": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n  List<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList=new ArrayList<>();\n  for (  E edge : graph.edgeSet()) {\n    V source=graph.getEdgeSource(edge);\n    V target=graph.getEdgeTarget(edge);\n    if (source != target) {\n      List<Set<V>> edgeSeparators=findSeparators(graph,edge);\n      globalSeparatorList.addAll(reformatSeparatorList(edgeSeparators,edge));\n    }\n  }\n  return globalSeparatorList;\n}\n"
          },
          {
               "id": "636767511a6d9265ec017eb0",
               "type": [
                    "Missing Assertions",
                    "Missing Range Checks"
               ],
               "type_id": [
                    6,
                    3
               ],
               "generate_code": "public int nonZeros(int row){\n    return rowOffsets[row + 1] - rowOffsets[row];\n}",
               "ground_true": "public int nonZeros(int row){\n  assert row >= 0 && row < rowOffsets.length;\n  return rowOffsets[row + 1] - rowOffsets[row];\n}\n"
          },
          {
               "id": "636767461a6d9265ec017d17",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private String unescapeId(String input){\n    return unescapeId.translate(input);\n}",
               "ground_true": "private String unescapeId(String input){\n  final char quote='\"';\n  if (input.charAt(0) != quote || input.charAt(input.length() - 1) != quote) {\n    return input;\n  }\n  String noQuotes=input.subSequence(1,input.length() - 1).toString();\n  String unescaped=unescapeId.translate(noQuotes);\n  return unescaped;\n}\n"
          },
          {
               "id": "636766861a6d9265ec01755a",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    2,
                    3
               ],
               "generate_code": "public final MatchResult match(CharSequence uri){\n    Matcher m = regexPattern.matcher(uri);\n    if(m.find()){\n        return new GroupIndexMatchResult(m);\n    }\n    return null;\n}",
               "ground_true": "public final MatchResult match(CharSequence uri){\n  if (uri == null || uri.length() == 0)   return (regexPattern == null) ? EMPTY_STRING_MATCH_RESULT : null;\n else   if (regexPattern == null)   return null;\n  Matcher m=regexPattern.matcher(uri);\n  if (!m.matches())   return null;\n  return (groupIndexes.length > 0) ? new GroupIndexMatchResult(m) : m;\n}\n"
          },
          {
               "id": "6367667f1a6d9265ec01745c",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    File dirFile = new File(dir);\n    if(dirFile.isDirectory()){\n        File[] jarFiles = dirFile.listFiles(new FilenameFilter(){\n            public boolean accept(File dir,String name){\n                return name.endsWith(\".jar\");\n            }\n        });\n        for(File jarFile : jarFiles){\n            try{\n                cpV.add(jarFile.toURI().toURL());\n            }catch(MalformedURLException e){\n                e.printStackTrace();\n            }\n        }\n    }\n}",
               "ground_true": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n  try {\n    String cpComp[]=getFilesByExt(dir,\".jar\");\n    if (cpComp != null) {\n      int jarCount=cpComp.length;\n      for (int i=0; i < jarCount; i++) {\n        URL url=getURL(dir,cpComp[i]);\n        if (url != null)         cpV.addElement(url);\n      }\n    }\n  }\n catch (  Exception ex) {\n    logger.debug(\"failed to add urls to classpath\",ex);\n  }\n}\n"
          },
          {
               "id": "6367667d1a6d9265ec017401",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String unescapeJava(String str) throws Exception {\n    StringWriter writer = new StringWriter();\n    unescapeJava(writer, str);\n    return writer.toString();\n}",
               "ground_true": "public static String unescapeJava(String str) throws Exception {\n  if (str == null) {\n    return null;\n  }\n  StringWriter writer=new StringWriter(str.length());\n  unescapeJava(writer,str);\n  return writer.toString();\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174b6",
               "type": [
                    "Missing Type Checks on Variables"
               ],
               "type_id": [
                    5
               ],
               "generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n  if(genericType instanceof ParameterizedType){\n    ParameterizedType parameterizedType=(ParameterizedType)genericType;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    Class<?>[] resolvedArguments=new Class[actualTypeArguments.length];\n    for(int i=0;i < actualTypeArguments.length;i++){\n      resolvedArguments[i]=resolveClass(actualTypeArguments[i],targetType);\n    }\n    return resolvedArguments;\n  }\n  return null;\n}",
               "ground_true": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n  Class<?>[] result=null;\n  if (genericType instanceof ParameterizedType) {\n    ParameterizedType paramType=(ParameterizedType)genericType;\n    Type[] arguments=paramType.getActualTypeArguments();\n    result=new Class[arguments.length];\n    for (int i=0; i < arguments.length; i++)     result[i]=resolveClass(arguments[i],targetType);\n  }\n else   if (genericType instanceof TypeVariable) {\n    result=new Class[1];\n    result[0]=resolveClass(genericType,targetType);\n  }\n  return result;\n}\n"
          },
          {
               "id": "6367667d1a6d9265ec01741d",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n  if(typeVariable instanceof ParameterizedType){\n    ParameterizedType parameterizedType=(ParameterizedType)typeVariable;\n    Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();\n    if(actualTypeArguments.length > 0){\n      Type firstBound=actualTypeArguments[0];\n      if(firstBound instanceof TypeVariable){\n        return resolveBound((TypeVariable<?>)firstBound);\n      }\n      return firstBound;\n    }\n  }\n  return Unknown.class;\n}",
               "ground_true": "public static Type resolveBound(TypeVariable<?> typeVariable){\n  Type[] bounds=typeVariable.getBounds();\n  if (bounds.length == 0)   return Unknown.class;\n  Type bound=bounds[0];\n  if (bound instanceof TypeVariable)   bound=resolveBound((TypeVariable<?>)bound);\n  return bound == Object.class ? Unknown.class : bound;\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174d2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequestImpl.Builder().request(request).build();\n}",
               "ground_true": "public static AtmosphereRequest wrap(HttpServletRequest request){\n  if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) {\n    return (AtmosphereRequestImpl)request;\n  }\n  Builder b=new Builder();\n  Enumeration<String> e=request.getAttributeNames();\n  String s;\n  while (e.hasMoreElements()) {\n    s=e.nextElement();\n    b.localAttributes.put(s,attributeWithoutException(request,s));\n  }\n  return b.request(request).build();\n}\n"
          },
          {
               "id": "6367667d1a6d9265ec0173ff",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static Meteor lookup(HttpServletRequest r){\n    return (Meteor) r.getAttribute(METEOR);\n}",
               "ground_true": "public static Meteor lookup(HttpServletRequest r){\n  Object o=r.getAttribute(METEOR);\n  return o == null ? null : Meteor.class.isAssignableFrom(o.getClass()) ? (Meteor)o : null;\n}\n"
          },
          {
               "id": "6367667c1a6d9265ec0173fb",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    listeners.add(e);\n    return this;\n}",
               "ground_true": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n  if (listeners.contains(e))   return this;\n  listeners.add(e);\n  return this;\n}\n"
          },
          {
               "id": "636766831a6d9265ec0174eb",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private void addReverse(final File[] files){\n    for(int i = files.length - 1; i >= 0; i--){\n        stack.push(files[i]);\n    }\n}",
               "ground_true": "private void addReverse(final File[] files){\n  if (files == null)   return;\n  for (int i=files.length - 1; i >= 0; --i) {\n    stack.add(files[i]);\n  }\n}\n"
          },
          {
               "id": "6367676d1a6d9265ec018229",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static String[] trimArrayElements(String[] array){\n    for (int i = 0; i < array.length; i++){\n        if (array[i] != null){\n            array[i] = array[i].trim();\n        }\n    }\n    return array;\n}",
               "ground_true": "public static String[] trimArrayElements(String[] array){\n  if (Objects.isEmpty(array)) {\n    return new String[0];\n  }\n  String[] result=new String[array.length];\n  for (int i=0; i < array.length; i++) {\n    String element=array[i];\n    result[i]=(element != null ? element.trim() : null);\n  }\n  return result;\n}\n"
          },
          {
               "id": "6367676b1a6d9265ec0181df",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n    if (str == null || prefix == null) {\n        return false;\n    }\n    if (prefix.length() > str.length()) {\n        return false;\n    }\n    return str.regionMatches(true, 0, prefix, 0, prefix.length());\n}",
               "ground_true": "public static boolean startsWithIgnoreCase(String str,String prefix){\n  if (str == null || prefix == null) {\n    return false;\n  }\n  if (str.startsWith(prefix)) {\n    return true;\n  }\n  if (str.length() < prefix.length()) {\n    return false;\n  }\n  String lcStr=str.substring(0,prefix.length()).toLowerCase();\n  String lcPrefix=prefix.toLowerCase();\n  return lcStr.equals(lcPrefix);\n}\n"
          },
          {
               "id": "6367676b1a6d9265ec0181e2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n    for(Object candidate : candidates){\n        if(source.contains(candidate)){\n            return candidate;\n        }\n    }\n    return null;\n}",
               "ground_true": "public static Object findFirstMatch(Collection source,Collection candidates){\n  if (isEmpty(source) || isEmpty(candidates)) {\n    return null;\n  }\n  for (  Object candidate : candidates) {\n    if (source.contains(candidate)) {\n      return candidate;\n    }\n  }\n  return null;\n}\n"
          },
          {
               "id": "636767691a6d9265ec0181ae",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String[] toStringArray(Enumeration<String> enumeration){\n    List<String> list = Collections.list(enumeration);\n    return list.toArray(new String[list.size()]);\n}",
               "ground_true": "public static String[] toStringArray(Enumeration<String> enumeration){\n  if (enumeration == null) {\n    return null;\n  }\n  List<String> list=java.util.Collections.list(enumeration);\n  return list.toArray(new String[list.size()]);\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec018223",
               "type": [
                    "Missing Null Checks",
                    "Inconsistent Expression"
               ],
               "type_id": [
                    1,
                    9
               ],
               "generate_code": "public static boolean containsInstance(Collection collection,Object element){\n    Iterator iterator = collection.iterator();\n    while(iterator.hasNext()){\n        if(iterator.next().equals(element)){\n            return true;\n        }\n    }\n    return false;\n}",
               "ground_true": "public static boolean containsInstance(Collection collection,Object element){\n  if (collection != null) {\n    for (    Object candidate : collection) {\n      if (candidate == element) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec018204",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n    String[] result = new String[array1.length + array2.length];\n    System.arraycopy(array1,0,result,0,array1.length);\n    System.arraycopy(array2,0,result,array1.length,array2.length);\n    return result;\n}",
               "ground_true": "public static String[] concatenateStringArrays(String[] array1,String[] array2){\n  if (Objects.isEmpty(array1)) {\n    return array2;\n  }\n  if (Objects.isEmpty(array2)) {\n    return array1;\n  }\n  String[] newArr=new String[array1.length + array2.length];\n  System.arraycopy(array1,0,newArr,0,array1.length);\n  System.arraycopy(array2,0,newArr,array1.length,array2.length);\n  return newArr;\n}\n"
          },
          {
               "id": "6367676a1a6d9265ec0181d4",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static String[] addStringToArray(String[] array,String str){\n    List list = new ArrayList(Arrays.asList(array));\n    list.add(str);\n    return (String[])list.toArray(new String[list.size()]);\n}",
               "ground_true": "public static String[] addStringToArray(String[] array,String str){\n  if (Objects.isEmpty(array)) {\n    return new String[]{str};\n  }\n  String[] newArr=new String[array.length + 1];\n  System.arraycopy(array,0,newArr,0,array.length);\n  newArr[array.length]=str;\n  return newArr;\n}\n"
          },
          {
               "id": "6367676b1a6d9265ec0181dd",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static int countOccurrencesOf(String str,String sub){\n    int count = 0;\n    int idx = 0;\n    if (str == null || sub == null){\n        return count;\n    }\n    if (\"\".equals(sub)){\n        return 0;\n    }\n    while ((idx = str.indexOf(sub, idx)) != -1){\n        idx += sub.length();\n        count++;\n    }\n    return count;\n}",
               "ground_true": "public static int countOccurrencesOf(String str,String sub){\n  if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {\n    return 0;\n  }\n  int count=0;\n  int pos=0;\n  int idx;\n  while ((idx=str.indexOf(sub,pos)) != -1) {\n    ++count;\n    pos=idx + sub.length();\n  }\n  return count;\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec018220",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "public static String stripFilenameExtension(String path){\n    int extIndex = path.lastIndexOf(\".\");\n    if (extIndex == -1){\n        return path;\n    }\n    return path.substring(0, extIndex);\n}",
               "ground_true": "public static String stripFilenameExtension(String path){\n  if (path == null) {\n    return null;\n  }\n  int extIndex=path.lastIndexOf(EXTENSION_SEPARATOR);\n  if (extIndex == -1) {\n    return path;\n  }\n  int folderIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n  if (folderIndex > extIndex) {\n    return path;\n  }\n  return path.substring(0,extIndex);\n}\n"
          },
          {
               "id": "636767691a6d9265ec0181a6",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static String[] split(String toSplit,String delimiter){\n    int pos = toSplit.indexOf(delimiter);\n    if (pos == -1){\n        return new String[]{toSplit,null};\n    }else{\n        return new String[]{toSplit.substring(0,pos),toSplit.substring(pos + delimiter.length())};\n    }\n}",
               "ground_true": "public static String[] split(String toSplit,String delimiter){\n  if (!hasLength(toSplit) || !hasLength(delimiter)) {\n    return null;\n  }\n  int offset=toSplit.indexOf(delimiter);\n  if (offset < 0) {\n    return null;\n  }\n  String beforeDelimiter=toSplit.substring(0,offset);\n  String afterDelimiter=toSplit.substring(offset + delimiter.length());\n  return new String[]{beforeDelimiter,afterDelimiter};\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec01830f",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public String format(LoggingEvent event){\n    if(head == null){\n        if(pattern == null){\n            pattern = DEFAULT_CONVERSION_PATTERN;\n        }\n        head = createPatternParser(pattern).parse();\n    }\n    sbuf = new StringBuffer(BUF_SIZE);\n    head.format(event, sbuf);\n    return sbuf.toString();\n}",
               "ground_true": "public String format(LoggingEvent event){\n  if (sbuf.capacity() > MAX_CAPACITY) {\n    sbuf=new StringBuffer(BUF_SIZE);\n  }\n else {\n    sbuf.setLength(0);\n  }\n  PatternConverter c=head;\n  while (c != null) {\n    c.format(sbuf,event);\n    c=c.next;\n  }\n  return sbuf.toString();\n}\n"
          },
          {
               "id": "636767831a6d9265ec0183c9",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static String peek(){\n    return (String) stack.peek();\n}",
               "ground_true": "public static String peek(){\n  Stack stack=getCurrentStack();\n  if (stack != null && !stack.isEmpty())   return ((DiagnosticContext)stack.peek()).message;\n else   return \"\";\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec01832e",
               "type": [
                    "Missing Type Checks on Variables"
               ],
               "type_id": [
                    5
               ],
               "generate_code": "public Logger exists(String name){\n    return (Logger) ht.get(name);\n}",
               "ground_true": "public Logger exists(String name){\n  Object o=ht.get(new CategoryKey(name));\n  if (o instanceof Logger) {\n    return (Logger)o;\n  }\n else {\n    return null;\n  }\n}\n"
          },
          {
               "id": "636767791a6d9265ec018257",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable(){\n        public void run(){\n            _table.addLogRecord(lr);\n            _table.repaint();\n        }\n    });\n}",
               "ground_true": "public void addMessage(final LogRecord lr){\n  if (_isDisposed == true) {\n    return;\n  }\n  SwingUtilities.invokeLater(new Runnable(){\n    public void run(){\n      _categoryExplorerTree.getExplorerModel().addLogRecord(lr);\n      _table.getFilteredLogTableModel().addLogRecord(lr);\n      updateStatusLabel();\n    }\n  }\n);\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183ff",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n    ListSelectionModel model=table.getSelectionModel();\n    model.setSelectionInterval(row, row);\n    Adjustable verticalScrollBar=pane.getVerticalScrollBar();\n    int location=table.rowAtPoint(new Point(0, 0));\n    moveAdjustable(location, verticalScrollBar);\n    repaintLater(table);\n}",
               "ground_true": "public static void selectRow(int row,JTable table,JScrollPane pane){\n  if (table == null || pane == null) {\n    return;\n  }\n  if (contains(row,table.getModel()) == false) {\n    return;\n  }\n  moveAdjustable(row * table.getRowHeight(),pane.getVerticalScrollBar());\n  selectRow(row,table.getSelectionModel());\n  repaintLater(table);\n}\n"
          },
          {
               "id": "636767781a6d9265ec01823e",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "protected void append(LoggingEvent event){\n    String s = layout.format(event);\n    if(layout.ignoresThrowable()){\n        String[] sarray = s.split(\"\\n\");\n        for(int i = 0; i < sarray.length; i++){\n            send(sarray[i]);\n        }\n    }else{\n        send(s);\n    }\n}",
               "ground_true": "protected void append(LoggingEvent event){\n  if (sh != null) {\n    sh.send(layout.format(event));\n    if (layout.ignoresThrowable()) {\n      String[] s=event.getThrowableStrRep();\n      if (s != null) {\n        StringBuffer buf=new StringBuffer();\n        for (int i=0; i < s.length; i++) {\n          buf.append(s[i]);\n          buf.append(\"\\r\\n\");\n        }\n        sh.send(buf.toString());\n      }\n    }\n  }\n}\n"
          },
          {
               "id": "636767781a6d9265ec018238",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public boolean isAttached(Appender appender){\n    Enumeration allAppenders = getAllAppenders();\n    while(allAppenders.hasMoreElements()){\n        Appender currentAppender = (Appender) allAppenders.nextElement();\n        if(currentAppender.equals(appender)){\n            return true;\n        }\n    }\n    return false;\n}",
               "ground_true": "public boolean isAttached(Appender appender){\n  if (appenderList == null || appender == null)   return false;\n  int size=appenderList.size();\n  Appender a;\n  for (int i=0; i < size; i++) {\n    a=(Appender)appenderList.elementAt(i);\n    if (a == appender)     return true;\n  }\n  return false;\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183e8",
               "type": [
                    "Inconsistent Expression"
               ],
               "type_id": [
                    9
               ],
               "generate_code": "public void add(LoggingEvent event){\n    if(numElems == maxSize){\n        first = (first + 1) % maxSize;\n    }else{\n        numElems++;\n    }\n    ea[last] = event;\n    last = (last + 1) % maxSize;\n}",
               "ground_true": "public void add(LoggingEvent event){\n  ea[last]=event;\n  if (++last == maxSize)   last=0;\n  if (numElems < maxSize)   numElems++;\n else   if (++first == maxSize)   first=0;\n}\n"
          },
          {
               "id": "636767861a6d9265ec01844c",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    3,
                    4
               ],
               "generate_code": "public void removeAppender(String name){\n    if(name != null){\n        appenderList.removeElement(getAppender(name));\n    }\n}",
               "ground_true": "public void removeAppender(String name){\n  if (name == null || appenderList == null)   return;\n  int size=appenderList.size();\n  for (int i=0; i < size; i++) {\n    if (name.equals(((Appender)appenderList.elementAt(i)).getName())) {\n      appenderList.removeElementAt(i);\n      break;\n    }\n  }\n}\n"
          },
          {
               "id": "636767781a6d9265ec018242",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n    Enumeration appenders = getAllAppenders();\n    while (appenders.hasMoreElements()){\n        Appender appender = (Appender) appenders.nextElement();\n        appender.doAppend(event);\n    }\n    return 0;\n}",
               "ground_true": "public int appendLoopOnAppenders(LoggingEvent event){\n  int size=0;\n  Appender appender;\n  if (appenderList != null) {\n    size=appenderList.size();\n    for (int i=0; i < size; i++) {\n      appender=(Appender)appenderList.elementAt(i);\n      appender.doAppend(event);\n    }\n  }\n  return size;\n}\n"
          },
          {
               "id": "636767821a6d9265ec0183ab",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public boolean hasThrown(){\n    return _thrown != null;\n}",
               "ground_true": "public boolean hasThrown(){\n  Throwable thrown=getThrown();\n  if (thrown == null) {\n    return false;\n  }\n  String thrownString=thrown.toString();\n  return thrownString != null && thrownString.trim().length() != 0;\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec018314",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Errorous Expression"
               ],
               "type_id": [
                    1,
                    2,
                    8
               ],
               "generate_code": "protected int removeUnusedNodes(){\n    int removedNodesCount = 0;\n    ArrayList<CategoryNode> nodesToRemove = new ArrayList<CategoryNode>();\n    Enumeration<CategoryNode> nodes = _categoryModel.preorderEnumeration();\n    while (nodes.hasMoreElements()){\n        CategoryNode node = nodes.nextElement();\n        if (!node.isActive()){\n            nodesToRemove.add(node);\n        }\n    }\n    for (CategoryNode node : nodesToRemove){\n        _categoryModel.removeNode(node);\n        removedNodesCount++;\n    }\n    return removedNodesCount;\n}",
               "ground_true": "protected int removeUnusedNodes(){\n  int count=0;\n  CategoryNode root=_categoryModel.getRootCategoryNode();\n  Enumeration enumeration=root.depthFirstEnumeration();\n  while (enumeration.hasMoreElements()) {\n    CategoryNode node=(CategoryNode)enumeration.nextElement();\n    if (node.isLeaf() && node.getNumberOfContainedRecords() == 0 && node.getParent() != null) {\n      _categoryModel.removeNodeFromParent(node);\n      count++;\n    }\n  }\n  return count;\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183f2",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public int compare(Object aObj1,Object aObj2){\n    EventDetails event1 = (EventDetails)aObj1;\n    EventDetails event2 = (EventDetails)aObj2;\n    return event1.getTimeStamp().compareTo(event2.getTimeStamp());\n}",
               "ground_true": "public int compare(Object aObj1,Object aObj2){\n  if ((aObj1 == null) && (aObj2 == null)) {\n    return 0;\n  }\n else   if (aObj1 == null) {\n    return -1;\n  }\n else   if (aObj2 == null) {\n    return 1;\n  }\n  final EventDetails le1=(EventDetails)aObj1;\n  final EventDetails le2=(EventDetails)aObj2;\n  if (le1.getTimeStamp() < le2.getTimeStamp()) {\n    return 1;\n  }\n  return -1;\n}\n"
          },
          {
               "id": "636767df1a6d9265ec01873c",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}",
               "ground_true": "public String id(String entityId){\n  if (entityId == null) {\n    return String.valueOf(point);\n  }\n else {\n    return point + Const.ID_CONNECTOR + entityId;\n  }\n}\n"
          },
          {
               "id": "636767df1a6d9265ec018744",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> timeRanges = new ArrayList<>();\n    long current = start;\n    while(current < end){\n        long to = Math.min(current + FETCH_DATA_DURATION,end);\n        timeRanges.add(new TimeRange(current,to));\n        current = to;\n    }\n    return timeRanges;\n}",
               "ground_true": "protected List<TimeRange> buildTimeRanges(long start,long end){\n  if (start >= end) {\n    return null;\n  }\n  end+=1;\n  final List<TimeRange> timeRanges=new ArrayList<>();\n  do {\n    long batchEnd=Math.min(start + FETCH_DATA_DURATION,end);\n    timeRanges.add(new TimeRange(start,batchEnd));\n    start=batchEnd;\n  }\n while (start < end);\n  return timeRanges;\n}\n"
          },
          {
               "id": "636767e01a6d9265ec018755",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    content.put(\"msg_type\",\"post\");\n    JsonObject post = new JsonObject();\n    post.add(\"zh_cn\",jsonObject);\n    content.put(\"content\",post);\n    return content;\n}",
               "ground_true": "private Map<String,Object> buildContent(JsonObject jsonObject){\n  Map<String,Object> content=new HashMap<>();\n  content.put(\"msg_type\",jsonObject.get(\"msg_type\").getAsString());\n  if (jsonObject.get(\"ats\") != null) {\n    String ats=jsonObject.get(\"ats\").getAsString();\n    String text=jsonObject.get(\"content\").getAsJsonObject().get(\"text\").getAsString();\n    List<String> collect=Arrays.stream(ats.split(\",\")).map(String::trim).collect(Collectors.toList());\n    for (    String userId : collect) {\n      text+=\"<at user_id=\\\"\" + userId + \"\\\"></at>\";\n    }\n    jsonObject.get(\"content\").getAsJsonObject().addProperty(\"text\",text);\n  }\n  content.put(\"content\",jsonObject.get(\"content\").getAsJsonObject());\n  return content;\n}\n"
          },
          {
               "id": "636767de1a6d9265ec018706",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    Mappings currentMappings = getMapping(tableName);\n    return diffStructure(currentMappings,mappings);\n}",
               "ground_true": "public Mappings diffStructure(String tableName,Mappings mappings){\n  if (!structures.containsKey(tableName)) {\n    return new Mappings();\n  }\n  Map<String,Object> properties=mappings.getProperties();\n  Map<String,Object> diffProperties=structures.get(tableName).diffFields(new Fields(mappings));\n  return Mappings.builder().type(ElasticSearchClient.TYPE).properties(diffProperties).build();\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186c6",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private boolean containsAllFields(Fields fields){\n    for(String field : fields.getFields().keySet()){\n        if(!properties.containsKey(field)){\n            return false;\n        }\n    }\n    return true;\n}",
               "ground_true": "private boolean containsAllFields(Fields fields){\n  if (this.properties.size() < fields.properties.size()) {\n    return false;\n  }\n  boolean isContains=fields.properties.entrySet().stream().allMatch(item -> Objects.equals(properties.get(item.getKey()),item.getValue()));\n  if (!isContains) {\n    return false;\n  }\n  return fields.source.getExcludes().containsAll(this.source.getExcludes());\n}\n"
          },
          {
               "id": "636767e11a6d9265ec018790",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    try (FileInputStream fis = new FileInputStream(file);\n         BufferedInputStream bis = new BufferedInputStream(fis)) {\n        // Read the header\n        byte[] header = new byte[4];\n        bis.read(header);\n        int snapshotCount = header[0] & 0xFF;\n        // Read the snapshot data\n        for (int i = 0; i < snapshotCount; i++) {\n            byte[] snapshotData = new byte[4];\n            bis.read(snapshotData);\n            int snapshotSize = snapshotData[0] & 0xFF;\n            byte[] snapshotBytes = new byte[snapshotSize];\n            bis.read(snapshotBytes);\n            ThreadSnapshot threadSnapshot = ThreadSnapshot.parseFrom(snapshotBytes);\n            threadSnapshots.add(threadSnapshot);\n        }\n    }\n    return threadSnapshots;\n}",
               "ground_true": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n  try (final FileInputStream fileInputStream=new FileInputStream(file)){\n    ThreadSnapshot snapshot;\n    final ArrayList<ThreadSnapshot> data=new ArrayList<>();\n    while ((snapshot=ThreadSnapshot.parseDelimitedFrom(fileInputStream)) != null) {\n      ThreadSnapshot finalSnapshot=snapshot;\n      if (timeRanges.stream().filter(t -> finalSnapshot.getTime() >= t.getStart() && finalSnapshot.getTime() <= t.getEnd()).findFirst().isPresent()) {\n        data.add(snapshot);\n      }\n    }\n    return data;\n  }\n }\n"
          },
          {
               "id": "636766a91a6d9265ec0175c2",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private int pop(){\n    int result = outputStack[--outputStackTop];\n    return result;\n}",
               "ground_true": "private int pop(){\n  if (outputStackTop > 0) {\n    return outputStack[--outputStackTop];\n  }\n else {\n    return STACK_KIND | -(--outputStackStart);\n  }\n}\n"
          },
          {
               "id": "636766aa1a6d9265ec0175ce",
               "type": [
                    "Inconsistent Expression",
                    "Missing Range Checks"
               ],
               "type_id": [
                    9,
                    3
               ],
               "generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    int frameType = 0;\n    if (previousFrame == null) {\n        frameType = 0x9B;\n    } else {\n        frameType = 0x9C;\n    }\n    int frameSize = 1 + numLocal + numStack;\n    int[] frame = new int[frameSize];\n    frame[0] = frameType;\n    System.arraycopy(previousFrame, 0, frame, 1, numLocal);\n    System.arraycopy(currentFrame, 0, frame, 1 + numLocal, numStack);\n    previousFrame = currentFrame;\n    currentFrame = frame;\n    return frameSize;\n}",
               "ground_true": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n  int frameLength=3 + numLocal + numStack;\n  if (currentFrame == null || currentFrame.length < frameLength) {\n    currentFrame=new int[frameLength];\n  }\n  currentFrame[0]=offset;\n  currentFrame[1]=numLocal;\n  currentFrame[2]=numStack;\n  return 3;\n}\n"
          },
          {
               "id": "636766a91a6d9265ec0175c1",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private void enlarge(final int size){\n    byte[] newData = new byte[data.length + size];\n    System.arraycopy(data, 0, newData, 0, data.length);\n    data = newData;\n}",
               "ground_true": "private void enlarge(final int size){\n  int doubleCapacity=2 * data.length;\n  int minimalCapacity=length + size;\n  byte[] newData=new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\n  System.arraycopy(data,0,newData,0,length);\n  data=newData;\n}\n"
          },
          {
               "id": "636766a91a6d9265ec0175ae",
               "type": [
                    "Missing Range Checks",
                    "Missing Null Checks"
               ],
               "type_id": [
                    3,
                    1
               ],
               "generate_code": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n    if(byteLength > 0){\n        enlarge(byteLength);\n        System.arraycopy(byteArrayValue,byteOffset,data,length,byteLength);\n        length += byteLength;\n    }\n    return this;\n}",
               "ground_true": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){\n  if (length + byteLength > data.length) {\n    enlarge(byteLength);\n  }\n  if (byteArrayValue != null) {\n    System.arraycopy(byteArrayValue,byteOffset,data,length,byteLength);\n  }\n  length+=byteLength;\n  return this;\n}\n"
          },
          {
               "id": "636766a81a6d9265ec017596",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public ByteVector putInt(final int intValue){\n    putByte((intValue >> 24) & 0xFF);\n    putByte((intValue >> 16) & 0xFF);\n    putByte((intValue >> 8) & 0xFF);\n    putByte(intValue & 0xFF);\n    return this;\n}",
               "ground_true": "public ByteVector putInt(final int intValue){\n  int currentLength=length;\n  if (currentLength + 4 > data.length) {\n    enlarge(4);\n  }\n  byte[] currentData=data;\n  currentData[currentLength++]=(byte)(intValue >>> 24);\n  currentData[currentLength++]=(byte)(intValue >>> 16);\n  currentData[currentLength++]=(byte)(intValue >>> 8);\n  currentData[currentLength++]=(byte)intValue;\n  length=currentLength;\n  return this;\n}\n"
          },
          {
               "id": "636766a91a6d9265ec0175c4",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private void pop(final String descriptor){\n    switch(descriptor.charAt(0)){\n        case '[':\n            pop(descriptor.length());\n            break;\n        case 'B':\n            pop(ITEM_BYTE);\n            break;\n        case 'C':\n            pop(ITEM_CHAR);\n            break;\n        case 'D':\n            pop(ITEM_DOUBLE);\n            break;\n        case 'F':\n            pop(ITEM_FLOAT);\n            break;\n        case 'I':\n            pop(ITEM_INTEGER);\n            break;\n        case 'J':\n            pop(ITEM_LONG);\n            break;\n        case 'S':\n            pop(ITEM_SHORT);\n            break;\n        case 'Z':\n            pop(ITEM_BOOLEAN);\n            break;\n        case 'L':\n        case 'Q':\n            pop(ITEM_OBJECT);\n            break;\n        case 'V':\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}",
               "ground_true": "private void pop(final String descriptor){\n  char firstDescriptorChar=descriptor.charAt(0);\n  if (firstDescriptorChar == '(') {\n    pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1);\n  }\n else   if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n    pop(2);\n  }\n else {\n    pop(1);\n  }\n}\n"
          },
          {
               "id": "636766a81a6d9265ec01757b",
               "type": [
                    "Missing Error Handling ",
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    7,
                    1,
                    2
               ],
               "generate_code": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n    return JSONWriter.write(this,features);\n}",
               "ground_true": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n  try (JSONWriter writer=JSONWriter.of(features)){\n    if ((writer.context.features & NONE_DIRECT_FEATURES) == 0) {\n      writer.write(this);\n    }\n else {\n      writer.setRootObject(this);\n      if (arrayWriter == null) {\n        arrayWriter=writer.getObjectWriter(JSONArray.class,JSONArray.class);\n      }\n      arrayWriter.write(writer,this,null,null,0);\n    }\n    return writer.toString();\n  }\n }\n"
          },
          {
               "id": "636766a81a6d9265ec01758e",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static int nextPrime(int desiredCapacity){\n    return primeCapacities[desiredCapacity];\n}",
               "ground_true": "public static int nextPrime(int desiredCapacity){\n  if (desiredCapacity >= largestPrime) {\n    return largestPrime;\n  }\n  int i=Arrays.binarySearch(primeCapacities,desiredCapacity);\n  if (i < 0) {\n    i=-i - 1;\n  }\n  return primeCapacities[i];\n}\n"
          },
          {
               "id": "636767a41a6d9265ec018582",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    ProtobufOutput output = new ProtobufOutput(out,buffer);\n    int size = schema.writeDelimitedTo(message,output);\n    output.flush();\n    return size;\n}",
               "ground_true": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n  if (buffer.start != buffer.offset)   throw new IllegalArgumentException(\"Buffer previously used and had not been reset.\");\n  final ProtobufOutput output=new ProtobufOutput(buffer);\n  schema.writeTo(output,message);\n  final int size=output.getSize();\n  ProtobufOutput.writeRawVarInt32Bytes(out,size);\n  final int msgSize=LinkedBuffer.writeTo(out,buffer);\n  assert size == msgSize;\n  return size;\n}\n"
          },
          {
               "id": "636767ab1a6d9265ec01867b",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n  return writeUTF8(str,0,str.length(),session,lb);\n}",
               "ground_true": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n  final int len=str.length();\n  if (len == 0)   return lb;\n  return lb.offset + len > lb.buffer.length ? writeUTF8(str,0,len,lb.buffer,lb.offset,lb.buffer.length,session,lb) : writeUTF8(str,0,len,session,lb);\n}\n"
          },
          {
               "id": "636767a41a6d9265ec018572",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "public long readRawVarint64() throws IOException {\n    return readRawVarint64(input);\n}",
               "ground_true": "public long readRawVarint64() throws IOException {\n  int shift=0;\n  long result=0;\n  while (shift < 64) {\n    final byte b=readRawByte();\n    result|=(long)(b & 0x7F) << shift;\n    if ((b & 0x80) == 0) {\n      return result;\n    }\n    shift+=7;\n  }\n  throw ProtobufException.malformedVarint();\n}\n"
          },
          {
               "id": "636767aa1a6d9265ec01865a",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n    int total = 0;\n    while (node != null) {\n        out.write(node.buffer,node.start,node.offset);\n        total += node.offset;\n        node = node.next;\n    }\n    return total;\n}",
               "ground_true": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {\n  int contentSize=0, len;\n  do {\n    if ((len=node.offset - node.start) > 0) {\n      out.write(node.buffer,node.start,len);\n      contentSize+=len;\n    }\n  }\n while ((node=node.next) != null);\n  return contentSize;\n}\n"
          },
          {
               "id": "636767a21a6d9265ec018517",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public final byte[] toByteArray(){\n    byte[] result = new byte[size];\n    LinkedBuffer current = head;\n    int offset = 0;\n    while(current != null){\n        System.arraycopy(current.buf,current.offset,result,offset,current.len);\n        offset += current.len;\n        current = current.next;\n    }\n    return result;\n}",
               "ground_true": "public final byte[] toByteArray(){\n  LinkedBuffer node=head;\n  int offset=0, len;\n  final byte[] buf=new byte[size];\n  do {\n    if ((len=node.offset - node.start) > 0) {\n      System.arraycopy(node.buffer,node.start,buf,offset,len);\n      offset+=len;\n    }\n  }\n while ((node=node.next) != null);\n  return buf;\n}\n"
          },
          {
               "id": "636767a31a6d9265ec01854f",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "private void checkIfPackedField() throws IOException {\n    if (isCurrentFieldPacked()) {\n        readPackedField();\n    }\n}",
               "ground_true": "private void checkIfPackedField() throws IOException {\n  if (packedLimit == 0 && WireFormat.getTagWireType(lastTag) == WIRETYPE_LENGTH_DELIMITED) {\n    final int length=readRawVarint32();\n    if (length < 0)     throw ProtobufException.negativeSize();\n    this.packedLimit=getTotalBytesRead() + length;\n  }\n}\n"
          }
     ]
}
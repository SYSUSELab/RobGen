{
     "datas": [
          {
               "id": "6367670b1a6d9265ec017a00",
               "type": [
                    "Missing Range Checks",
                    "Missing Null Checks"
               ],
               "type_id": [
                    3,
                    1
               ],
               "generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return array1.length == array2.length;\n}",
               "ground_true": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
          },
          {
               "id": "636767031a6d9265ec0178e6",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static byte[] toPrimitive(final Byte[] array){\n    if(array == null){\n        return null;\n    }\n    final byte[] primitives = new byte[array.length];\n    for(int i = 0; i < array.length; i++){\n        primitives[i] = array[i].byteValue();\n    }\n    return primitives;\n}",
               "ground_true": "public static byte[] toPrimitive(final Byte[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_BYTE_ARRAY;\n  }\n  final byte[] result=new byte[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].byteValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766f11a6d9265ec017651",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Character[] nullToEmpty(final Character[] array){\n    return (array == null) ? EMPTY_CHARACTER_OBJECT_ARRAY : array;\n}",
               "ground_true": "public static Character[] nullToEmpty(final Character[] array){\n  if (array == null || array.length == 0) {\n    return ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;\n  }\n  return array;\n}\n"
          },
          {
               "id": "636766ff1a6d9265ec017842",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static double[] toPrimitive(final Double[] array){\n    if(array.length == 0){\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] result = new double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}",
               "ground_true": "public static double[] toPrimitive(final Double[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_DOUBLE_ARRAY;\n  }\n  final double[] result=new double[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].doubleValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766fa1a6d9265ec017796",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Boolean[] toObject(final boolean[] array){\n    if(array == null){\n        return null;\n    }\n    final Boolean[] result = new Boolean[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = array[i];\n    }\n    return result;\n}",
               "ground_true": "public static Boolean[] toObject(final boolean[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;\n  }\n  final Boolean[] result=new Boolean[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i] ? Boolean.TRUE : Boolean.FALSE;\n  }\n  return result;\n}\n"
          },
          {
               "id": "6367670a1a6d9265ec0179f1",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Short[] toObject(final short[] array){\n    if(array == null){\n        return null;\n    }\n    final Short[] result = new Short[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Short.valueOf(array[i]);\n    }\n    return result;\n}",
               "ground_true": "public static Short[] toObject(final short[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;\n  }\n  final Short[] result=new Short[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=new Short(array[i]);\n  }\n  return result;\n}\n"
          },
          {
               "id": "636767041a6d9265ec01790f",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Integer[] toObject(final int[] array){\n    if(array == null){\n        return null;\n    }\n    final Integer[] result = new Integer[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Integer.valueOf(array[i]);\n    }\n    return result;\n}",
               "ground_true": "public static Integer[] toObject(final int[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;\n  }\n  final Integer[] result=new Integer[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=new Integer(array[i]);\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766fa1a6d9265ec0177a4",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Double[] toObject(final double[] array){\n    if(array == null){\n        return null;\n    }\n    final Double[] result = new Double[array.length];\n    for(int i = 0; i < array.length; i++){\n        result[i] = Double.valueOf(array[i]);\n    }\n    return result;\n}",
               "ground_true": "public static Double[] toObject(final double[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;\n  }\n  final Double[] result=new Double[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=new Double(array[i]);\n  }\n  return result;\n}\n"
          },
          {
               "id": "636767151a6d9265ec017b6b",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\nif(str==null||prefix==null){\nreturn str==null&&prefix==null;\n}\nif(ignoreCase){\nreturn str.startsWith(prefix);\n}\nreturn str.equals(prefix);\n}",
               "ground_true": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n  if (str == null || prefix == null) {\n    return str == null && prefix == null;\n  }\n  if (prefix.length() > str.length()) {\n    return false;\n  }\n  return str.regionMatches(ignoreCase,0,prefix,0,prefix.length());\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec01781c",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static Character toCharacterObject(final char ch){\n    return Character.valueOf(ch);\n}",
               "ground_true": "public static Character toCharacterObject(final char ch){\n  if (ch < CharUtils.CHAR_ARRAY.length) {\n    return CharUtils.CHAR_ARRAY[ch];\n  }\n  return new Character(ch);\n}\n"
          },
          {
               "id": "636766f81a6d9265ec017748",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public static String base64Decode(final String s){\n    return new String(base64DecodeToArray(s),StandardCharsets.UTF_8);\n}",
               "ground_true": "public static String base64Decode(final String s){\n  byte[] b=Base64.base64DecodeToArray(s);\n  if (b == null) {\n    return null;\n  }\n  if (b.length == 0) {\n    return \"\";\n  }\n  return new String(b,StandardCharsets.UTF_8);\n}\n"
          },
          {
               "id": "636766f11a6d9265ec017663",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n    return (array1 == null && array2 == null) || (array1 != null && array1.length == array2.length);\n}",
               "ground_true": "public static boolean isSameLength(final double[] array1,final double[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
          },
          {
               "id": "636766f31a6d9265ec01768f",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static char[] clone(final char[] array){\n    return array.clone();\n}",
               "ground_true": "public static char[] clone(final char[] array){\n  if (array == null) {\n    return null;\n  }\n  return array.clone();\n}\n"
          },
          {
               "id": "6367670b1a6d9265ec017a05",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static String toString(final char ch){\n    return new String(new char[]{ch});\n}",
               "ground_true": "public static String toString(final char ch){\n  if (ch < 128) {\n    return CharUtils.CHAR_STRING_ARRAY[ch];\n  }\n  return new String(new char[]{ch});\n}\n"
          },
          {
               "id": "636767191a6d9265ec017c0f",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private void enlarge(final int size){\n    if(size > 0){\n        final int newSize = data.length + size;\n        final byte[] newData = new byte[newSize];\n        System.arraycopy(data, 0, newData, 0, data.length);\n        data = newData;\n    }\n}",
               "ground_true": "private void enlarge(final int size){\n  int doubleCapacity=2 * data.length;\n  int minimalCapacity=length + size;\n  byte[] newData=new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity];\n  System.arraycopy(data,0,newData,0,length);\n  data=newData;\n}\n"
          },
          {
               "id": "636766ef1a6d9265ec01761a",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    2,
                    4
               ],
               "generate_code": "int addType(final String value){\n    return addType(value,0);\n}",
               "ground_true": "int addType(final String value){\n  int hashCode=hash(Symbol.TYPE_TAG,value);\n  Entry entry=get(hashCode);\n  while (entry != null) {\n    if (entry.tag == Symbol.TYPE_TAG && entry.hashCode == hashCode && entry.value.equals(value)) {\n      return entry.index;\n    }\n    entry=entry.next;\n  }\n  return addTypeInternal(new Entry(typeCount,Symbol.TYPE_TAG,value,hashCode));\n}\n"
          },
          {
               "id": "636767021a6d9265ec0178b2",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private void pop(final String descriptor){\n    final int length = descriptor.length();\n    final char firstChar = descriptor.charAt(0);\n    switch(firstChar){\n        case 'B':\n            popByte();\n            break;\n        case 'C':\n            popChar();\n            break;\n        case 'D':\n            popDouble();\n            break;\n        case 'F':\n            popFloat();\n            break;\n        case 'I':\n            popInt();\n            break;\n        case 'J':\n            popLong();\n            break;\n        case 'S':\n            popShort();\n            break;\n        case 'Z':\n            popBoolean();\n            break;\n        case '[':\n            popArray(descriptor);\n            break;\n        case 'L':\n            popObject(descriptor);\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}",
               "ground_true": "private void pop(final String descriptor){\n  char firstDescriptorChar=descriptor.charAt(0);\n  if (firstDescriptorChar == '(') {\n    pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1);\n  }\n else   if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n    pop(2);\n  }\n else {\n    pop(1);\n  }\n}\n"
          },
          {
               "id": "636766fa1a6d9265ec0177a9",
               "type": [
                    "Missing Null Checks",
                    "Inconsistent Expression"
               ],
               "type_id": [
                    1,
                    9
               ],
               "generate_code": "private void addInitializedType(final int abstractType){\n    if(initializationCount==initializations.length){\n        int[] newInitializations=new int[initializationCount*2];\n        System.arraycopy(initializations,0,newInitializations,0,initializationCount);\n        initializations=newInitializations;\n    }\n    initializations[initializationCount++]=abstractType;\n}",
               "ground_true": "private void addInitializedType(final int abstractType){\n  if (initializations == null) {\n    initializations=new int[2];\n  }\n  int initializationsLength=initializations.length;\n  if (initializationCount >= initializationsLength) {\n    int[] newInitializations=new int[Math.max(initializationCount + 1,2 * initializationsLength)];\n    System.arraycopy(initializations,0,newInitializations,0,initializationsLength);\n    initializations=newInitializations;\n  }\n  initializations[initializationCount++]=abstractType;\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec01782a",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    final int utfOffset = this.constantPoolEntries[constantPoolEntryIndex];\n    final int utfLength = this.readShort(utfOffset);\n    this.readUTF8(utfOffset,charBuffer);\n    return new String(charBuffer,0,utfLength);\n}",
               "ground_true": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n  String value=constantUtf8Values[constantPoolEntryIndex];\n  if (value != null) {\n    return value;\n  }\n  int cpInfoOffset=cpInfoOffsets[constantPoolEntryIndex];\n  return constantUtf8Values[constantPoolEntryIndex]=readUtf(cpInfoOffset + 2,readUnsignedShort(cpInfoOffset),charBuffer);\n}\n"
          },
          {
               "id": "636766f81a6d9265ec017758",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "@Override public int hashCode(){\n    return sort;\n}",
               "ground_true": "@Override public int hashCode(){\n  int hashCode=13 * (sort == INTERNAL ? OBJECT : sort);\n  if (sort >= ARRAY) {\n    for (int i=valueBegin, end=valueEnd; i < end; i++) {\n      hashCode=17 * (hashCode + valueBuffer.charAt(i));\n    }\n  }\n  return hashCode;\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017823",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    2,
                    4
               ],
               "generate_code": "int addConstantNameAndType(final String name,final String descriptor){\n    return addConstantNameAndType(index,name,descriptor);\n}",
               "ground_true": "int addConstantNameAndType(final String name,final String descriptor){\n  final int tag=Symbol.CONSTANT_NAME_AND_TYPE_TAG;\n  int hashCode=hash(tag,name,descriptor);\n  Entry entry=get(hashCode);\n  while (entry != null) {\n    if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) {\n      return entry.index;\n    }\n    entry=entry.next;\n  }\n  constantPool.put122(tag,addConstantUtf8(name),addConstantUtf8(descriptor));\n  return put(new Entry(constantPoolCount++,tag,name,descriptor,hashCode)).index;\n}\n"
          },
          {
               "id": "636767061a6d9265ec01794a",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static int indexOfExtension(String filename){\n    int extensionPos = filename.lastIndexOf(EXTENSION_SEPARATOR);\n    int lastSeparator = indexOfLastSeparator(filename);\n    return lastSeparator > extensionPos ? -1 : extensionPos;\n}",
               "ground_true": "public static int indexOfExtension(String filename){\n  if (filename == null) {\n    return -1;\n  }\n  int extensionPos=filename.lastIndexOf(EXTENSION_SEPARATOR);\n  int lastSeparator=indexOfLastSeparator(filename);\n  return lastSeparator > extensionPos ? -1 : extensionPos;\n}\n"
          },
          {
               "id": "6367670a1a6d9265ec0179d8",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "@Override public void write(final byte[] b) throws IOException {\n    write(b, 0, b.length);\n}",
               "ground_true": "@Override public void write(final byte[] b) throws IOException {\n  if (this.encoding == null) {\n    this.writer.write(new String(b));\n  }\n else {\n    this.writer.write(new String(b,this.encoding));\n  }\n}\n"
          },
          {
               "id": "636767001a6d9265ec01787e",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public String toString(){\n    return this.toString(this.buffer, this.style, this.outputTransients, this.outputStatics, this.upToClass);\n}",
               "ground_true": "public String toString(){\n  if (this.getObject() == null) {\n    return this.getStyle().getNullText();\n  }\n  Class<?> clazz=this.getObject().getClass();\n  this.appendFieldsIn(clazz);\n  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {\n    clazz=clazz.getSuperclass();\n    this.appendFieldsIn(clazz);\n  }\n  return super.toString();\n}\n"
          },
          {
               "id": "636767041a6d9265ec017911",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "static void register(Object value){\n    if (value != null) {\n        REGISTRY.set(value);\n    }\n}",
               "ground_true": "static void register(Object value){\n  if (value != null) {\n    Map m=getRegistry();\n    if (m == null) {\n      m=new WeakHashMap();\n      REGISTRY.set(m);\n    }\n    m.put(value,null);\n  }\n}\n"
          },
          {
               "id": "636766f11a6d9265ec017641",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public int available() throws IOException {\n    if (index >= length) {\n        return 0;\n    }\n    return length - index;\n}",
               "ground_true": "@Override public int available() throws IOException {\n  return this.index < this.length ? this.length - this.index : this.length >= 0 && this.reader.ready() ? 1 : 0;\n}\n"
          },
          {
               "id": "6367670a1a6d9265ec0179e7",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public Converter lookup(final Class<?> clazz){\n    return lookup(clazz, null);\n}",
               "ground_true": "public Converter lookup(final Class<?> clazz){\n  Converter conv=(Converter)this.converters.get(clazz);\n  if (conv != null) {\n    return conv;\n  }\n  for (  Object regType : this.converters.keySet()) {\n    if (((Class<?>)regType).isAssignableFrom(clazz)) {\n      return (Converter)this.converters.get(regType);\n    }\n  }\n  return null;\n}\n"
          },
          {
               "id": "6367670b1a6d9265ec0179f2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public boolean containsKey(final Object key){\n    return map.containsKey(key);\n}",
               "ground_true": "@Override public boolean containsKey(final Object key){\n  if (this.fast) {\n    return this.map.containsKey(key);\n  }\n else {\nsynchronized (this.map) {\n      return this.map.containsKey(key);\n    }\n  }\n}\n"
          },
          {
               "id": "636766f11a6d9265ec01764f",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public Collection<Object> values(){\n    return Collections.unmodifiableCollection(this.values);\n}",
               "ground_true": "public Collection<Object> values(){\n  ArrayList<Object> answer=new ArrayList<>(readMethods.size());\n  for (Iterator<Object> iter=valueIterator(); iter.hasNext(); ) {\n    answer.add(iter.next());\n  }\n  return Collections.unmodifiableList(answer);\n}\n"
          },
          {
               "id": "636767071a6d9265ec017962",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Null Checks"
               ],
               "type_id": [
                    4,
                    1
               ],
               "generate_code": "public void putAllWriteable(BeanMap map){\n    for (Map.Entry<String, Method> entry : map.readMethods.entrySet()) {\n        put(entry.getKey(), entry.getValue());\n    }\n    for (Map.Entry<String, Method> entry : map.writeMethods.entrySet()) {\n        put(entry.getKey(), entry.getValue());\n    }\n}",
               "ground_true": "public void putAllWriteable(BeanMap map){\n  Iterator<String> readableKeys=map.readMethods.keySet().iterator();\n  while (readableKeys.hasNext()) {\n    String key=readableKeys.next();\n    if (getWriteMethod(key) != null) {\n      this.put(key,map.get(key));\n    }\n  }\n}\n"
          },
          {
               "id": "636767121a6d9265ec017b0a",
               "type": [
                    "Missing Range Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    3,
                    2
               ],
               "generate_code": "private int parseEndOfLine(String headerPart,int end){\n    int index = headerPart.indexOf('\\n',end);\n    if (index < 0) {\n        index = headerPart.indexOf('\\r',end);\n    }\n    return index;\n}",
               "ground_true": "private int parseEndOfLine(String headerPart,int end){\n  int index=end;\n  for (; ; ) {\n    int offset=headerPart.indexOf('\\r',index);\n    if (offset == -1 || offset + 1 >= headerPart.length()) {\n      throw new IllegalStateException(\"Expected headers to be terminated by an empty line.\");\n    }\n    if (headerPart.charAt(offset + 1) == '\\n') {\n      return offset;\n    }\n    index=offset + 1;\n  }\n}\n"
          },
          {
               "id": "636766f81a6d9265ec01774b",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public byte readByte() throws IOException {\n    if (this.head == this.tail) {\n        this.readBuffer();\n    }\n    return this.buffer[this.head++];\n}",
               "ground_true": "public byte readByte() throws IOException {\n  if (head == tail) {\n    head=0;\n    tail=input.read(buffer,head,bufSize);\n    if (tail == -1) {\n      throw new IOException(\"No more data is available\");\n    }\n  }\n  return buffer[head++];\n}\n"
          },
          {
               "id": "636767021a6d9265ec0178bc",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}",
               "ground_true": "public static int indexOf(String str,String searchStr){\n  if (str == null || searchStr == null) {\n    return StringUtils.INDEX_NOT_FOUND;\n  }\n  return str.indexOf(searchStr);\n}\n"
          },
          {
               "id": "636766fc1a6d9265ec0177da",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    4,
                    2
               ],
               "generate_code": "private static boolean isParameterSeparator(final char c){\n    return PARAMETER_SEPARATORS[c];\n}",
               "ground_true": "private static boolean isParameterSeparator(final char c){\n  if (Character.isWhitespace(c)) {\n    return true;\n  }\n  for (  char separator : PARAMETER_SEPARATORS) {\n    if (c == separator) {\n      return true;\n    }\n  }\n  return false;\n}\n"
          },
          {
               "id": "636767031a6d9265ec0178ef",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    final int length = Array.getLength(array);\n    final Object newArray = Array.newInstance(newArrayComponentType,length+1);\n    System.arraycopy(array,0,newArray,0,length);\n    Array.set(newArray,length,newArrayComponentType.getConstructor().newInstance());\n    return newArray;\n}",
               "ground_true": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n  if (array != null) {\n    int arrayLength=Array.getLength(array);\n    Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);\n    System.arraycopy(array,0,newArray,0,arrayLength);\n    return newArray;\n  }\n  return Array.newInstance(newArrayComponentType,1);\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017834",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String sessionId(){\n    return ServletUtils.sessionId();\n}",
               "ground_true": "public static String sessionId(){\n  HttpSession httpSession=servletSession();\n  if (httpSession == null) {\n    return null;\n  }\n  return httpSession.getId();\n}\n"
          },
          {
               "id": "636766ae1a6d9265ec0175dc",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public Boolean isPartialContentResponse(){\n    return false;\n}",
               "ground_true": "public Boolean isPartialContentResponse(){\n  Integer limit=drc.getLimit() == null ? 0 : drc.getLimit();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return !((limit + 1) >= count);\n}\n"
          },
          {
               "id": "636766ae1a6d9265ec0175d8",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private String buildContentRange(){\n    String contentRange = null;\n    if (this.count > 0) {\n        contentRange = \"bytes \" + this.offset + \"-\" + (this.limit == 0 ? (this.count - 1) : (this.limit - 1)) + \"/\" + this.count;\n    }\n    return contentRange;\n}",
               "ground_true": "private String buildContentRange(){\n  Integer limit=drc.getLimit() == null ? getDefaultNumberPagination() - 1 : drc.getLimit();\n  Integer offset=drc.getOffset() == null ? 0 : drc.getOffset();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return offset + \"-\" + (limit.equals(0) ? count - 1 : limit)+ \"/\"+ count;\n}\n"
          },
          {
               "id": "636767501a6d9265ec017e86",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public ListNode<E> previousNode(){\n    return this.prev;\n}",
               "ground_true": "@Override public ListNode<E> previousNode(){\n  checkForComodification();\n  if (!hasPrevious()) {\n    throw new NoSuchElementException();\n  }\n  last=next=next.prev;\n  nextIndex--;\n  return last;\n}\n"
          },
          {
               "id": "636767631a6d9265ec018171",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    4,
                    2
               ],
               "generate_code": "private boolean unlink(ListNodeImpl<E> node){\n    ListNodeImpl<E> prev = node.prev;\n    ListNodeImpl<E> next = node.next;\n    prev.next = next;\n    next.prev = prev;\n    node.prev = null;\n    node.next = null;\n    size--;\n    node.value = null;\n    expectedModCount++;\n    return true;\n}",
               "ground_true": "private boolean unlink(ListNodeImpl<E> node){\n  ListNodeImpl<E> prev=node.prev;\n  ListNodeImpl<E> next=node.next;\n  if (removeListNode(node)) {\n    if (size == 0) {\n      head=null;\n    }\n else {\n      link(prev,next);\n      if (head == node) {\n        head=next;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n"
          },
          {
               "id": "6367674a1a6d9265ec017da9",
               "type": [
                    "Missing Assertions",
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    6,
                    2,
                    4
               ],
               "generate_code": "private void moveAllListNodes(DoublyLinkedList<E> list){\n    ListNodeImpl<E> node = list.head;\n    while(node != null){\n        addNodeLast(node);\n        node = node.next;\n    }\n}",
               "ground_true": "private void moveAllListNodes(DoublyLinkedList<E> list){\n  for (ListNodeIteratorImpl it=list.new ListNodeIteratorImpl(0); it.hasNext(); ) {\n    ListNodeImpl<E> node=it.nextNode();\n    assert node.list == list;\n    node.list=this;\n  }\n  size+=list.size;\n  list.size=0;\n  modCount++;\n  list.modCount++;\n}\n"
          },
          {
               "id": "636767561a6d9265ec017f63",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "@Override public boolean hasNext(){\n    return !isEmpty();\n}",
               "ground_true": "@Override public boolean hasNext(){\n  if (current != null) {\n    return true;\n  }\n  current=advance();\n  if (current != null && nListeners != 0) {\n    fireVertexTraversed(createVertexTraversalEvent(current));\n  }\n  return current != null;\n}\n"
          },
          {
               "id": "6367675a1a6d9265ec018010",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "void removeSelf(){\n    prev.next = next;\n    next.prev = prev;\n}",
               "ground_true": "void removeSelf(){\n  if (next != null) {\n    next.prev=prev;\n  }\n  if (prev != null) {\n    prev.next=next;\n  }\n}\n"
          },
          {
               "id": "6367674b1a6d9265ec017dc0",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<V>();\n    for (E e : graph.edgeSet()) {\n        V v1 = graph.getEdgeSource(e);\n        V v2 = graph.getEdgeTarget(e);\n        visibleVertices.add(v1);\n        visibleVertices.add(v2);\n    }\n    return visibleVertices;\n}",
               "ground_true": "private Set<V> initVisibleVertices(){\n  Set<V> visibleVertex=new HashSet<>();\n  for (  E e : graph.edgeSet()) {\n    V s=graph.getEdgeSource(e);\n    V t=graph.getEdgeTarget(e);\n    if (!s.equals(t)) {\n      visibleVertex.add(s);\n      visibleVertex.add(t);\n    }\n  }\n  return visibleVertex;\n}\n"
          },
          {
               "id": "6367675c1a6d9265ec01805b",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "public void removeFromTreeEdgeList(){\n    if (this.prev != null) this.prev.next = this.next;\n    if (this.next != null) this.next.prev = this.prev;\n    this.prev = null;\n    this.next = null;\n}",
               "ground_true": "public void removeFromTreeEdgeList(){\n  for (int dir=0; dir < 2; dir++) {\n    if (prev[dir] != null) {\n      prev[dir].next[dir]=next[dir];\n    }\n else {\n      head[1 - dir].first[dir]=next[dir];\n    }\n    if (next[dir] != null) {\n      next[dir].prev[dir]=prev[dir];\n    }\n  }\n  head[0]=head[1]=null;\n}\n"
          },
          {
               "id": "636767531a6d9265ec017ef1",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static boolean equals(Point2D p1,Point2D p2){\n    return TOLERANCE_DOUBLE_COMPARATOR.equals(p1,p2);\n}",
               "ground_true": "public static boolean equals(Point2D p1,Point2D p2){\n  int xEquals=TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getX(),p2.getX());\n  if (xEquals != 0) {\n    return false;\n  }\n  return TOLERANCE_DOUBLE_COMPARATOR.compare(p1.getY(),p2.getY()) == 0;\n}\n"
          },
          {
               "id": "636767431a6d9265ec017c8d",
               "type": [
                    "Missing Assertions",
                    "Missing Range Checks"
               ],
               "type_id": [
                    6,
                    3
               ],
               "generate_code": "private int computeBinaryLog(int n){\n    int log = 0;\n    while (n > 1) {\n        n = n >> 1;\n        log++;\n    }\n    return log;\n}",
               "ground_true": "private int computeBinaryLog(int n){\n  assert n >= 0;\n  int result=0;\n  while (n > 0) {\n    n>>=1;\n    ++result;\n  }\n  return result;\n}\n"
          },
          {
               "id": "636767611a6d9265ec018116",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n    Set<V> intersection = new HashSet<V>();\n    for(V v : set1){\n        if(set2.contains(v)){\n            intersection.add(v);\n        }\n    }\n    return intersection;\n}",
               "ground_true": "private Set<V> intersection(Set<V> set1,Set<V> set2){\n  Set<V> a;\n  Set<V> b;\n  if (set1.size() <= set2.size()) {\n    a=set1;\n    b=set2;\n  }\n else {\n    a=set2;\n    b=set1;\n  }\n  return a.stream().filter(b::contains).collect(Collectors.toSet());\n}\n"
          },
          {
               "id": "636767511a6d9265ec017eb6",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    2,
                    4
               ],
               "generate_code": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n    OuterFaceCirculator circulator = new OuterFaceCirculator(start,stop);\n    while(circulator.hasNext()){\n        Node node = circulator.next();\n        if(predicate.test(node)){\n            return circulator;\n        }\n    }\n    return null;\n}",
               "ground_true": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n  OuterFaceCirculator circulator=start.iterator(dir);\n  Node current=circulator.next();\n  while (current != stop && !predicate.test(current)) {\n    current=circulator.next();\n  }\n  return circulator;\n}\n"
          },
          {
               "id": "6367675d1a6d9265ec018082",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "Edge edgeToNext(){\nreturn null;\n}",
               "ground_true": "Edge edgeToNext(){\n  Edge edge=prev.embedded.getFirst();\n  Node target=toExistingNode(current);\n  Node source=toExistingNode(prev);\n  if (edge.getOpposite(source) == target) {\n    return edge;\n  }\n else {\n    return prev.embedded.getLast();\n  }\n}\n"
          },
          {
               "id": "636767611a6d9265ec018112",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    4,
                    3
               ],
               "generate_code": "@Override protected V provideNextVertex(){\n    if (nextVertex == null){\n        nextVertex = graph.nextVertex();\n    }\n    return nextVertex;\n}",
               "ground_true": "@Override protected V provideNextVertex(){\n  V v=super.provideNextVertex();\n  for (int i=path.size() - 1; i >= 0; --i) {\n    if (graph.containsEdge(path.get(i),v)) {\n      break;\n    }\n    path.remove(i);\n  }\n  path.add(v);\n  return v;\n}\n"
          },
          {
               "id": "636767601a6d9265ec0180e2",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> separators = new ArrayList<Pair<List<Pair<Integer,Integer>>,E>>();\n    for(E edge : graph.edgeSet()){\n        List<Pair<Integer,Integer>> separatorsOfEdge = getSeparator(graph,edge);\n        separators.add(new Pair<List<Pair<Integer,Integer>>,E>(separatorsOfEdge,edge));\n    }\n    return separators;\n}",
               "ground_true": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n  List<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList=new ArrayList<>();\n  for (  E edge : graph.edgeSet()) {\n    V source=graph.getEdgeSource(edge);\n    V target=graph.getEdgeTarget(edge);\n    if (source != target) {\n      List<Set<V>> edgeSeparators=findSeparators(graph,edge);\n      globalSeparatorList.addAll(reformatSeparatorList(edgeSeparators,edge));\n    }\n  }\n  return globalSeparatorList;\n}\n"
          },
          {
               "id": "6367675f1a6d9265ec0180cf",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n    for(V v:vertices){\n        for(V w:vertices){\n            if(!graph.containsEdge(v,w)){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
               "ground_true": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){\n  for (  V v1 : vertices) {\n    for (    V v2 : vertices) {\n      if (!v1.equals(v2) && (graph.getEdge(v1,v2) == null)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n"
          },
          {
               "id": "636767511a6d9265ec017eb0",
               "type": [
                    "Missing Assertions",
                    "Missing Range Checks"
               ],
               "type_id": [
                    6,
                    3
               ],
               "generate_code": "public int nonZeros(int row){\n    return rowOffsets[row+1]-rowOffsets[row];\n}",
               "ground_true": "public int nonZeros(int row){\n  assert row >= 0 && row < rowOffsets.length;\n  return rowOffsets[row + 1] - rowOffsets[row];\n}\n"
          },
          {
               "id": "636767461a6d9265ec017d17",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private String unescapeId(String input){\nreturn unescapeId.translate(input);\n}",
               "ground_true": "private String unescapeId(String input){\n  final char quote='\"';\n  if (input.charAt(0) != quote || input.charAt(input.length() - 1) != quote) {\n    return input;\n  }\n  String noQuotes=input.subSequence(1,input.length() - 1).toString();\n  String unescaped=unescapeId.translate(noQuotes);\n  return unescaped;\n}\n"
          },
          {
               "id": "6367667f1a6d9265ec01745d",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    2,
                    3
               ],
               "generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    return decodePath(u.getPath(),decode);\n}",
               "ground_true": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n  String rawPath=u.getRawPath();\n  if (rawPath != null && rawPath.length() > 0 && rawPath.charAt(0) == '/') {\n    rawPath=rawPath.substring(1);\n  }\n  return decodePath(rawPath,decode);\n}\n"
          },
          {
               "id": "636766861a6d9265ec01755a",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public final MatchResult match(CharSequence uri){\n    if (uri == null) {\n        throw new NullPointerException(\"uri == null\");\n    }\n    if (uri.length() == 0) {\n        return EMPTY_STRING_MATCH_RESULT;\n    }\n    if (regexPattern == null) {\n        throw new IllegalStateException(\"Pattern is not compiled\");\n    }\n    Matcher matcher = regexPattern.matcher(uri);\n    if (matcher.matches()) {\n        return new GroupIndexMatchResult(matcher);\n    }\n    return null;\n}",
               "ground_true": "public final MatchResult match(CharSequence uri){\n  if (uri == null || uri.length() == 0)   return (regexPattern == null) ? EMPTY_STRING_MATCH_RESULT : null;\n else   if (regexPattern == null)   return null;\n  Matcher m=regexPattern.matcher(uri);\n  if (!m.matches())   return null;\n  return (groupIndexes.length > 0) ? new GroupIndexMatchResult(m) : m;\n}\n"
          },
          {
               "id": "636766801a6d9265ec017487",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static String encodeTemplateNames(String s){\n    return _encode(s,Type.TEMPLATE, true, true);\n}",
               "ground_true": "public static String encodeTemplateNames(String s){\n  int i=s.indexOf('{');\n  if (i != -1)   s=s.replace(\"{\",\"%7B\");\n  i=s.indexOf('}');\n  if (i != -1)   s=s.replace(\"}\",\"%7D\");\n  return s;\n}\n"
          },
          {
               "id": "6367667f1a6d9265ec01745c",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n    File dirF=new File(dir);\n    if(dirF.isDirectory()){\n        File[] files=dirF.listFiles(new FilenameFilter(){\n            public boolean accept(File dirF,String name){\n                return name.endsWith(\".jar\");\n            }\n        });\n        for(File f:files){\n            try{\n                cpV.add(f.toURI().toURL());\n            }catch(MalformedURLException e){\n                e.printStackTrace();\n            }\n        }\n    }\n}",
               "ground_true": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){\n  try {\n    String cpComp[]=getFilesByExt(dir,\".jar\");\n    if (cpComp != null) {\n      int jarCount=cpComp.length;\n      for (int i=0; i < jarCount; i++) {\n        URL url=getURL(dir,cpComp[i]);\n        if (url != null)         cpV.addElement(url);\n      }\n    }\n  }\n catch (  Exception ex) {\n    logger.debug(\"failed to add urls to classpath\",ex);\n  }\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174bf",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String capitalize(String name){\n    if(name.length() == 0) return name;\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}",
               "ground_true": "public static String capitalize(String name){\n  if (name == null || name.length() == 0) {\n    return name;\n  }\n  char chars[]=name.toCharArray();\n  chars[0]=Character.toUpperCase(chars[0]);\n  return new String(chars);\n}\n"
          },
          {
               "id": "6367667d1a6d9265ec017401",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String unescapeJava(String str) throws Exception {\n    return unescapeJava(str, false, false);\n}",
               "ground_true": "public static String unescapeJava(String str) throws Exception {\n  if (str == null) {\n    return null;\n  }\n  StringWriter writer=new StringWriter(str.length());\n  unescapeJava(writer,str);\n  return writer.toString();\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174b6",
               "type": [
                    "Missing Type Checks on Variables"
               ],
               "type_id": [
                    5
               ],
               "generate_code": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType parameterizedType = (ParameterizedType) genericType;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Class<?>[] resolvedArguments = new Class<?>[actualTypeArguments.length];\n        for(int i = 0;i < actualTypeArguments.length;i++){\n            resolvedArguments[i] = resolveArgument(actualTypeArguments[i],targetType);\n        }\n        return resolvedArguments;\n    }\n    return null;\n}",
               "ground_true": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){\n  Class<?>[] result=null;\n  if (genericType instanceof ParameterizedType) {\n    ParameterizedType paramType=(ParameterizedType)genericType;\n    Type[] arguments=paramType.getActualTypeArguments();\n    result=new Class[arguments.length];\n    for (int i=0; i < arguments.length; i++)     result[i]=resolveClass(arguments[i],targetType);\n  }\n else   if (genericType instanceof TypeVariable) {\n    result=new Class[1];\n    result[0]=resolveClass(genericType,targetType);\n  }\n  return result;\n}\n"
          },
          {
               "id": "6367667d1a6d9265ec01741d",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n    Type bound = typeVariable.getBounds()[0];\n    if(bound instanceof TypeVariable<?>){\n        bound = resolveBound((TypeVariable<?>)bound);\n    }\n    return bound;\n}",
               "ground_true": "public static Type resolveBound(TypeVariable<?> typeVariable){\n  Type[] bounds=typeVariable.getBounds();\n  if (bounds.length == 0)   return Unknown.class;\n  Type bound=bounds[0];\n  if (bound instanceof TypeVariable)   bound=resolveBound((TypeVariable<?>)bound);\n  return bound == Object.class ? Unknown.class : bound;\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174d2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\nreturn new AtmosphereRequestImpl.Builder().request(request).build();\n}",
               "ground_true": "public static AtmosphereRequest wrap(HttpServletRequest request){\n  if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) {\n    return (AtmosphereRequestImpl)request;\n  }\n  Builder b=new Builder();\n  Enumeration<String> e=request.getAttributeNames();\n  String s;\n  while (e.hasMoreElements()) {\n    s=e.nextElement();\n    b.localAttributes.put(s,attributeWithoutException(request,s));\n  }\n  return b.request(request).build();\n}\n"
          },
          {
               "id": "6367667d1a6d9265ec0173ff",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static Meteor lookup(HttpServletRequest r){\n    return (Meteor) r.getAttribute(ATMOSPHERE_RESOURCE);\n}",
               "ground_true": "public static Meteor lookup(HttpServletRequest r){\n  Object o=r.getAttribute(METEOR);\n  return o == null ? null : Meteor.class.isAssignableFrom(o.getClass()) ? (Meteor)o : null;\n}\n"
          },
          {
               "id": "6367667c1a6d9265ec0173fb",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n    listeners.add(e);\n    return this;\n}",
               "ground_true": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){\n  if (listeners.contains(e))   return this;\n  listeners.add(e);\n  return this;\n}\n"
          },
          {
               "id": "636766831a6d9265ec0174eb",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private void addReverse(final File[] files){\n    for (int i = files.length - 1; i >= 0; i--) {\n        stack.push(files[i]);\n    }\n}",
               "ground_true": "private void addReverse(final File[] files){\n  if (files == null)   return;\n  for (int i=files.length - 1; i >= 0; --i) {\n    stack.add(files[i]);\n  }\n}\n"
          },
          {
               "id": "6367676b1a6d9265ec0181df",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    4,
                    3
               ],
               "generate_code": "public static boolean startsWithIgnoreCase(String str,String prefix){\n    return str.regionMatches(true,0,prefix,0,prefix.length());\n}",
               "ground_true": "public static boolean startsWithIgnoreCase(String str,String prefix){\n  if (str == null || prefix == null) {\n    return false;\n  }\n  if (str.startsWith(prefix)) {\n    return true;\n  }\n  if (str.length() < prefix.length()) {\n    return false;\n  }\n  String lcStr=str.substring(0,prefix.length()).toLowerCase();\n  String lcPrefix=prefix.toLowerCase();\n  return lcStr.equals(lcPrefix);\n}\n"
          },
          {
               "id": "6367676b1a6d9265ec0181e2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n    for(Object candidate : candidates){\n        if(source.contains(candidate)){\n            return candidate;\n        }\n    }\n    return null;\n}",
               "ground_true": "public static Object findFirstMatch(Collection source,Collection candidates){\n  if (isEmpty(source) || isEmpty(candidates)) {\n    return null;\n  }\n  for (  Object candidate : candidates) {\n    if (source.contains(candidate)) {\n      return candidate;\n    }\n  }\n  return null;\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec018223",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static boolean containsInstance(Collection collection,Object element){\n    return collection.contains(element);\n}",
               "ground_true": "public static boolean containsInstance(Collection collection,Object element){\n  if (collection != null) {\n    for (    Object candidate : collection) {\n      if (candidate == element) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec018220",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "public static String stripFilenameExtension(String path){\n    int extIndex = path.lastIndexOf(46);\n    if(extIndex == -1){\n        return path;\n    }\n    return path.substring(0,extIndex);\n}",
               "ground_true": "public static String stripFilenameExtension(String path){\n  if (path == null) {\n    return null;\n  }\n  int extIndex=path.lastIndexOf(EXTENSION_SEPARATOR);\n  if (extIndex == -1) {\n    return path;\n  }\n  int folderIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n  if (folderIndex > extIndex) {\n    return path;\n  }\n  return path.substring(0,extIndex);\n}\n"
          },
          {
               "id": "636767691a6d9265ec0181a7",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Range Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    4,
                    3,
                    2
               ],
               "generate_code": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n    if(str==null){\n        return null;\n    }\n    int index=str.indexOf(leadingCharacter);\n    if(index==0){\n        return str;\n    }\n    if(index<0){\n        return \"\";\n    }\n    return str.substring(index);\n}",
               "ground_true": "public static String trimLeadingCharacter(String str,char leadingCharacter){\n  if (!hasLength(str)) {\n    return str;\n  }\n  StringBuilder sb=new StringBuilder(str);\n  while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {\n    sb.deleteCharAt(0);\n  }\n  return sb.toString();\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec01830f",
               "type": [
                    "Missing Range Checks",
                    "Missing Null Checks"
               ],
               "type_id": [
                    3,
                    1
               ],
               "generate_code": "public String format(LoggingEvent event){\n    if (sbuf == null) {\n        sbuf = new StringBuffer(BUF_SIZE);\n    }\n    else {\n        sbuf.setLength(0);\n    }\n    if (pattern != null) {\n        PatternParser pp = createPatternParser(pattern);\n        pp.parse(sbuf, event);\n    }\n    else {\n        sbuf.append(DEFAULT_CONVERSION_PATTERN);\n    }\n    return sbuf.toString();\n}",
               "ground_true": "public String format(LoggingEvent event){\n  if (sbuf.capacity() > MAX_CAPACITY) {\n    sbuf=new StringBuffer(BUF_SIZE);\n  }\n else {\n    sbuf.setLength(0);\n  }\n  PatternConverter c=head;\n  while (c != null) {\n    c.format(sbuf,event);\n    c=c.next;\n  }\n  return sbuf.toString();\n}\n"
          },
          {
               "id": "636767831a6d9265ec0183c9",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static String peek(){\n    return null;\n}",
               "ground_true": "public static String peek(){\n  Stack stack=getCurrentStack();\n  if (stack != null && !stack.isEmpty())   return ((DiagnosticContext)stack.peek()).message;\n else   return \"\";\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec01832e",
               "type": [
                    "Missing Type Checks on Variables"
               ],
               "type_id": [
                    5
               ],
               "generate_code": "public Logger exists(String name){\n    return null;\n}",
               "ground_true": "public Logger exists(String name){\n  Object o=ht.get(new CategoryKey(name));\n  if (o instanceof Logger) {\n    return (Logger)o;\n  }\n else {\n    return null;\n  }\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183ff",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n    table.setRowSelectionInterval(row,row);\n    makeVerticalScrollBarTrack(pane);\n}",
               "ground_true": "public static void selectRow(int row,JTable table,JScrollPane pane){\n  if (table == null || pane == null) {\n    return;\n  }\n  if (contains(row,table.getModel()) == false) {\n    return;\n  }\n  moveAdjustable(row * table.getRowHeight(),pane.getVerticalScrollBar());\n  selectRow(row,table.getSelectionModel());\n  repaintLater(table);\n}\n"
          },
          {
               "id": "6367677f1a6d9265ec018347",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public synchronized void send(final String message){\n    for (final Iterator i = connections.iterator(); i.hasNext();){\n        final Socket s = (Socket) i.next();\n        try{\n            final PrintWriter out = new PrintWriter(s.getOutputStream(), true);\n            out.println(message);\n        }catch (final IOException e){\n            close();\n            throw new RuntimeException(e);\n        }\n    }\n}",
               "ground_true": "public synchronized void send(final String message){\n  Iterator ce=connections.iterator();\n  for (Iterator e=writers.iterator(); e.hasNext(); ) {\n    ce.next();\n    PrintWriter writer=(PrintWriter)e.next();\n    writer.print(message);\n    if (writer.checkError()) {\n      ce.remove();\n      e.remove();\n    }\n  }\n}\n"
          },
          {
               "id": "636767781a6d9265ec01823e",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "protected void append(LoggingEvent event){\n    if(layout.ignoresThrowable()){\n        send(layout.format(event));\n    }else{\n        send(layout.format(event)+layout.getThrowableStrRep(event));\n    }\n}",
               "ground_true": "protected void append(LoggingEvent event){\n  if (sh != null) {\n    sh.send(layout.format(event));\n    if (layout.ignoresThrowable()) {\n      String[] s=event.getThrowableStrRep();\n      if (s != null) {\n        StringBuffer buf=new StringBuffer();\n        for (int i=0; i < s.length; i++) {\n          buf.append(s[i]);\n          buf.append(\"\\r\\n\");\n        }\n        sh.send(buf.toString());\n      }\n    }\n  }\n}\n"
          },
          {
               "id": "6367677f1a6d9265ec01834b",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public void put(LoggingEvent o){\n    if (next == maxSize) {\n        next = 0;\n    }\n    buf[next] = o;\n    next++;\n    numElements++;\n}",
               "ground_true": "public void put(LoggingEvent o){\n  if (numElements != maxSize) {\n    buf[next]=o;\n    if (++next == maxSize) {\n      next=0;\n    }\n    numElements++;\n  }\n}\n"
          },
          {
               "id": "636767781a6d9265ec018238",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public boolean isAttached(Appender appender){\n    if (appenderList == null) return false;\n    for (Enumeration e = appenderList.elements(); e.hasMoreElements();){\n        Appender a = (Appender)e.nextElement();\n        if (a == appender) return true;\n    }\n    return false;\n}",
               "ground_true": "public boolean isAttached(Appender appender){\n  if (appenderList == null || appender == null)   return false;\n  int size=appenderList.size();\n  Appender a;\n  for (int i=0; i < size; i++) {\n    a=(Appender)appenderList.elementAt(i);\n    if (a == appender)     return true;\n  }\n  return false;\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183e8",
               "type": [
                    "Missing Specific Value Checks",
                    "Inconsistent Expression",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    9,
                    3
               ],
               "generate_code": "public void add(LoggingEvent event){\n    if (numElems == maxSize) {\n        resize(maxSize * 2);\n    }\n    buffer[numElems++] = event;\n}",
               "ground_true": "public void add(LoggingEvent event){\n  ea[last]=event;\n  if (++last == maxSize)   last=0;\n  if (numElems < maxSize)   numElems++;\n else   if (++first == maxSize)   first=0;\n}\n"
          },
          {
               "id": "636767781a6d9265ec018242",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public int appendLoopOnAppenders(LoggingEvent event){\n    int i = 0;\n    Enumeration enumeration = getAllAppenders();\n    while (enumeration.hasMoreElements()) {\n        Appender appender = (Appender) enumeration.nextElement();\n        appender.doAppend(event);\n        i++;\n    }\n    return i;\n}",
               "ground_true": "public int appendLoopOnAppenders(LoggingEvent event){\n  int size=0;\n  Appender appender;\n  if (appenderList != null) {\n    size=appenderList.size();\n    for (int i=0; i < size; i++) {\n      appender=(Appender)appenderList.elementAt(i);\n      appender.doAppend(event);\n    }\n  }\n  return size;\n}\n"
          },
          {
               "id": "636767821a6d9265ec0183ab",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public boolean hasThrown(){\n    return _thrown != null;\n}",
               "ground_true": "public boolean hasThrown(){\n  Throwable thrown=getThrown();\n  if (thrown == null) {\n    return false;\n  }\n  String thrownString=thrown.toString();\n  return thrownString != null && thrownString.trim().length() != 0;\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec018314",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Errorous Expression"
               ],
               "type_id": [
                    1,
                    2,
                    8
               ],
               "generate_code": "protected int removeUnusedNodes(){\n    int removedNodes = 0;\n    Enumeration<CategoryNode> nodes = _categoryModel.getNodes();\n    while(nodes.hasMoreElements()){\n        CategoryNode node = nodes.nextElement();\n        if(!node.isActive()){\n            _categoryModel.removeNodeFromParent(node);\n            removedNodes++;\n        }\n    }\n    return removedNodes;\n}",
               "ground_true": "protected int removeUnusedNodes(){\n  int count=0;\n  CategoryNode root=_categoryModel.getRootCategoryNode();\n  Enumeration enumeration=root.depthFirstEnumeration();\n  while (enumeration.hasMoreElements()) {\n    CategoryNode node=(CategoryNode)enumeration.nextElement();\n    if (node.isLeaf() && node.getNumberOfContainedRecords() == 0 && node.getParent() != null) {\n      _categoryModel.removeNodeFromParent(node);\n      count++;\n    }\n  }\n  return count;\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183f2",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public int compare(Object aObj1,Object aObj2){\nEventDetails e1=(EventDetails)aObj1;\nEventDetails e2=(EventDetails)aObj2;\nreturn e1.getTimeStamp().compareTo(e2.getTimeStamp());\n}",
               "ground_true": "public int compare(Object aObj1,Object aObj2){\n  if ((aObj1 == null) && (aObj2 == null)) {\n    return 0;\n  }\n else   if (aObj1 == null) {\n    return -1;\n  }\n else   if (aObj2 == null) {\n    return 1;\n  }\n  final EventDetails le1=(EventDetails)aObj1;\n  final EventDetails le2=(EventDetails)aObj2;\n  if (le1.getTimeStamp() < le2.getTimeStamp()) {\n    return 1;\n  }\n  return -1;\n}\n"
          },
          {
               "id": "636767781a6d9265ec018250",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public int decide(LoggingEvent event){\n    String message = event.getMessage().toString();\n    if (stringToMatch != null && message.contains(stringToMatch)) {\n        return acceptOnMatch ? Filter.ACCEPT : Filter.DENY;\n    }\n    return Filter.NEUTRAL;\n}",
               "ground_true": "public int decide(LoggingEvent event){\n  String msg=event.getRenderedMessage();\n  if (msg == null || stringToMatch == null)   return Filter.NEUTRAL;\n  if (msg.indexOf(stringToMatch) == -1) {\n    return Filter.NEUTRAL;\n  }\n else {\n    if (acceptOnMatch) {\n      return Filter.ACCEPT;\n    }\n else {\n      return Filter.DENY;\n    }\n  }\n}\n"
          },
          {
               "id": "636767df1a6d9265ec01873c",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}",
               "ground_true": "public String id(String entityId){\n  if (entityId == null) {\n    return String.valueOf(point);\n  }\n else {\n    return point + Const.ID_CONNECTOR + entityId;\n  }\n}\n"
          },
          {
               "id": "636767e11a6d9265ec018781",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "@Override public void accept(final METRICS data){\nif (buffer.containsKey(data.getId())) {\nbuffer.get(data.getId()).merge(data);\n} else {\nbuffer.put(data.getId(), data);\n}\n}",
               "ground_true": "@Override public void accept(final METRICS data){\n  final String id=data.id();\n  final METRICS existed=buffer.get(id);\n  if (existed == null) {\n    buffer.put(id,data);\n  }\n else {\n    final boolean isAbandoned=!existed.combine(data);\n    if (isAbandoned) {\n      buffer.remove(id);\n    }\n  }\n}\n"
          },
          {
               "id": "636767de1a6d9265ec01871e",
               "type": [
                    "Inconsistent Expression"
               ],
               "type_id": [
                    9
               ],
               "generate_code": "private void check(String modelName) throws IllegalStateException {\n    if (keys == null) {\n        throw new IllegalStateException(\"The model \" + modelName + \" has no key.\");\n    }\n    for (ModelColumn modelColumn : keys) {\n        if (modelColumn.getValue() == null) {\n            throw new IllegalStateException(\"The model \" + modelName + \" has a null value in the key.\");\n        }\n    }\n}",
               "ground_true": "private void check(String modelName) throws IllegalStateException {\n  for (int i=0; i < keys.size(); i++) {\n    final ModelColumn modelColumn=keys.get(i);\n    if (modelColumn == null) {\n      throw new IllegalStateException(\"Sharding key index=\" + i + \" is missing in \"+ modelName);\n    }\n  }\n}\n"
          },
          {
               "id": "636767de1a6d9265ec018706",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    return mappings.stream().filter(mapping -> !containsStructure(tableName,mappings)).collect(Collectors.toMap(Mappings::getType, mapping -> mapping));\n}",
               "ground_true": "public Mappings diffStructure(String tableName,Mappings mappings){\n  if (!structures.containsKey(tableName)) {\n    return new Mappings();\n  }\n  Map<String,Object> properties=mappings.getProperties();\n  Map<String,Object> diffProperties=structures.get(tableName).diffFields(new Fields(mappings));\n  return Mappings.builder().type(ElasticSearchClient.TYPE).properties(diffProperties).build();\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186be",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "static long compressTimeBucket(long timeBucket,int dayStep){\n    long timeBucketDay = timeBucket / dayStep;\n    return timeBucketDay * dayStep;\n}",
               "ground_true": "static long compressTimeBucket(long timeBucket,int dayStep){\n  if (dayStep > 1) {\n    DateTime time=TIME_BUCKET_FORMATTER.parseDateTime(\"\" + timeBucket);\n    int days=Days.daysBetween(DAY_ONE,time).getDays();\n    int groupBucketOffset=days % dayStep;\n    return Long.parseLong(time.minusDays(groupBucketOffset).toString(TIME_BUCKET_FORMATTER));\n  }\n else {\n    return timeBucket;\n  }\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186c6",
               "type": [
                    "Missing Range Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    3,
                    4
               ],
               "generate_code": "private boolean containsAllFields(Fields fields){\n    return fields.getFields().entrySet().stream().allMatch(entry -> properties.containsKey(entry.getKey()));\n}",
               "ground_true": "private boolean containsAllFields(Fields fields){\n  if (this.properties.size() < fields.properties.size()) {\n    return false;\n  }\n  boolean isContains=fields.properties.entrySet().stream().allMatch(item -> Objects.equals(properties.get(item.getKey()),item.getValue()));\n  if (!isContains) {\n    return false;\n  }\n  return fields.source.getExcludes().containsAll(this.source.getExcludes());\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186cb",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public void init(){\n    File file = new File(analyzeResultDist);\n    if(!file.exists()){\n        file.mkdirs();\n    }\n}",
               "ground_true": "public void init(){\n  File dist=new File(analyzeResultDist);\n  if (!dist.exists()) {\n    dist.mkdirs();\n    return;\n  }\n  if (dist.isFile()) {\n    throw new IllegalArgumentException(analyzeResultDist + \" must be a directory\");\n  }\n}\n"
          },
          {
               "id": "636767e11a6d9265ec018790",
               "type": [
                    "Missing Error Handling "
               ],
               "type_id": [
                    7
               ],
               "generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    FileInputStream fis = new FileInputStream(file);\n    BufferedInputStream bis = new BufferedInputStream(fis);\n    byte[] buffer = new byte[1024];\n    int len;\n    while ((len = bis.read(buffer)) != -1) {\n        String content = new String(buffer, 0, len);\n        List<ThreadSnapshot> threadSnapshotsFromContent = parse(content);\n        if (threadSnapshotsFromContent != null) {\n            threadSnapshots.addAll(threadSnapshotsFromContent);\n        }\n    }\n    bis.close();\n    fis.close();\n    return threadSnapshots;\n}",
               "ground_true": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n  try (final FileInputStream fileInputStream=new FileInputStream(file)){\n    ThreadSnapshot snapshot;\n    final ArrayList<ThreadSnapshot> data=new ArrayList<>();\n    while ((snapshot=ThreadSnapshot.parseDelimitedFrom(fileInputStream)) != null) {\n      ThreadSnapshot finalSnapshot=snapshot;\n      if (timeRanges.stream().filter(t -> finalSnapshot.getTime() >= t.getStart() && finalSnapshot.getTime() <= t.getEnd()).findFirst().isPresent()) {\n        data.add(snapshot);\n      }\n    }\n    return data;\n  }\n }\n"
          },
          {
               "id": "636766a91a6d9265ec0175c2",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private int pop(){\n    int abstractType = outputStack[--outputStackTop];\n    return abstractType;\n}",
               "ground_true": "private int pop(){\n  if (outputStackTop > 0) {\n    return outputStack[--outputStackTop];\n  }\n else {\n    return STACK_KIND | -(--outputStackStart);\n  }\n}\n"
          },
          {
               "id": "636766aa1a6d9265ec0175ce",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    int frameIndex = frameIndex++;\n    currentFrame = new int[numLocal + numStack];\n    previousFrame = new int[numLocal + numStack];\n    putFrame();\n    putAbstractTypes(offset,frameIndex);\n    return frameIndex;\n}",
               "ground_true": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n  int frameLength=3 + numLocal + numStack;\n  if (currentFrame == null || currentFrame.length < frameLength) {\n    currentFrame=new int[frameLength];\n  }\n  currentFrame[0]=offset;\n  currentFrame[1]=numLocal;\n  currentFrame[2]=numStack;\n  return 3;\n}\n"
          },
          {
               "id": "636766a91a6d9265ec0175c4",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private void pop(final String descriptor){\n    final int length = descriptor.length();\n    final char firstChar = descriptor.charAt(0);\n    switch(firstChar){\n        case 'B':\n            popByte();\n            break;\n        case 'C':\n            popChar();\n            break;\n        case 'D':\n            popDouble();\n            break;\n        case 'F':\n            popFloat();\n            break;\n        case 'I':\n            popInt();\n            break;\n        case 'J':\n            popLong();\n            break;\n        case 'S':\n            popShort();\n            break;\n        case 'Z':\n            popBoolean();\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptor);\n    }\n}",
               "ground_true": "private void pop(final String descriptor){\n  char firstDescriptorChar=descriptor.charAt(0);\n  if (firstDescriptorChar == '(') {\n    pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1);\n  }\n else   if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') {\n    pop(2);\n  }\n else {\n    pop(1);\n  }\n}\n"
          },
          {
               "id": "636766a81a6d9265ec01757b",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Null Checks",
                    "Missing Error Handling "
               ],
               "type_id": [
                    2,
                    1,
                    7
               ],
               "generate_code": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\nreturn toString((Object)null,features);\n}",
               "ground_true": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){\n  try (JSONWriter writer=JSONWriter.of(features)){\n    if ((writer.context.features & NONE_DIRECT_FEATURES) == 0) {\n      writer.write(this);\n    }\n else {\n      writer.setRootObject(this);\n      if (arrayWriter == null) {\n        arrayWriter=writer.getObjectWriter(JSONArray.class,JSONArray.class);\n      }\n      arrayWriter.write(writer,this,null,null,0);\n    }\n    return writer.toString();\n  }\n }\n"
          },
          {
               "id": "636767a41a6d9265ec018582",
               "type": [
                    "Missing Null Checks",
                    "Missing Assertions",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    6,
                    2
               ],
               "generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    int size = ProtobufIOUtil.writeDelimitedTo(buffer,message,schema);\n    ProtobufIOUtil.writeTo(buffer,out);\n    return size;\n}",
               "ground_true": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n  if (buffer.start != buffer.offset)   throw new IllegalArgumentException(\"Buffer previously used and had not been reset.\");\n  final ProtobufOutput output=new ProtobufOutput(buffer);\n  schema.writeTo(output,message);\n  final int size=output.getSize();\n  ProtobufOutput.writeRawVarInt32Bytes(out,size);\n  final int msgSize=LinkedBuffer.writeTo(out,buffer);\n  assert size == msgSize;\n  return size;\n}\n"
          },
          {
               "id": "636767a51a6d9265ec01859d",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "public boolean equals(final byte[] data,int offset,final int len){\nreturn Arrays.equals(bytes,offset,len,data);\n}",
               "ground_true": "public boolean equals(final byte[] data,int offset,final int len){\n  final byte[] bytes=this.bytes;\n  if (len != bytes.length)   return false;\n  for (int i=0; i < len; ) {\n    if (bytes[i++] != data[offset++]) {\n      return false;\n    }\n  }\n  return true;\n}\n"
          },
          {
               "id": "636767ab1a6d9265ec01867b",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    2,
                    3
               ],
               "generate_code": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n    return writeUTF8(str,0,str.length(),session,lb);\n}",
               "ground_true": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){\n  final int len=str.length();\n  if (len == 0)   return lb;\n  return lb.offset + len > lb.buffer.length ? writeUTF8(str,0,len,lb.buffer,lb.offset,lb.buffer.length,session,lb) : writeUTF8(str,0,len,session,lb);\n}\n"
          },
          {
               "id": "636767a31a6d9265ec018552",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "@Override public String readString() throws IOException {\n  int len = readRawVarint32();\n  if (len == 0) {\n    return \"\";\n  }\n  byte[] bytes = new byte[len];\n  readRawBytes(bytes);\n  return STRING.decode(bytes);\n}",
               "ground_true": "@Override public String readString() throws IOException {\n  final int size=readRawVarint32();\n  if (size <= (bufferSize - bufferPos) && size > 0) {\n    final String result=STRING.deser(buffer,bufferPos,size);\n    bufferPos+=size;\n    return result;\n  }\n else {\n    return STRING.deser(readRawBytes(size));\n  }\n}\n"
          },
          {
               "id": "636767a21a6d9265ec018517",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public final byte[] toByteArray(){\n    byte[] buf = new byte[size];\n    int offset = 0;\n    while (head != null) {\n        System.arraycopy(head.buf, head.offset, buf, offset, head.size);\n        offset += head.size;\n        head = head.next;\n    }\n    return buf;\n}",
               "ground_true": "public final byte[] toByteArray(){\n  LinkedBuffer node=head;\n  int offset=0, len;\n  final byte[] buf=new byte[size];\n  do {\n    if ((len=node.offset - node.start) > 0) {\n      System.arraycopy(node.buffer,node.start,buf,offset,len);\n      offset+=len;\n    }\n  }\n while ((node=node.next) != null);\n  return buf;\n}\n"
          },
          {
               "id": "636767a31a6d9265ec01854f",
               "type": [
                    "Missing Range Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    3,
                    2
               ],
               "generate_code": "private void checkIfPackedField() throws IOException {\n    if (isPackedField()) {\n        readField();\n        if (isAtEnd()) {\n            throw new InvalidProtocolBufferException(\"Field \" + lastTag + \" is packed but has no value\");\n        }\n    }\n}",
               "ground_true": "private void checkIfPackedField() throws IOException {\n  if (packedLimit == 0 && WireFormat.getTagWireType(lastTag) == WIRETYPE_LENGTH_DELIMITED) {\n    final int length=readRawVarint32();\n    if (length < 0)     throw ProtobufException.negativeSize();\n    this.packedLimit=getTotalBytesRead() + length;\n  }\n}\n"
          },
          {
               "id": "636767a81a6d9265ec0185fc",
               "type": [
                    "Missing Boolean Value Checks",
                    "Inconsistent Expression"
               ],
               "type_id": [
                    4,
                    9
               ],
               "generate_code": "public int readTag() throws IOException {\n    int tag = currentOffset() >> TAG_TYPE_BITS;\n    if (tag == 0) {\n        throw new IOException(\"EOF\");\n    }\n    return tag;\n}",
               "ground_true": "public int readTag() throws IOException {\n  if (!buffer.hasRemaining()) {\n    lastTag=0;\n    return 0;\n  }\n  final int tag=readRawVarint32();\n  if (tag >>> TAG_TYPE_BITS == 0) {\n    throw ProtobufException.invalidTag();\n  }\n  lastTag=tag;\n  return tag;\n}\n"
          }
     ]
}
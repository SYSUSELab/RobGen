{
     "datas": [
          {
               "id": "6367676d1a6d9265ec018229",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String[] trimArrayElements(String[] array){\n    if(array == null || array.length == 0) {\n        return array;\n    }\n    String[] trimmedArray = new String[array.length];\n    for(int i = 0; i < array.length; i++) {\n        trimmedArray[i] = array[i].trim();\n    }\n    return trimmedArray;\n}",
               "ground_true": "public static String[] trimArrayElements(String[] array){\n  if (Objects.isEmpty(array)) {\n    return new String[0];\n  }\n  String[] result=new String[array.length];\n  for (int i=0; i < array.length; i++) {\n    String element=array[i];\n    result[i]=(element != null ? element.trim() : null);\n  }\n  return result;\n}\n"
          },
          {
               "id": "6367670b1a6d9265ec017a00",
               "type": [
                    "Missing Range Checks",
                    "Missing Null Checks"
               ],
               "type_id": [
                    3,
                    1
               ],
               "generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return array1.length == array2.length;\n}",
               "ground_true": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
          },
          {
               "id": "6367667f1a6d9265ec017457",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Null Checks"
               ],
               "type_id": [
                    2,
                    1
               ],
               "generate_code": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n    // Your implementation here\n}",
               "ground_true": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){\n  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {\n    sb.append((char)bb.get(0));\n    return i + 2;\n  }\n else {\n    CharBuffer cb=UTF_8_CHARSET.decode(bb);\n    sb.append(cb);\n    return i + bb.limit() * 3 - 1;\n  }\n}\n"
          },
          {
               "id": "636766aa1a6d9265ec0175ce",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n    //1. Create a new Frame object\n    Frame frame = new Frame(offset, numLocal, numStack);\n\n    //2. Add the frame to the current frame array\n    currentFrame = Arrays.copyOf(currentFrame, currentFrame.length + 1);\n    currentFrame[currentFrame.length - 1] = frame;\n\n    //3. Return 3\n    return 3;\n}",
               "ground_true": "int visitFrameStart(final int offset,final int numLocal,final int numStack){\n  int frameLength=3 + numLocal + numStack;\n  if (currentFrame == null || currentFrame.length < frameLength) {\n    currentFrame=new int[frameLength];\n  }\n  currentFrame[0]=offset;\n  currentFrame[1]=numLocal;\n  currentFrame[2]=numStack;\n  return 3;\n}\n"
          },
          {
               "id": "636767031a6d9265ec0178dd",
               "type": [
                    "Missing Error Handling "
               ],
               "type_id": [
                    7
               ],
               "generate_code": "public long contentLength(){\n    try{\n        return Long.parseLong(getHeader(\"Content-Length\"));\n    }catch(NumberFormatException e){\n        return 0L;\n    }\n}",
               "ground_true": "public long contentLength(){\n  long size;\n  try {\n    size=Long.parseLong(request.getHeader(FileUpload.CONTENT_LENGTH));\n  }\n catch (  NumberFormatException e) {\n    size=request.getContentLength();\n  }\n  return size;\n}\n"
          },
          {
               "id": "636767121a6d9265ec017b0a",
               "type": [
                    "Missing Range Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    3,
                    2
               ],
               "generate_code": "private int parseEndOfLine(String headerPart,int end){\n    // Implementation goes here\n}",
               "ground_true": "private int parseEndOfLine(String headerPart,int end){\n  int index=end;\n  for (; ; ) {\n    int offset=headerPart.indexOf('\\r',index);\n    if (offset == -1 || offset + 1 >= headerPart.length()) {\n      throw new IllegalStateException(\"Expected headers to be terminated by an empty line.\");\n    }\n    if (headerPart.charAt(offset + 1) == '\\n') {\n      return offset;\n    }\n    index=offset + 1;\n  }\n}\n"
          },
          {
               "id": "636767df1a6d9265ec01873c",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public String id(String entityId){\n    return Const.ID_CONNECTOR + point + entityId;\n}",
               "ground_true": "public String id(String entityId){\n  if (entityId == null) {\n    return String.valueOf(point);\n  }\n else {\n    return point + Const.ID_CONNECTOR + entityId;\n  }\n}\n"
          },
          {
               "id": "636767791a6d9265ec018257",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable(){\n        public void run(){\n            if(_table != null){\n                _table.addMessage(lr);\n            }\n        }\n    });\n}",
               "ground_true": "public void addMessage(final LogRecord lr){\n  if (_isDisposed == true) {\n    return;\n  }\n  SwingUtilities.invokeLater(new Runnable(){\n    public void run(){\n      _categoryExplorerTree.getExplorerModel().addLogRecord(lr);\n      _table.getFilteredLogTableModel().addLogRecord(lr);\n      updateStatusLabel();\n    }\n  }\n);\n}\n"
          },
          {
               "id": "636767a41a6d9265ec018582",
               "type": [
                    "Missing Null Checks",
                    "Missing Assertions",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    6,
                    2
               ],
               "generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    int size = schema.computeSize(message);\n    if (buffer != null) {\n        buffer.write(size);\n    }\n    schema.writeDelimited(out,message,schema);\n    return size;\n}",
               "ground_true": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n  if (buffer.start != buffer.offset)   throw new IllegalArgumentException(\"Buffer previously used and had not been reset.\");\n  final ProtobufOutput output=new ProtobufOutput(buffer);\n  schema.writeTo(output,message);\n  final int size=output.getSize();\n  ProtobufOutput.writeRawVarInt32Bytes(out,size);\n  final int msgSize=LinkedBuffer.writeTo(out,buffer);\n  assert size == msgSize;\n  return size;\n}\n"
          },
          {
               "id": "636767001a6d9265ec01787e",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    1,
                    2
               ],
               "generate_code": "public String toString(){\n    return sb.toString();\n}",
               "ground_true": "public String toString(){\n  if (this.getObject() == null) {\n    return this.getStyle().getNullText();\n  }\n  Class<?> clazz=this.getObject().getClass();\n  this.appendFieldsIn(clazz);\n  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {\n    clazz=clazz.getSuperclass();\n    this.appendFieldsIn(clazz);\n  }\n  return super.toString();\n}\n"
          },
          {
               "id": "636766f11a6d9265ec017641",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public int available() throws IOException {\n    return (index < length) ? length - index : 0;\n}",
               "ground_true": "@Override public int available() throws IOException {\n  return this.index < this.length ? this.length - this.index : this.length >= 0 && this.reader.ready() ? 1 : 0;\n}\n"
          },
          {
               "id": "636767de1a6d9265ec018706",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    return Objects.requireNonNull(mappings).stream()\n            .filter(mapping -> !structures.containsKey(mapping.getKey()))\n            .collect(Collectors.toMap(Mapping::getKey, Mapping::getValue));\n}",
               "ground_true": "public Mappings diffStructure(String tableName,Mappings mappings){\n  if (!structures.containsKey(tableName)) {\n    return new Mappings();\n  }\n  Map<String,Object> properties=mappings.getProperties();\n  Map<String,Object> diffProperties=structures.get(tableName).diffFields(new Fields(mappings));\n  return Mappings.builder().type(ElasticSearchClient.TYPE).properties(diffProperties).build();\n}\n"
          },
          {
               "id": "6367677f1a6d9265ec018347",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public synchronized void send(final String message){\n    for (Iterator it = connections.iterator(); it.hasNext();) {\n        Socket socket = (Socket) it.next();\n        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n        out.println(message);\n    }\n}",
               "ground_true": "public synchronized void send(final String message){\n  Iterator ce=connections.iterator();\n  for (Iterator e=writers.iterator(); e.hasNext(); ) {\n    ce.next();\n    PrintWriter writer=(PrintWriter)e.next();\n    writer.print(message);\n    if (writer.checkError()) {\n      ce.remove();\n      e.remove();\n    }\n  }\n}\n"
          },
          {
               "id": "636767df1a6d9265ec018744",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "protected List<TimeRange> buildTimeRanges(long start,long end){\n    List<TimeRange> timeRanges = new ArrayList<>();\n    while (start < end) {\n        long duration = Math.min(FETCH_DATA_DURATION, end - start);\n        timeRanges.add(new TimeRange(start, start + duration));\n        start += duration;\n    }\n    return timeRanges;\n}",
               "ground_true": "protected List<TimeRange> buildTimeRanges(long start,long end){\n  if (start >= end) {\n    return null;\n  }\n  end+=1;\n  final List<TimeRange> timeRanges=new ArrayList<>();\n  do {\n    long batchEnd=Math.min(start + FETCH_DATA_DURATION,end);\n    timeRanges.add(new TimeRange(start,batchEnd));\n    start=batchEnd;\n  }\n while (start < end);\n  return timeRanges;\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186be",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "static long compressTimeBucket(long timeBucket,int dayStep){\n    return (timeBucket - timeBucket % dayStep) / dayStep;\n}",
               "ground_true": "static long compressTimeBucket(long timeBucket,int dayStep){\n  if (dayStep > 1) {\n    DateTime time=TIME_BUCKET_FORMATTER.parseDateTime(\"\" + timeBucket);\n    int days=Days.daysBetween(DAY_ONE,time).getDays();\n    int groupBucketOffset=days % dayStep;\n    return Long.parseLong(time.minusDays(groupBucketOffset).toString(TIME_BUCKET_FORMATTER));\n  }\n else {\n    return timeBucket;\n  }\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174d2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static AtmosphereRequest wrap(HttpServletRequest request){\n    return new AtmosphereRequestImpl(new Builder(request));\n}",
               "ground_true": "public static AtmosphereRequest wrap(HttpServletRequest request){\n  if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) {\n    return (AtmosphereRequestImpl)request;\n  }\n  Builder b=new Builder();\n  Enumeration<String> e=request.getAttributeNames();\n  String s;\n  while (e.hasMoreElements()) {\n    s=e.nextElement();\n    b.localAttributes.put(s,attributeWithoutException(request,s));\n  }\n  return b.request(request).build();\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec017834",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String sessionId(){\n    return ServletUtil.getSessionId();\n}",
               "ground_true": "public static String sessionId(){\n  HttpSession httpSession=servletSession();\n  if (httpSession == null) {\n    return null;\n  }\n  return httpSession.getId();\n}\n"
          },
          {
               "id": "636766fc1a6d9265ec0177da",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    4,
                    2
               ],
               "generate_code": "private static boolean isParameterSeparator(final char c){\n    return PARAMETER_SEPARATORS[c];\n}",
               "ground_true": "private static boolean isParameterSeparator(final char c){\n  if (Character.isWhitespace(c)) {\n    return true;\n  }\n  for (  char separator : PARAMETER_SEPARATORS) {\n    if (c == separator) {\n      return true;\n    }\n  }\n  return false;\n}\n"
          },
          {
               "id": "6367667f1a6d9265ec01745d",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    2,
                    3
               ],
               "generate_code": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n    return decodePath(u.getPath(),decode);\n}",
               "ground_true": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){\n  String rawPath=u.getRawPath();\n  if (rawPath != null && rawPath.length() > 0 && rawPath.charAt(0) == '/') {\n    rawPath=rawPath.substring(1);\n  }\n  return decodePath(rawPath,decode);\n}\n"
          },
          {
               "id": "636767831a6d9265ec0183c9",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static String peek(){\nreturn null;\n}",
               "ground_true": "public static String peek(){\n  Stack stack=getCurrentStack();\n  if (stack != null && !stack.isEmpty())   return ((DiagnosticContext)stack.peek()).message;\n else   return \"\";\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec01832e",
               "type": [
                    "Missing Type Checks on Variables"
               ],
               "type_id": [
                    5
               ],
               "generate_code": "public Logger exists(String name){\n    // Implementation goes here\n}",
               "ground_true": "public Logger exists(String name){\n  Object o=ht.get(new CategoryKey(name));\n  if (o instanceof Logger) {\n    return (Logger)o;\n  }\n else {\n    return null;\n  }\n}\n"
          },
          {
               "id": "636767a41a6d9265ec018572",
               "type": [
                    "Missing Range Checks",
                    "Missing Assertions"
               ],
               "type_id": [
                    3,
                    6
               ],
               "generate_code": "public long readRawVarint64() throws IOException {\n    return readRawVarint64(input);\n}",
               "ground_true": "public long readRawVarint64() throws IOException {\n  int shift=0;\n  long result=0;\n  while (shift < 64) {\n    final byte b=readRawByte();\n    result|=(long)(b & 0x7F) << shift;\n    if ((b & 0x80) == 0) {\n      return result;\n    }\n    shift+=7;\n  }\n  throw ProtobufException.malformedVarint();\n}\n"
          },
          {
               "id": "636766f91a6d9265ec01776e",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "@Override public void write(final byte b[],final int off,final int len) throws IOException {\n    if (len == 0) return;\n    if (buf.length < len) {\n        buf = new byte[len];\n    }\n    System.arraycopy(b, off, buf, 0, len);\n    flush();\n}",
               "ground_true": "@Override public void write(final byte b[],final int off,final int len) throws IOException {\n  if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {\n    throw new IndexOutOfBoundsException();\n  }\n else   if (len == 0) {\n    return;\n  }\n  if (this.count + len > this.buf.length) {\n    this.encodePendingBytes(false);\n  }\n  System.arraycopy(b,off,this.buf,this.count,len);\n  this.count+=len;\n}\n"
          },
          {
               "id": "636766ae1a6d9265ec0175dc",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public Boolean isPartialContentResponse(){\n    return false;\n}",
               "ground_true": "public Boolean isPartialContentResponse(){\n  Integer limit=drc.getLimit() == null ? 0 : drc.getLimit();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return !((limit + 1) >= count);\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186c6",
               "type": [
                    "Missing Range Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    3,
                    4
               ],
               "generate_code": "private boolean containsAllFields(Fields fields){\n    return Objects.equals(fields.getFields(),properties.keySet());\n}",
               "ground_true": "private boolean containsAllFields(Fields fields){\n  if (this.properties.size() < fields.properties.size()) {\n    return false;\n  }\n  boolean isContains=fields.properties.entrySet().stream().allMatch(item -> Objects.equals(properties.get(item.getKey()),item.getValue()));\n  if (!isContains) {\n    return false;\n  }\n  return fields.source.getExcludes().containsAll(this.source.getExcludes());\n}\n"
          },
          {
               "id": "636766821a6d9265ec0174bf",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static String capitalize(String name){\n    char[] chars = name.toCharArray();\n    chars[0] = Character.toUpperCase(chars[0]);\n    return new String(chars);\n}",
               "ground_true": "public static String capitalize(String name){\n  if (name == null || name.length() == 0) {\n    return name;\n  }\n  char chars[]=name.toCharArray();\n  chars[0]=Character.toUpperCase(chars[0]);\n  return new String(chars);\n}\n"
          },
          {
               "id": "636766ff1a6d9265ec017842",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static double[] toPrimitive(final Double[] array){\n    if(array.length == 0) {\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] result = new double[array.length];\n    for (int i = 0; i < array.length; i++) {\n        result[i] = array[i].doubleValue();\n    }\n    return result;\n}",
               "ground_true": "public static double[] toPrimitive(final Double[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_DOUBLE_ARRAY;\n  }\n  final double[] result=new double[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i].doubleValue();\n  }\n  return result;\n}\n"
          },
          {
               "id": "636766fa1a6d9265ec0177a9",
               "type": [
                    "Missing Null Checks",
                    "Inconsistent Expression"
               ],
               "type_id": [
                    1,
                    9
               ],
               "generate_code": "private void addInitializedType(final int abstractType){\n    if(initializationCount == 0){\n        initializations = new int[1];\n        initializations[0] = abstractType;\n    }else{\n        int[] newInitializations = new int[initializationCount + 1];\n        System.arraycopy(initializations, 0, newInitializations, 0, initializationCount);\n        newInitializations[initializationCount] = abstractType;\n        initializations = newInitializations;\n    }\n}",
               "ground_true": "private void addInitializedType(final int abstractType){\n  if (initializations == null) {\n    initializations=new int[2];\n  }\n  int initializationsLength=initializations.length;\n  if (initializationCount >= initializationsLength) {\n    int[] newInitializations=new int[Math.max(initializationCount + 1,2 * initializationsLength)];\n    System.arraycopy(initializations,0,newInitializations,0,initializationsLength);\n    initializations=newInitializations;\n  }\n  initializations[initializationCount++]=abstractType;\n}\n"
          },
          {
               "id": "6367676b1a6d9265ec0181e2",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n    Iterator it = candidates.iterator();\n    while(it.hasNext()){\n        if(source.contains(it.next())){\n            return it.next();\n        }\n    }\n    return null;\n}",
               "ground_true": "public static Object findFirstMatch(Collection source,Collection candidates){\n  if (isEmpty(source) || isEmpty(candidates)) {\n    return null;\n  }\n  for (  Object candidate : candidates) {\n    if (source.contains(candidate)) {\n      return candidate;\n    }\n  }\n  return null;\n}\n"
          },
          {
               "id": "636767dc1a6d9265ec0186cb",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public void init(){\n    File dir = new File(analyzeResultDist);\n    if (!dir.exists()) {\n        dir.mkdirs();\n    }\n}",
               "ground_true": "public void init(){\n  File dist=new File(analyzeResultDist);\n  if (!dist.exists()) {\n    dist.mkdirs();\n    return;\n  }\n  if (dist.isFile()) {\n    throw new IllegalArgumentException(analyzeResultDist + \" must be a directory\");\n  }\n}\n"
          },
          {
               "id": "636767a31a6d9265ec018552",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "@Override public String readString() throws IOException {\n    int length = readRawVarint32();\n    if (length == 0) return \"\";\n    byte[] bytes = new byte[length];\n    readRawBytes(bytes);\n    return new String(bytes, StandardCharsets.UTF_8);\n}",
               "ground_true": "@Override public String readString() throws IOException {\n  final int size=readRawVarint32();\n  if (size <= (bufferSize - bufferPos) && size > 0) {\n    final String result=STRING.deser(buffer,bufferPos,size);\n    bufferPos+=size;\n    return result;\n  }\n else {\n    return STRING.deser(readRawBytes(size));\n  }\n}\n"
          },
          {
               "id": "636767e01a6d9265ec018755",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private Map<String,Object> buildContent(JsonObject jsonObject){\n    Map<String,Object> content = new HashMap<>();\n    for (Map.Entry<String, Object> entry : jsonObject.entrySet()) {\n        if (entry.getValue() instanceof JsonObject) {\n            content.put(entry.getKey(), buildContent((JsonObject) entry.getValue()));\n        } else {\n            content.put(entry.getKey(), entry.getValue());\n        }\n    }\n    return content;\n}",
               "ground_true": "private Map<String,Object> buildContent(JsonObject jsonObject){\n  Map<String,Object> content=new HashMap<>();\n  content.put(\"msg_type\",jsonObject.get(\"msg_type\").getAsString());\n  if (jsonObject.get(\"ats\") != null) {\n    String ats=jsonObject.get(\"ats\").getAsString();\n    String text=jsonObject.get(\"content\").getAsJsonObject().get(\"text\").getAsString();\n    List<String> collect=Arrays.stream(ats.split(\",\")).map(String::trim).collect(Collectors.toList());\n    for (    String userId : collect) {\n      text+=\"<at user_id=\\\"\" + userId + \"\\\"></at>\";\n    }\n    jsonObject.get(\"content\").getAsJsonObject().addProperty(\"text\",text);\n  }\n  content.put(\"content\",jsonObject.get(\"content\").getAsJsonObject());\n  return content;\n}\n"
          },
          {
               "id": "636767501a6d9265ec017e86",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "@Override public ListNode<E> previousNode(){\nreturn null;\n}",
               "ground_true": "@Override public ListNode<E> previousNode(){\n  checkForComodification();\n  if (!hasPrevious()) {\n    throw new NoSuchElementException();\n  }\n  last=next=next.prev;\n  nextIndex--;\n  return last;\n}\n"
          },
          {
               "id": "636767031a6d9265ec0178ef",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    final int length = Array.getLength(array);\n    final Object result = Array.newInstance(newArrayComponentType,length+1);\n    System.arraycopy(array,0,result,0,length);\n    return result;\n}",
               "ground_true": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n  if (array != null) {\n    int arrayLength=Array.getLength(array);\n    Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);\n    System.arraycopy(array,0,newArray,0,arrayLength);\n    return newArray;\n  }\n  return Array.newInstance(newArrayComponentType,1);\n}\n"
          },
          {
               "id": "6367677e1a6d9265ec018314",
               "type": [
                    "Missing Null Checks",
                    "Missing Specific Value Checks",
                    "Errorous Expression"
               ],
               "type_id": [
                    1,
                    2,
                    8
               ],
               "generate_code": "protected int removeUnusedNodes(){\n    // Your implementation here\n}",
               "ground_true": "protected int removeUnusedNodes(){\n  int count=0;\n  CategoryNode root=_categoryModel.getRootCategoryNode();\n  Enumeration enumeration=root.depthFirstEnumeration();\n  while (enumeration.hasMoreElements()) {\n    CategoryNode node=(CategoryNode)enumeration.nextElement();\n    if (node.isLeaf() && node.getNumberOfContainedRecords() == 0 && node.getParent() != null) {\n      _categoryModel.removeNodeFromParent(node);\n      count++;\n    }\n  }\n  return count;\n}\n"
          },
          {
               "id": "636766fe1a6d9265ec01782a",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n    final int utfOffset = this.constantUtf8Values[constantPoolEntryIndex];\n    return this.readUtf(utfOffset,utfOffset + 2 * this.maxStringLength, charBuffer);\n}",
               "ground_true": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){\n  String value=constantUtf8Values[constantPoolEntryIndex];\n  if (value != null) {\n    return value;\n  }\n  int cpInfoOffset=cpInfoOffsets[constantPoolEntryIndex];\n  return constantUtf8Values[constantPoolEntryIndex]=readUtf(cpInfoOffset + 2,readUnsignedShort(cpInfoOffset),charBuffer);\n}\n"
          },
          {
               "id": "636767511a6d9265ec017eb6",
               "type": [
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    2,
                    4
               ],
               "generate_code": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\nreturn null;\n}",
               "ground_true": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){\n  OuterFaceCirculator circulator=start.iterator(dir);\n  Node current=circulator.next();\n  while (current != stop && !predicate.test(current)) {\n    current=circulator.next();\n  }\n  return circulator;\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec01820b",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static String deleteAny(String inString,String charsToDelete){\n    if (inString == null || charsToDelete == null) {\n        return inString;\n    }\n    StringBuilder sb = new StringBuilder(inString.length());\n    for (int i = 0; i < inString.length(); i++) {\n        char c = inString.charAt(i);\n        if (!charsToDelete.contains(c)) {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
               "ground_true": "public static String deleteAny(String inString,String charsToDelete){\n  if (!hasLength(inString) || !hasLength(charsToDelete)) {\n    return inString;\n  }\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < inString.length(); i++) {\n    char c=inString.charAt(i);\n    if (charsToDelete.indexOf(c) == -1) {\n      sb.append(c);\n    }\n  }\n  return sb.toString();\n}\n"
          },
          {
               "id": "636766f81a6d9265ec01774b",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public byte readByte() throws IOException {\n    if (pos >= bufSize) {\n        fillBuffer();\n    }\n    return buffer[pos++];\n}",
               "ground_true": "public byte readByte() throws IOException {\n  if (head == tail) {\n    head=0;\n    tail=input.read(buffer,head,bufSize);\n    if (tail == -1) {\n      throw new IOException(\"No more data is available\");\n    }\n  }\n  return buffer[head++];\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183f2",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public int compare(Object aObj1,Object aObj2){\n    EventDetails e1=(EventDetails)aObj1;\n    EventDetails e2=(EventDetails)aObj2;\n    return e1.getTimeStamp().compareTo(e2.getTimeStamp());\n}",
               "ground_true": "public int compare(Object aObj1,Object aObj2){\n  if ((aObj1 == null) && (aObj2 == null)) {\n    return 0;\n  }\n else   if (aObj1 == null) {\n    return -1;\n  }\n else   if (aObj2 == null) {\n    return 1;\n  }\n  final EventDetails le1=(EventDetails)aObj1;\n  final EventDetails le2=(EventDetails)aObj2;\n  if (le1.getTimeStamp() < le2.getTimeStamp()) {\n    return 1;\n  }\n  return -1;\n}\n"
          },
          {
               "id": "636766fa1a6d9265ec01779d",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public static boolean isAsciiControl(final char ch){\n    return (ch & 0x80) == 0;\n}",
               "ground_true": "public static boolean isAsciiControl(final char ch){\n  return ch < 32 || ch == 127;\n}\n"
          },
          {
               "id": "636766fa1a6d9265ec017796",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Boolean[] toObject(final boolean[] array){\n    return (Boolean[]) Array.newInstance(Boolean.class, array.length);\n}",
               "ground_true": "public static Boolean[] toObject(final boolean[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;\n  }\n  final Boolean[] result=new Boolean[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=array[i] ? Boolean.TRUE : Boolean.FALSE;\n  }\n  return result;\n}\n"
          },
          {
               "id": "6367670a1a6d9265ec0179f1",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "public static Short[] toObject(final short[] array){\n    return ArrayUtils.toObject(array, Short.class);\n}",
               "ground_true": "public static Short[] toObject(final short[] array){\n  if (array == null) {\n    return null;\n  }\n else   if (array.length == 0) {\n    return ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;\n  }\n  final Short[] result=new Short[array.length];\n  for (int i=0; i < array.length; i++) {\n    result[i]=new Short(array[i]);\n  }\n  return result;\n}\n"
          },
          {
               "id": "636767461a6d9265ec017d17",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "private String unescapeId(String input){\n    return input.replace(\"\\\\\\\\\", \"\\\\\").replace(\"\\\\\\\"\", \"\\\"\");\n}",
               "ground_true": "private String unescapeId(String input){\n  final char quote='\"';\n  if (input.charAt(0) != quote || input.charAt(input.length() - 1) != quote) {\n    return input;\n  }\n  String noQuotes=input.subSequence(1,input.length() - 1).toString();\n  String unescaped=unescapeId.translate(noQuotes);\n  return unescaped;\n}\n"
          },
          {
               "id": "636767611a6d9265ec018112",
               "type": [
                    "Missing Boolean Value Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    4,
                    3
               ],
               "generate_code": "@Override protected V provideNextVertex(){\n    return null;\n}",
               "ground_true": "@Override protected V provideNextVertex(){\n  V v=super.provideNextVertex();\n  for (int i=path.size() - 1; i >= 0; --i) {\n    if (graph.containsEdge(path.get(i),v)) {\n      break;\n    }\n    path.remove(i);\n  }\n  path.add(v);\n  return v;\n}\n"
          },
          {
               "id": "6367676c1a6d9265ec018220",
               "type": [
                    "Missing Null Checks",
                    "Missing Range Checks"
               ],
               "type_id": [
                    1,
                    3
               ],
               "generate_code": "public static String stripFilenameExtension(String path){\n    int i = path.lastIndexOf('.');\n    if(i > 0 && i < path.length() - 1)\n        return path.substring(0,i);\n    else\n        return path;\n}",
               "ground_true": "public static String stripFilenameExtension(String path){\n  if (path == null) {\n    return null;\n  }\n  int extIndex=path.lastIndexOf(EXTENSION_SEPARATOR);\n  if (extIndex == -1) {\n    return path;\n  }\n  int folderIndex=path.lastIndexOf(FOLDER_SEPARATOR);\n  if (folderIndex > extIndex) {\n    return path;\n  }\n  return path.substring(0,extIndex);\n}\n"
          },
          {
               "id": "6367674a1a6d9265ec017da9",
               "type": [
                    "Missing Assertions",
                    "Missing Specific Value Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    6,
                    2,
                    4
               ],
               "generate_code": "private void moveAllListNodes(DoublyLinkedList<E> list){\n    ListNodeImpl<E> current = head;\n    while(current != null){\n        list.addLast(current.value);\n        current = current.next;\n    }\n}",
               "ground_true": "private void moveAllListNodes(DoublyLinkedList<E> list){\n  for (ListNodeIteratorImpl it=list.new ListNodeIteratorImpl(0); it.hasNext(); ) {\n    ListNodeImpl<E> node=it.nextNode();\n    assert node.list == list;\n    node.list=this;\n  }\n  size+=list.size;\n  list.size=0;\n  modCount++;\n  list.modCount++;\n}\n"
          },
          {
               "id": "636767151a6d9265ec017b6b",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n    if(str==null||prefix==null)return false;\n    int minLength=str.length()<prefix.length()?str.length():prefix.length();\n    for(int i=0;i<minLength;++i){\n        char c=str.charAt(i);\n        char p=prefix.charAt(i);\n        if(c!=p&&(!ignoreCase||c!=Character.toLowerCase(p)&&c!=Character.toUpperCase(p)))return false;\n    }\n    return true;\n}",
               "ground_true": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){\n  if (str == null || prefix == null) {\n    return str == null && prefix == null;\n  }\n  if (prefix.length() > str.length()) {\n    return false;\n  }\n  return str.regionMatches(ignoreCase,0,prefix,0,prefix.length());\n}\n"
          },
          {
               "id": "636766f31a6d9265ec01768f",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static char[] clone(final char[] array){\n    return array.clone();\n}",
               "ground_true": "public static char[] clone(final char[] array){\n  if (array == null) {\n    return null;\n  }\n  return array.clone();\n}\n"
          },
          {
               "id": "636766831a6d9265ec0174eb",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private void addReverse(final File[] files){\n    for(int i = files.length - 1; i >= 0; i--){\n        stack.push(files[i]);\n    }\n}",
               "ground_true": "private void addReverse(final File[] files){\n  if (files == null)   return;\n  for (int i=files.length - 1; i >= 0; --i) {\n    stack.add(files[i]);\n  }\n}\n"
          },
          {
               "id": "636767841a6d9265ec0183ff",
               "type": [
                    "Missing Null Checks",
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    1,
                    4
               ],
               "generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n    // Select the specified row\n    table.setRowSelectionInterval(row,row);\n\n    // Scroll the given JScrollPane to the row\n    pane.getViewport().scrollRectToVisible(table.getCellRect(row,0,true));\n}",
               "ground_true": "public static void selectRow(int row,JTable table,JScrollPane pane){\n  if (table == null || pane == null) {\n    return;\n  }\n  if (contains(row,table.getModel()) == false) {\n    return;\n  }\n  moveAdjustable(row * table.getRowHeight(),pane.getVerticalScrollBar());\n  selectRow(row,table.getSelectionModel());\n  repaintLater(table);\n}\n"
          },
          {
               "id": "636766a81a6d9265ec017596",
               "type": [
                    "Missing Range Checks"
               ],
               "type_id": [
                    3
               ],
               "generate_code": "public ByteVector putInt(final int intValue){\n    final int high = intValue >>> 24;\n    final int mid = intValue >>> 16 & 0xFF;\n    final int low = intValue >>> 8 & 0xFF;\n    final int byteLow = intValue & 0xFF;\n    data.put(high).put(mid).put(low).put(byteLow);\n    return this;\n}",
               "ground_true": "public ByteVector putInt(final int intValue){\n  int currentLength=length;\n  if (currentLength + 4 > data.length) {\n    enlarge(4);\n  }\n  byte[] currentData=data;\n  currentData[currentLength++]=(byte)(intValue >>> 24);\n  currentData[currentLength++]=(byte)(intValue >>> 16);\n  currentData[currentLength++]=(byte)(intValue >>> 8);\n  currentData[currentLength++]=(byte)intValue;\n  length=currentLength;\n  return this;\n}\n"
          },
          {
               "id": "636767061a6d9265ec01794a",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "public static int indexOfExtension(String filename){\n    // Check if the filename has an extension separator\n    if (filename.indexOf(EXTENSION_SEPARATOR) != -1) {\n        // Return the last index of the extension separator\n        return filename.lastIndexOf(EXTENSION_SEPARATOR);\n    } else {\n        // Return -1 if the filename doesn't have the separator or there is a directory separator after it\n        return -1;\n    }\n}",
               "ground_true": "public static int indexOfExtension(String filename){\n  if (filename == null) {\n    return -1;\n  }\n  int extensionPos=filename.lastIndexOf(EXTENSION_SEPARATOR);\n  int lastSeparator=indexOfLastSeparator(filename);\n  return lastSeparator > extensionPos ? -1 : extensionPos;\n}\n"
          },
          {
               "id": "6367675d1a6d9265ec018082",
               "type": [
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    2
               ],
               "generate_code": "Edge edgeToNext(){\nreturn null;\n}",
               "ground_true": "Edge edgeToNext(){\n  Edge edge=prev.embedded.getFirst();\n  Node target=toExistingNode(current);\n  Node source=toExistingNode(prev);\n  if (edge.getOpposite(source) == target) {\n    return edge;\n  }\n else {\n    return prev.embedded.getLast();\n  }\n}\n"
          },
          {
               "id": "636767a31a6d9265ec01854f",
               "type": [
                    "Missing Range Checks",
                    "Missing Specific Value Checks"
               ],
               "type_id": [
                    3,
                    2
               ],
               "generate_code": "private void checkIfPackedField() throws IOException {\n    // Check if the field should be packed\n    if (packedLimit > 0 && bufferPos >= packedLimit) {\n        // Read the field\n        readField(schema);\n        // Update the internal state\n        packedLimit = 0;\n    }\n}",
               "ground_true": "private void checkIfPackedField() throws IOException {\n  if (packedLimit == 0 && WireFormat.getTagWireType(lastTag) == WIRETYPE_LENGTH_DELIMITED) {\n    final int length=readRawVarint32();\n    if (length < 0)     throw ProtobufException.negativeSize();\n    this.packedLimit=getTotalBytesRead() + length;\n  }\n}\n"
          },
          {
               "id": "636767a81a6d9265ec0185fc",
               "type": [
                    "Missing Boolean Value Checks"
               ],
               "type_id": [
                    4
               ],
               "generate_code": "public int readTag() throws IOException {\n    return (lastTag = currentOffset()) >>> TAG_TYPE_BITS;\n}",
               "ground_true": "public int readTag() throws IOException {\n  if (!buffer.hasRemaining()) {\n    lastTag=0;\n    return 0;\n  }\n  final int tag=readRawVarint32();\n  if (tag >>> TAG_TYPE_BITS == 0) {\n    throw ProtobufException.invalidTag();\n  }\n  lastTag=tag;\n  return tag;\n}\n"
          },
          {
               "id": "636766ae1a6d9265ec0175d8",
               "type": [
                    "Missing Null Checks"
               ],
               "type_id": [
                    1
               ],
               "generate_code": "private String buildContentRange(){\n    int count = this.paginationConfig.getCount();\n    if(count == 0){\n        return \"bytes 0-\" + (this.paginationConfig.getOffset() - 1) + \"/\" + count;\n    }\n    return \"bytes \" + this.paginationConfig.getOffset() + \"-\" + (count - 1) + \"/\" + count;\n}",
               "ground_true": "private String buildContentRange(){\n  Integer limit=drc.getLimit() == null ? getDefaultNumberPagination() - 1 : drc.getLimit();\n  Integer offset=drc.getOffset() == null ? 0 : drc.getOffset();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return offset + \"-\" + (limit.equals(0) ? count - 1 : limit)+ \"/\"+ count;\n}\n"
          },
          {
               "id": "636767e11a6d9265ec018790",
               "type": [
                    "Missing Error Handling "
               ],
               "type_id": [
                    7
               ],
               "generate_code": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n    // Create a new instance of ThreadSnapshotParser\n    ThreadSnapshotParser parser = new ThreadSnapshotParser();\n    \n    // Open a FileInputStream to read the file\n    FileInputStream fis = new FileInputStream(file);\n    \n    // Create a BufferedInputStream to improve performance\n    BufferedInputStream bis = new BufferedInputStream(fis);\n    \n    // Initialize an empty list to store the parsed thread snapshots\n    List<ThreadSnapshot> threadSnapshots = new ArrayList<>();\n    \n    // Loop through each time range\n    for (ProfileAnalyzeTimeRange timeRange : timeRanges) {\n        // Set the start and end times for the current time range\n        long startTime = timeRange.getStartTime();\n        long endTime = timeRange.getEndTime();\n        \n        // Parse the thread snapshots within the current time range\n        List<ThreadSnapshot> snapshotList = parser.parse(bis, startTime, endTime);\n        \n        // Add the parsed thread snapshots to the list\n        threadSnapshots.addAll(snapshotList);\n    }\n    \n    // Close the BufferedInputStream and FileInputStream\n    bis.close();\n    fis.close();\n    \n    // Return the list of parsed thread snapshots\n    return threadSnapshots;\n}",
               "ground_true": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {\n  try (final FileInputStream fileInputStream=new FileInputStream(file)){\n    ThreadSnapshot snapshot;\n    final ArrayList<ThreadSnapshot> data=new ArrayList<>();\n    while ((snapshot=ThreadSnapshot.parseDelimitedFrom(fileInputStream)) != null) {\n      ThreadSnapshot finalSnapshot=snapshot;\n      if (timeRanges.stream().filter(t -> finalSnapshot.getTime() >= t.getStart() && finalSnapshot.getTime() <= t.getEnd()).findFirst().isPresent()) {\n        data.add(snapshot);\n      }\n    }\n    return data;\n  }\n }\n"
          }
     ]
}
{
      "datas": [
            {
                  "id": "6367676d1a6d9265ec018229",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static String[] trimArrayElements(String[] array){\n    for(int i=0;i<array.length;i++){\n        array[i] = array[i].trim();\n    }\n    return array;\n}",
                  "ground_true": "public static String[] trimArrayElements(String[] array){\n  if (Objects.isEmpty(array)) {\n    return new String[0];\n  }\n  String[] result=new String[array.length];\n  for (int i=0; i < array.length; i++) {\n    String element=array[i];\n    result[i]=(element != null ? element.trim() : null);\n  }\n  return result;\n}\n"
            },
            {
                  "id": "6367670b1a6d9265ec017a00",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n    return array1.length == array2.length;\n}",
                  "ground_true": "public static boolean isSameLength(final byte[] array1,final byte[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
            },
            {
                  "id": "636766a91a6d9265ec0175c2",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "private int pop(){\n    int abstractType = outputStack[outputStackTop--];\n    return getConcreteOutputType(abstractType, outputStackTop - outputStackStart + 1);\n}",
                  "ground_true": "private int pop(){\n  if (outputStackTop > 0) {\n    return outputStack[--outputStackTop];\n  }\n else {\n    return STACK_KIND | -(--outputStackStart);\n  }\n}\n"
            },
            {
                  "id": "6367677e1a6d9265ec01830f",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public String format(LoggingEvent event){\n    sbuf.setLength(0);\n    PatternConverter converter = head;\n    while(converter != null){\n        converter.doConvert(event, sbuf);\n        converter = converter.next;\n    }\n    return sbuf.toString();\n}",
                  "ground_true": "public String format(LoggingEvent event){\n  if (sbuf.capacity() > MAX_CAPACITY) {\n    sbuf=new StringBuffer(BUF_SIZE);\n  }\n else {\n    sbuf.setLength(0);\n  }\n  PatternConverter c=head;\n  while (c != null) {\n    c.format(sbuf,event);\n    c=c.next;\n  }\n  return sbuf.toString();\n}\n"
            },
            {
                  "id": "636767df1a6d9265ec01873c",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public String id(String entityId){\n    return point + Const.ID_CONNECTOR + entityId;\n}",
                  "ground_true": "public String id(String entityId){\n  if (entityId == null) {\n    return String.valueOf(point);\n  }\n else {\n    return point + Const.ID_CONNECTOR + entityId;\n  }\n}\n"
            },
            {
                  "id": "636767791a6d9265ec018257",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public void addMessage(final LogRecord lr){\n    SwingUtilities.invokeLater(new Runnable() {\n        public void run() {\n            _table.addMessage(lr);\n        }\n    });\n}",
                  "ground_true": "public void addMessage(final LogRecord lr){\n  if (_isDisposed == true) {\n    return;\n  }\n  SwingUtilities.invokeLater(new Runnable(){\n    public void run(){\n      _categoryExplorerTree.getExplorerModel().addLogRecord(lr);\n      _table.getFilteredLogTableModel().addLogRecord(lr);\n      updateStatusLabel();\n    }\n  }\n);\n}\n"
            },
            {
                  "id": "636767a41a6d9265ec018582",
                  "token_pos": 1,
                  "ranking": 6,
                  "generate_code": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n    int size = ProtobufIOUtil.writeDelimitedTo(out,message,schema,buffer);\n    return size;\n}",
                  "ground_true": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {\n  if (buffer.start != buffer.offset)   throw new IllegalArgumentException(\"Buffer previously used and had not been reset.\");\n  final ProtobufOutput output=new ProtobufOutput(buffer);\n  schema.writeTo(output,message);\n  final int size=output.getSize();\n  ProtobufOutput.writeRawVarInt32Bytes(out,size);\n  final int msgSize=LinkedBuffer.writeTo(out,buffer);\n  assert size == msgSize;\n  return size;\n}\n"
            },
            {
                  "id": "636767001a6d9265ec01787e",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public String toString(){\n    return this.reflectionToString(this.object, this.style, this.buffer, this.reflectUpToClass, this.outputTransients, this.outputStatics);\n}",
                  "ground_true": "public String toString(){\n  if (this.getObject() == null) {\n    return this.getStyle().getNullText();\n  }\n  Class<?> clazz=this.getObject().getClass();\n  this.appendFieldsIn(clazz);\n  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {\n    clazz=clazz.getSuperclass();\n    this.appendFieldsIn(clazz);\n  }\n  return super.toString();\n}\n"
            },
            {
                  "id": "636766f11a6d9265ec017641",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "@Override public int available() throws IOException {\n    return buffer.length - index;\n}",
                  "ground_true": "@Override public int available() throws IOException {\n  return this.index < this.length ? this.length - this.index : this.length >= 0 && this.reader.ready() ? 1 : 0;\n}\n"
            },
            {
                  "id": "636767de1a6d9265ec018706",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public Mappings diffStructure(String tableName,Mappings mappings){\n    Mappings historyMappings = getMapping(tableName);\n    Fields fields = new Fields(mappings);\n    Fields historyFields = new Fields(historyMappings);\n    if(containsAllFields(historyFields,fields)){\n        return historyMappings;\n    }\n    Fields diffFields = diffFields(fields);\n    appendNewFields(diffFields);\n    return historyMappings;\n}",
                  "ground_true": "public Mappings diffStructure(String tableName,Mappings mappings){\n  if (!structures.containsKey(tableName)) {\n    return new Mappings();\n  }\n  Map<String,Object> properties=mappings.getProperties();\n  Map<String,Object> diffProperties=structures.get(tableName).diffFields(new Fields(mappings));\n  return Mappings.builder().type(ElasticSearchClient.TYPE).properties(diffProperties).build();\n}\n"
            },
            {
                  "id": "6367674b1a6d9265ec017dc0",
                  "token_pos": 36,
                  "ranking": 3,
                  "generate_code": "private Set<V> initVisibleVertices(){\n    Set<V> visibleVertices = new HashSet<V>();\n    for (Edge<V, E> edge : graph.edgeSet()) {\n        visibleVertices.add(edge.getSource());\n        visibleVertices.add(edge.getTarget());\n    }\n    return visibleVertices;\n}",
                  "ground_true": "private Set<V> initVisibleVertices(){\n  Set<V> visibleVertex=new HashSet<>();\n  for (  E e : graph.edgeSet()) {\n    V s=graph.getEdgeSource(e);\n    V t=graph.getEdgeTarget(e);\n    if (!s.equals(t)) {\n      visibleVertex.add(s);\n      visibleVertex.add(t);\n    }\n  }\n  return visibleVertex;\n}\n"
            },
            {
                  "id": "636766fe1a6d9265ec017834",
                  "token_pos": 16,
                  "ranking": 2,
                  "generate_code": "public static String sessionId(){\n    HttpSession session = Invoker.getRequest().getSession();\n    return session.getId();\n}",
                  "ground_true": "public static String sessionId(){\n  HttpSession httpSession=servletSession();\n  if (httpSession == null) {\n    return null;\n  }\n  return httpSession.getId();\n}\n"
            },
            {
                  "id": "636766ff1a6d9265ec01784b",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public static boolean isDigits(String str){\n    for (int i = 0; i < str.length(); i++) {\n        if (!Character.isDigit(str.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}",
                  "ground_true": "public static boolean isDigits(String str){\n  if ((str == null) || (str.length() == 0)) {\n    return false;\n  }\n  for (int i=0; i < str.length(); i++) {\n    if (!Character.isDigit(str.charAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}\n"
            },
            {
                  "id": "636766fc1a6d9265ec0177da",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "private static boolean isParameterSeparator(final char c){\n    for (char separator : PARAMETER_SEPARATORS) {\n        if (c == separator) {\n            return true;\n        }\n    }\n    return false;\n}",
                  "ground_true": "private static boolean isParameterSeparator(final char c){\n  if (Character.isWhitespace(c)) {\n    return true;\n  }\n  for (  char separator : PARAMETER_SEPARATORS) {\n    if (c == separator) {\n      return true;\n    }\n  }\n  return false;\n}\n"
            },
            {
                  "id": "6367677e1a6d9265ec01832e",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public Logger exists(String name){\n    return ht.get(name);\n}",
                  "ground_true": "public Logger exists(String name){\n  Object o=ht.get(new CategoryKey(name));\n  if (o instanceof Logger) {\n    return (Logger)o;\n  }\n else {\n    return null;\n  }\n}\n"
            },
            {
                  "id": "6367670a1a6d9265ec0179e7",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public Converter lookup(final Class<?> clazz){\n    return converters.get(clazz);\n}",
                  "ground_true": "public Converter lookup(final Class<?> clazz){\n  Converter conv=(Converter)this.converters.get(clazz);\n  if (conv != null) {\n    return conv;\n  }\n  for (  Object regType : this.converters.keySet()) {\n    if (((Class<?>)regType).isAssignableFrom(clazz)) {\n      return (Converter)this.converters.get(regType);\n    }\n  }\n  return null;\n}\n"
            },
            {
                  "id": "636766ae1a6d9265ec0175dc",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public Boolean isPartialContentResponse(){\n    return (response.getStatus() == HttpServletResponse.SC_PARTIAL_CONTENT);\n}",
                  "ground_true": "public Boolean isPartialContentResponse(){\n  Integer limit=drc.getLimit() == null ? 0 : drc.getLimit();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return !((limit + 1) >= count);\n}\n"
            },
            {
                  "id": "636767dc1a6d9265ec0186c6",
                  "token_pos": 1,
                  "ranking": 4,
                  "generate_code": "private boolean containsAllFields(Fields fields){\n    return fields.getFields().entrySet().stream()\n            .allMatch(e -> properties.containsKey(e.getKey()) && Objects.equals(properties.get(e.getKey()), e.getValue()));\n}",
                  "ground_true": "private boolean containsAllFields(Fields fields){\n  if (this.properties.size() < fields.properties.size()) {\n    return false;\n  }\n  boolean isContains=fields.properties.entrySet().stream().allMatch(item -> Objects.equals(properties.get(item.getKey()),item.getValue()));\n  if (!isContains) {\n    return false;\n  }\n  return fields.source.getExcludes().containsAll(this.source.getExcludes());\n}\n"
            },
            {
                  "id": "636766fa1a6d9265ec0177a9",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "private void addInitializedType(final int abstractType){\n    this.initializations[this.initializationCount++] = abstractType;\n}",
                  "ground_true": "private void addInitializedType(final int abstractType){\n  if (initializations == null) {\n    initializations=new int[2];\n  }\n  int initializationsLength=initializations.length;\n  if (initializationCount >= initializationsLength) {\n    int[] newInitializations=new int[Math.max(initializationCount + 1,2 * initializationsLength)];\n    System.arraycopy(initializations,0,newInitializations,0,initializationsLength);\n    initializations=newInitializations;\n  }\n  initializations[initializationCount++]=abstractType;\n}\n"
            },
            {
                  "id": "6367670a1a6d9265ec0179d8",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "@Override public void write(final byte[] b) throws IOException {\n    writer.write(new String(b, encoding));\n}",
                  "ground_true": "@Override public void write(final byte[] b) throws IOException {\n  if (this.encoding == null) {\n    this.writer.write(new String(b));\n  }\n else {\n    this.writer.write(new String(b,this.encoding));\n  }\n}\n"
            },
            {
                  "id": "6367676b1a6d9265ec0181e2",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public static Object findFirstMatch(Collection source,Collection candidates){\n    for(Iterator iterator = candidates.iterator();iterator.hasNext();){\n        Object element = iterator.next();\n        if(source.contains(element)){\n            return element;\n        }\n    }\n    return null;\n}",
                  "ground_true": "public static Object findFirstMatch(Collection source,Collection candidates){\n  if (isEmpty(source) || isEmpty(candidates)) {\n    return null;\n  }\n  for (  Object candidate : candidates) {\n    if (source.contains(candidate)) {\n      return candidate;\n    }\n  }\n  return null;\n}\n"
            },
            {
                  "id": "6367676b1a6d9265ec0181ee",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static String trimTrailingWhitespace(String str){\n    return str.replaceAll(\"\\\\s+$\", \"\");\n}",
                  "ground_true": "public static String trimTrailingWhitespace(String str){\n  if (!hasLength(str)) {\n    return str;\n  }\n  StringBuilder sb=new StringBuilder(str);\n  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {\n    sb.deleteCharAt(sb.length() - 1);\n  }\n  return sb.toString();\n}\n"
            },
            {
                  "id": "636767dc1a6d9265ec0186cb",
                  "token_pos": 44,
                  "ranking": 31,
                  "generate_code": "public void init(){\n    analyzeResultDist = \"analyzeResultDist\";\n    File file = new File(analyzeResultDist);\n    if(!file.exists()){\n        file.mkdir();\n    }\n}",
                  "ground_true": "public void init(){\n  File dist=new File(analyzeResultDist);\n  if (!dist.exists()) {\n    dist.mkdirs();\n    return;\n  }\n  if (dist.isFile()) {\n    throw new IllegalArgumentException(analyzeResultDist + \" must be a directory\");\n  }\n}\n"
            },
            {
                  "id": "636767a31a6d9265ec018552",
                  "token_pos": 13,
                  "ranking": 2,
                  "generate_code": "@Override public String readString() throws IOException {\n    int size = readRawVarint32();\n    byte[] bytes = new byte[size];\n    input.readFully(bytes);\n    return new String(bytes, StandardCharsets.UTF_8);\n}",
                  "ground_true": "@Override public String readString() throws IOException {\n  final int size=readRawVarint32();\n  if (size <= (bufferSize - bufferPos) && size > 0) {\n    final String result=STRING.deser(buffer,bufferPos,size);\n    bufferPos+=size;\n    return result;\n  }\n else {\n    return STRING.deser(readRawBytes(size));\n  }\n}\n"
            },
            {
                  "id": "6367667d1a6d9265ec017401",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static String unescapeJava(String str) throws Exception {\n    StringBuilder out = new StringBuilder(str.length());\n    unescapeJava(out, str);\n    return out.toString();\n}",
                  "ground_true": "public static String unescapeJava(String str) throws Exception {\n  if (str == null) {\n    return null;\n  }\n  StringWriter writer=new StringWriter(str.length());\n  unescapeJava(writer,str);\n  return writer.toString();\n}\n"
            },
            {
                  "id": "636767501a6d9265ec017e86",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "@Override public ListNode<E> previousNode(){\n    return prev;\n}",
                  "ground_true": "@Override public ListNode<E> previousNode(){\n  checkForComodification();\n  if (!hasPrevious()) {\n    throw new NoSuchElementException();\n  }\n  last=next=next.prev;\n  nextIndex--;\n  return last;\n}\n"
            },
            {
                  "id": "636767031a6d9265ec0178ef",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n    final int oldLength=Array.getLength(array);\n    final Object newArray=Array.newInstance(newArrayComponentType,oldLength+1);\n    System.arraycopy(array,0,newArray,0,oldLength);\n    return newArray;\n}",
                  "ground_true": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){\n  if (array != null) {\n    int arrayLength=Array.getLength(array);\n    Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);\n    System.arraycopy(array,0,newArray,0,arrayLength);\n    return newArray;\n  }\n  return Array.newInstance(newArrayComponentType,1);\n}\n"
            },
            {
                  "id": "636767081a6d9265ec0179a2",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "private static boolean isAllZeros(String s){\n    for(int i=0;i<s.length();i++){\n        if(s.charAt(i) != '0'){\n            return false;\n        }\n    }\n    return true;\n}",
                  "ground_true": "private static boolean isAllZeros(String s){\n  if (s == null) {\n    return true;\n  }\n  for (int i=s.length() - 1; i >= 0; i--) {\n    if (s.charAt(i) != '0') {\n      return false;\n    }\n  }\n  return s.length() > 0;\n}\n"
            },
            {
                  "id": "6367676a1a6d9265ec0181cd",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static String trimLeadingWhitespace(String str){\n    return str.replaceAll(\"^\\\\s+\", \"\");\n}",
                  "ground_true": "public static String trimLeadingWhitespace(String str){\n  if (!hasLength(str)) {\n    return str;\n  }\n  StringBuilder sb=new StringBuilder(str);\n  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {\n    sb.deleteCharAt(0);\n  }\n  return sb.toString();\n}\n"
            },
            {
                  "id": "636766861a6d9265ec01755a",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public final MatchResult match(CharSequence uri){\n    Objects.requireNonNull(uri);\n    Matcher matcher = regexPattern.matcher(uri);\n    if(matcher.find()){\n        return matcher.toMatchResult();\n    }\n    return null;\n}",
                  "ground_true": "public final MatchResult match(CharSequence uri){\n  if (uri == null || uri.length() == 0)   return (regexPattern == null) ? EMPTY_STRING_MATCH_RESULT : null;\n else   if (regexPattern == null)   return null;\n  Matcher m=regexPattern.matcher(uri);\n  if (!m.matches())   return null;\n  return (groupIndexes.length > 0) ? new GroupIndexMatchResult(m) : m;\n}\n"
            },
            {
                  "id": "636767841a6d9265ec0183f2",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "public int compare(Object aObj1,Object aObj2){\n    EventDetails event1 = (EventDetails) aObj1;\n    EventDetails event2 = (EventDetails) aObj2;\n    return event1.getTimeStamp().compareTo(event2.getTimeStamp());\n}",
                  "ground_true": "public int compare(Object aObj1,Object aObj2){\n  if ((aObj1 == null) && (aObj2 == null)) {\n    return 0;\n  }\n else   if (aObj1 == null) {\n    return -1;\n  }\n else   if (aObj2 == null) {\n    return 1;\n  }\n  final EventDetails le1=(EventDetails)aObj1;\n  final EventDetails le2=(EventDetails)aObj2;\n  if (le1.getTimeStamp() < le2.getTimeStamp()) {\n    return 1;\n  }\n  return -1;\n}\n"
            },
            {
                  "id": "636767041a6d9265ec017911",
                  "token_pos": 10,
                  "ranking": 4,
                  "generate_code": "static void register(Object value){\n    if(value != null){\n        REGISTRY.set(value);\n    }\n}",
                  "ground_true": "static void register(Object value){\n  if (value != null) {\n    Map m=getRegistry();\n    if (m == null) {\n      m=new WeakHashMap();\n      REGISTRY.set(m);\n    }\n    m.put(value,null);\n  }\n}\n"
            },
            {
                  "id": "636767461a6d9265ec017d17",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "private String unescapeId(String input){\n    return StringEscapeUtils.unescapeHtml4(input);\n}",
                  "ground_true": "private String unescapeId(String input){\n  final char quote='\"';\n  if (input.charAt(0) != quote || input.charAt(input.length() - 1) != quote) {\n    return input;\n  }\n  String noQuotes=input.subSequence(1,input.length() - 1).toString();\n  String unescaped=unescapeId.translate(noQuotes);\n  return unescaped;\n}\n"
            },
            {
                  "id": "636767641a6d9265ec018190",
                  "token_pos": 1,
                  "ranking": 4,
                  "generate_code": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n    bucketsByLabel.get(0).addAll(bucketsByLabel.get(minLabel));\n    bucketsByLabel.get(minLabel).clear();\n    for(int i=minLabel+1;i<labels.size();i++){\n        labels.set(i-1,labels.get(i));\n    }\n    labels.remove(labels.size()-1);\n}",
                  "ground_true": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){\n  if (minLabel != 0 && minLabel < bucketsByLabel.size()) {\n    Set<Integer> bucket=bucketsByLabel.get(minLabel);\n    for (    Integer vertex : bucket) {\n      labels.set(vertex,0);\n      bucketsByLabel.get(0).add(vertex);\n    }\n    bucket.clear();\n  }\n}\n"
            },
            {
                  "id": "6367676b1a6d9265ec0181dd",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static int countOccurrencesOf(String str,String sub){\n    int count = 0;\n    int idx = 0;\n    while ((idx = str.indexOf(sub, idx)) != -1) {\n        count++;\n        idx += sub.length();\n    }\n    return count;\n}",
                  "ground_true": "public static int countOccurrencesOf(String str,String sub){\n  if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {\n    return 0;\n  }\n  int count=0;\n  int pos=0;\n  int idx;\n  while ((idx=str.indexOf(sub,pos)) != -1) {\n    ++count;\n    pos=idx + sub.length();\n  }\n  return count;\n}\n"
            },
            {
                  "id": "636767461a6d9265ec017d0e",
                  "token_pos": 52,
                  "ranking": 2,
                  "generate_code": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n    List<Integer> suffixSums = new ArrayList<>();\n    int sum = 0;\n    for(int i = bounds.size()-1; i >= 0; i--){\n        sum += bounds.get(i);\n        suffixSums.add(sum);\n    }\n    Collections.reverse(suffixSums);\n    return new Pair<>(suffixSums, (long) sum);\n}",
                  "ground_true": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){\n  List<Integer> suffixSum=new ArrayList<>(Collections.nCopies(bounds.size(),0));\n  long sum=0;\n  for (int i=bounds.size() - 1; i >= 0; i--) {\n    suffixSum.set(i,(int)Math.min(Integer.MAX_VALUE,sum));\n    sum+=bounds.get(i);\n  }\n  return Pair.of(suffixSum,sum);\n}\n"
            },
            {
                  "id": "636766f81a6d9265ec017748",
                  "token_pos": 1,
                  "ranking": 5,
                  "generate_code": "public static String base64Decode(final String s){\n    return new String(Base64.getDecoder().decode(s), StandardCharsets.UTF_8);\n}",
                  "ground_true": "public static String base64Decode(final String s){\n  byte[] b=Base64.base64DecodeToArray(s);\n  if (b == null) {\n    return null;\n  }\n  if (b.length == 0) {\n    return \"\";\n  }\n  return new String(b,StandardCharsets.UTF_8);\n}\n"
            },
            {
                  "id": "636766f11a6d9265ec017663",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static boolean isSameLength(final double[] array1,final double[] array2){\n    return ArrayUtils.isSameLength(array1,array2);\n}",
                  "ground_true": "public static boolean isSameLength(final double[] array1,final double[] array2){\n  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {\n    return false;\n  }\n  return true;\n}\n"
            },
            {
                  "id": "636767691a6d9265ec0181a6",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static String[] split(String toSplit,String delimiter){\n    return toSplit.split(delimiter);\n}",
                  "ground_true": "public static String[] split(String toSplit,String delimiter){\n  if (!hasLength(toSplit) || !hasLength(delimiter)) {\n    return null;\n  }\n  int offset=toSplit.indexOf(delimiter);\n  if (offset < 0) {\n    return null;\n  }\n  String beforeDelimiter=toSplit.substring(0,offset);\n  String afterDelimiter=toSplit.substring(offset + delimiter.length());\n  return new String[]{beforeDelimiter,afterDelimiter};\n}\n"
            },
            {
                  "id": "636767601a6d9265ec0180e2",
                  "token_pos": 70,
                  "ranking": 2,
                  "generate_code": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n    List<Pair<List<Pair<Integer,Integer>>,E>> result = new ArrayList<>();\n    for(E edge : graph.edgeSet()){\n        List<Pair<Integer,Integer>> separators = new ArrayList<>();\n        for(V vertex : graph.neighborListOf(edge)){\n            List<Pair<Integer,Integer>> separator = getSeparator(graph,vertex,new DepthFirstMap<>(graph));\n            separators.addAll(separator);\n        }\n        result.add(new Pair<>(separators,edge));\n    }\n    return result;\n}",
                  "ground_true": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){\n  List<Pair<List<Pair<Integer,Integer>>,E>> globalSeparatorList=new ArrayList<>();\n  for (  E edge : graph.edgeSet()) {\n    V source=graph.getEdgeSource(edge);\n    V target=graph.getEdgeTarget(edge);\n    if (source != target) {\n      List<Set<V>> edgeSeparators=findSeparators(graph,edge);\n      globalSeparatorList.addAll(reformatSeparatorList(edgeSeparators,edge));\n    }\n  }\n  return globalSeparatorList;\n}\n"
            },
            {
                  "id": "636766831a6d9265ec0174eb",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "private void addReverse(final File[] files){\n    stack = new LinkedList<File>();\n    for(int i = files.length - 1; i >= 0; i--){\n        stack.push(files[i]);\n    }\n}",
                  "ground_true": "private void addReverse(final File[] files){\n  if (files == null)   return;\n  for (int i=files.length - 1; i >= 0; --i) {\n    stack.add(files[i]);\n  }\n}\n"
            },
            {
                  "id": "636767841a6d9265ec0183ff",
                  "token_pos": 38,
                  "ranking": 3,
                  "generate_code": "public static void selectRow(int row,JTable table,JScrollPane pane){\n    if(row < 0 || row >= table.getRowCount()){\n        throw new IllegalArgumentException(\"Row index out of bounds: \" + row);\n    }\n    table.setRowSelectionInterval(row, row);\n    table.scrollRectToVisible(table.getCellRect(row, 0, true));\n    makeVerticalScrollBarTrack(pane);\n}",
                  "ground_true": "public static void selectRow(int row,JTable table,JScrollPane pane){\n  if (table == null || pane == null) {\n    return;\n  }\n  if (contains(row,table.getModel()) == false) {\n    return;\n  }\n  moveAdjustable(row * table.getRowHeight(),pane.getVerticalScrollBar());\n  selectRow(row,table.getSelectionModel());\n  repaintLater(table);\n}\n"
            },
            {
                  "id": "6367667d1a6d9265ec01741d",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static Type resolveBound(TypeVariable<?> typeVariable){\n    Type bound = typeVariable.getBounds()[0];\n    if(bound instanceof Class){\n        return bound;\n    }else if(bound instanceof ParameterizedType){\n        return resolveBound(((ParameterizedType)bound).getActualTypeArguments()[0]);\n    }else if(bound instanceof TypeVariable){\n        return resolveBound((TypeVariable)bound);\n    }else{\n        return Unknown.class;\n    }\n}",
                  "ground_true": "public static Type resolveBound(TypeVariable<?> typeVariable){\n  Type[] bounds=typeVariable.getBounds();\n  if (bounds.length == 0)   return Unknown.class;\n  Type bound=bounds[0];\n  if (bound instanceof TypeVariable)   bound=resolveBound((TypeVariable<?>)bound);\n  return bound == Object.class ? Unknown.class : bound;\n}\n"
            },
            {
                  "id": "636767021a6d9265ec0178bc",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "public static int indexOf(String str,String searchStr){\n    return str.indexOf(searchStr);\n}",
                  "ground_true": "public static int indexOf(String str,String searchStr){\n  if (str == null || searchStr == null) {\n    return StringUtils.INDEX_NOT_FOUND;\n  }\n  return str.indexOf(searchStr);\n}\n"
            },
            {
                  "id": "6367675d1a6d9265ec018082",
                  "token_pos": 1,
                  "ranking": 3,
                  "generate_code": "Edge edgeToNext(){\n    return prevEdge;\n}",
                  "ground_true": "Edge edgeToNext(){\n  Edge edge=prev.embedded.getFirst();\n  Node target=toExistingNode(current);\n  Node source=toExistingNode(prev);\n  if (edge.getOpposite(source) == target) {\n    return edge;\n  }\n else {\n    return prev.embedded.getLast();\n  }\n}\n"
            },
            {
                  "id": "636767a31a6d9265ec01854f",
                  "token_pos": 12,
                  "ranking": 3,
                  "generate_code": "private void checkIfPackedField() throws IOException {\n    if (isCurrentFieldPacked()) {\n        readField();\n    }\n}",
                  "ground_true": "private void checkIfPackedField() throws IOException {\n  if (packedLimit == 0 && WireFormat.getTagWireType(lastTag) == WIRETYPE_LENGTH_DELIMITED) {\n    final int length=readRawVarint32();\n    if (length < 0)     throw ProtobufException.negativeSize();\n    this.packedLimit=getTotalBytesRead() + length;\n  }\n}\n"
            },
            {
                  "id": "636766a81a6d9265ec017595",
                  "token_pos": 1,
                  "ranking": 2,
                  "generate_code": "final ByteVector put11(final int byteValue1,final int byteValue2){\n    enlarge(2);\n    data[length++]=(byte)byteValue1;\n    data[length++]=(byte)byteValue2;\n    return this;\n}",
                  "ground_true": "final ByteVector put11(final int byteValue1,final int byteValue2){\n  int currentLength=length;\n  if (currentLength + 2 > data.length) {\n    enlarge(2);\n  }\n  byte[] currentData=data;\n  currentData[currentLength++]=(byte)byteValue1;\n  currentData[currentLength++]=(byte)byteValue2;\n  length=currentLength;\n  return this;\n}\n"
            },
            {
                  "id": "636766ae1a6d9265ec0175d8",
                  "token_pos": 1,
                  "ranking": 5,
                  "generate_code": "private String buildContentRange(){\n    StringBuilder contentRange = new StringBuilder();\n    contentRange.append(\"items \").append(this.offset).append(\"-\").append(this.limit == 0 ? this.count - 1 : this.limit).append(\"/\").append(this.count);\n    return contentRange.toString();\n}",
                  "ground_true": "private String buildContentRange(){\n  Integer limit=drc.getLimit() == null ? getDefaultNumberPagination() - 1 : drc.getLimit();\n  Integer offset=drc.getOffset() == null ? 0 : drc.getOffset();\n  Long count=drc.getCount() == null ? 0 : drc.getCount();\n  return offset + \"-\" + (limit.equals(0) ? count - 1 : limit)+ \"/\"+ count;\n}\n"
            }
      ]
}